<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts54892065.66</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>user-extensions.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/x-javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/**\n
 * Selenium extensions for the ERP5 project\n
 */\n
\n
/* pere */\n
\n
/**\n
 * Checks the element referenced by `locator` is a float equals to `text`.\n
 * Values are converted to float, to be format-independant (ie. 1 000 = 1000.0)\n
 */\n
Selenium.prototype.assertFloat = function(locator, text) {\n
    var actualValueText = getText(this.page().findElement(locator));\n
    var actualValue = parseFloat(actualValueText\n
                          .replace(/ /g, "").replace(/&nbsp;/g, ""));\n
    var expectedValue = parseFloat(text.replace(/ /g, "").replace(/&nbsp;/g, ""));\n
\n
    if (isNaN(actualValue)) {\n
        Assert.fail("Actual value "+ actualValueText +\n
                        " cannot be parsed as float");\n
    }\n
    Assert.matches(expectedValue.toString(), actualValue.toString());\n
};\n
\n
\n
/**\n
 * like assertFloat, but for the value of <input elements.\n
 */\n
Selenium.prototype.assertFloatValue = function(locator, text) {\n
    var actualValueText = getInputValue(this.page().findElement(locator));\n
    var actualValue = parseFloat(actualValueText\n
                            .replace(/ /g, "").replace(/&nbsp;/g, ""));\n
    var expectedValue = parseFloat(text.replace(/ /g, "").replace(/&nbsp;/g, ""));\n
\n
    if (isNaN(actualValue)) {\n
        Assert.fail("Actual value "+ actualValueText +\n
                        " cannot be parsed as float");\n
    }\n
    Assert.matches(expectedValue.toString(), actualValue.toString());\n
};\n
\n
\n
/**\n
 * Checks the portal status message.\n
 */\n
Selenium.prototype.assertPortalStatusMessage = function(text) {\n
    var psm_locator = "//div[@id=\'transition_message\']";\n
    var actualValue = getText(this.page().findElement(psm_locator));\n
    Assert.matches(text, actualValue);\n
};\n
\n
Selenium.prototype.doType = function(locator, newText) {\n
    if (typeof(netscape) != "undefined" && typeof(netscape.security.PrivilegeManager) != "undefined" ) {\n
      // On old firefox versions, we enable privilege to upload file in javascript.\n
      // The user needs to have signed.applets.codebase_principal_support set to true in about:config\n
      // This is done in prefs.js generated by product/ERP5Type/tests/runFunctionalTest.py\n
      // This approach no longer work in newer firefox versions https://developer.mozilla.org/en-US/docs/Bypassing_Security_Restrictions_and_Signing_Code\n
      // Without this, tests dealing with file upload will fail\n
      netscape.security.PrivilegeManager.enablePrivilege("UniversalFileRead");\n
    }\n
    var element = this.page().findElement(locator);\n
    this.page().replaceText(element, newText);\n
};\n
\n
/*\n
 * Get the location of the current page. This function is missing in\n
 * Selenium 0.8 or later.\n
 */\n
Selenium.prototype.getAbsoluteLocation = function() {\n
    return this.page().location || this.browserbot.getCurrentWindow().location;\n
};\n
\n
Selenium.prototype.doPhantomRender = function(filename) {\n
    if (window.page && window.page.render) {\n
        page.render(filename);\n
    }\n
};\n
\n
Selenium.prototype.doZoomIn = function() {\n
   this.page().SafeImage.map.zoomTo(1);\n
};\n
\n
Selenium.prototype.doZoomOut = function() {\n
   this.page().SafeImage.map.zoomTo(0);\n
};\n
\n
\n
Selenium.prototype.assertElementPositionRangeTop = function(locator, range){\n
    var positionTop = parseFloat(this.getElementPositionTop(locator));\n
    /* example of range 450..455 */\n
    var rangeList = range.split("..");\n
    var minimumPositionTop = parseFloat(rangeList[0]);\n
    var maximumPositionTop = parseFloat(rangeList[1]);\n
    if (positionTop < minimumPositionTop || positionTop > maximumPositionTop ){\n
      Assert.fail(positionTop + " is not between " + minimumPositionTop + " and " + maximumPositionTop);\n
    };\n
};

]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3622</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

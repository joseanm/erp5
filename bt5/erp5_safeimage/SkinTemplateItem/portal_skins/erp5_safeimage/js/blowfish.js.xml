<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts55835256.4</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>blowfish.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

\r\n
\r\n
    /* /_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/\r\n
    charset= shift_jis\r\n
    \r\n
    +++ Blowfish \x88\xc3\x8d\x86\x83A\x83\x8b\x83S\x83\x8a\x83Y\x83\x80 +++\r\n
\r\n
    http://www.schneier.com/blowfish.html\r\n
    \r\n
    \r\n
    LastModified : 2006-11/01\r\n
    \r\n
    Powered by kerry\r\n
    http://user1.matsumoto.ne.jp/~goma/\r\n
    \r\n
    \x93\xae\x8d\xec\x83u\x83\x89\x83E\x83U :: IE4+ , NN4.06+ , Gecko , Opera6+\r\n
\r\n
    ----------------------------------------------------------------\r\n
    \r\n
    Usage;\r\n
    \r\n
    * \x88\xc3\x8d\x86\x89\xbb\r\n
    cipherText = blowfish.encrypt( plainText,  key [, mode [, iv [, round [, paddingChar]]]] );\r\n
\r\n
    * \x95\x9c\x8d\x86\x89\xbb\r\n
    plainText = blowfish.decrypt( cipherText, key [, mode [, round [, paddingChar]]] );\r\n
\r\n
    * IV \x82\xf0\x93K\x93\x96\x82\xc9\x8d\xec\x82\xe7\x82\xb9\x82\xe9\r\n
    IV = blowfish.mkIV();\r\n
    \r\n
    \r\n
    * \x88\xc3\x8d\x86\xa5\x95\x9c\x8d\x86\x8b\xa4\x82\xc9\x98A\x91z\x94z\x97\xf1\x82\xc5\x93n\x82\xb7\x82\xb1\x82\xc6\x82\xe0\x8fo\x97\x88\x82\xe9\r\n
    // e.g.\r\n
    myHash = {\r\n
        // Key  : value ( Key \x82\xcd\x8c\xc5\x92\xe8 )\r\n
        data    : "Hello !!",\r\n
        key     : "myKey",\r\n
        mode    : "cbc",\r\n
        iv      : blowfish.mkIV(),\r\n
        round   : 16,\r\n
        pchar   : "\\x05"\r\n
    };\r\n
    cipherText = blowfish.encrypt( myHash );\r\n
\r\n
    \r\n
    \r\n
    * \x90\xd9\x8d\xec\x82\xcc Base64 \x83\x89\x83C\x83u\x83\x89\x83\x8a\x82\xf0\x8eg\x82\xa4 ( \x95\xca\x93r\x95K\x97v )\r\n
\r\n
    - \x88\xc3\x8d\x86\x95\xb6\x82\xf0\x95\x84\x8d\x86\x89\xbb\r\n
    cipherText   = blowfish.encrypt( \x97\xaa.... );\r\n
    cipherText64 = base64.encode( cipherText );\r\n
    \r\n
    - \x95\x84\x8d\x86\x89\xbb\x82\xb3\x82\xea\x82\xbd\x88\xc3\x8d\x86\x95\xb6\x82\xf0\x95\x9c\x8d\x86\x89\xbb\r\n
    cipherText = base64.decode( cipherText64 );\r\n
    plainText  = blowfish.encrypt( \x97\xaa.... );\r\n
\r\n
\r\n
    * \x90\xd9\x8d\xec\x82\xcc URL \x83G\x83\x93\x83R\x81[\x83h/\x83f\x83R\x81[\x83h\x8a\xd6\x90\x94\x82\xf0\x8eg\x82\xa4 ( \x93\xaf\x83X\x83N\x83\x8a\x83v\x83g\x82\xc9\x97L\x82\xe8 )\r\n
    \r\n
    - \x88\xc3\x8d\x86\x95\xb6\x82\xf0\x95\x84\x8d\x86\x89\xbb\r\n
    cipherText   = blowfish.encrypt( \x97\xaa.... );\r\n
    cipherURLstr = utf.URLencode( cipherText );\r\n
    \r\n
    - \x95\x84\x8d\x86\x89\xbb\x82\xb3\x82\xea\x82\xbd\x88\xc3\x8d\x86\x95\xb6\x82\xf0\x95\x9c\x8d\x86\x89\xbb\r\n
    cipherText = utf.URLdecode( cipherURLstr );\r\n
    plainText  = blowfish.( \x97\xaa.... );\r\n
    \r\n
    \r\n
    \r\n
    plainText   ->  \x95\xbd\x95\xb6\r\n
    cipherText  ->  \x88\xc3\x8d\x86\x95\xb6\r\n
    key         ->  \x83L\x81[ [ 5 - 56 byte ]\r\n
    mode        ->  ecb | cbc | cfb | ofb \x81B\x8f\xc8\x97\xaa\x8e\x9e\x82\xcd ecb \x83\x82\x81[\x83h\r\n
    round       ->  \x83\x89\x83E\x83\x93\x83h\x90\x94 [ 1 - 16]\r\n
    iv          ->  8 byte (ecb \x83\x82\x81[\x83h\x82\xc5\x82\xcd\x95s\x97v)\r\n
\r\n
    paddingChar ->  \x95\xbd\x95\xb6\x82\xf08\x82\xcc\x94{\x90\x94\x82\xc9\x82\xb7\x82\xe9\x82\xbd\x82\xdf\x82\xc9\x8eg\x97p\x82\xb7\x82\xe9\x83L\x83\x83\x83\x89\x83N\x83^\x81B\r\n
    ( pchar )       \x8f\xc8\x97\xaa\x8e\x9e\x82\xcd 0x05\x81B\x92\xca\x8f\xed\x82\xcd\x93\xc1\x82\xc9\x8ew\x92\xe8\x82\xb5\x82\xc8\x82\xa2\x82\xaa\x83o\x83C\x83i\x83\x8a\r\n
                    \x82\xcc\x8d\xdb\x82\xcd\x95K\x97v\x82\xa9\x82\xe0\x82\xb5\x82\xea\x82\xc8\x82\xa2\x81B( \x83f\x81[\x83^\x8d\xc5\x8c\xe3\x82\xcc\x83o\x83C\x83g\x82\xaa\r\n
                    0x05 \x82\xc5\x82\xa0\x82\xc1\x82\xbd\x8e\x9e\x81A\x95\x9c\x8d\x86\x89\xbb\x8e\x9e\x83p\x83f\x83B\x83\x93\x83O\x82\xb3\x82\xea\x82\xbd\x95\xb6\x8e\x9a\x82\xf0\r\n
                    \x8d\xed\x82\xc1\x82\xc4\x95\xd4\x82\xb7\x8d\xdb\x83v\x83\x8d\x83O\x83\x89\x83\x80\x82\xcd\x89\xbd\x83o\x83C\x83g\x8d\xed\x82\xea\x82\xce\x82\xa2\x82\xa2\x82\xa9\x82\xf0\r\n
                    \x92m\x82\xe7\x82\xc8\x82\xa2\x82\xcc\x82\xc5\x8c\xb3\x82\xcc\x83f\x81[\x83^\x82\xdc\x82\xc5\x8d\xed\x82\xc1\x82\xc4\x82\xb5\x82\xdc\x82\xa4\x81A\x82\xc6\x82\xa2\x82\xa4\x82\xb1\x82\xc6 )\r\n
    \r\n
    \r\n
    * \x83o\x83C\x83i\x83\x8a\x83\x82\x81[\x83h\r\n
    \x93\x96\x83\x89\x83C\x83u\x83\x89\x83\x8a\x82\xcd\x83f\x83t\x83H\x83\x8b\x83g\x82\xc5\x95\xb6\x8e\x9a\x97\xf1\x82\xf0\x88\xb5\x82\xa4\x82\xe6\x82\xa4\x82\xc9\x82\xc8\x82\xc1\x82\xc4\x82\xa2\x82\xdc\x82\xb7\x81B\r\n
    \x83f\x81[\x83^\x82\xaa\x83o\x83C\x83i\x83\x8a\x82\xcc\x8f\xea\x8d\x87\x82\xcd\x8e\x96\x91O\x82\xc9\x83\x82\x81[\x83h\x95\xcf\x8dX\x82\xb5\x82\xc4\x82\xa8\x82\xad\x95K\x97v\x82\xaa\x82\xa0\x82\xe8\x82\xdc\x82\xb7\x81B\r\n
    ex)\r\n
    blowfish.binMode = 1;\r\n
    cipherData       = blowfish.encrypt( \x97\xaa.... );\r\n
    \r\n
    \x8f\xe3\x8bL\x82\xcc\x97l\x82\xc9\x88\xc3\x8d\x86\x81E\x95\x9c\x8d\x86\x91O\x82\xc9 blowfish.binMode \x82\xc9\x90^\x82\xc6\x82\xc8\x82\xe9\x92l\x82\xf0\x91\xe3\x93\xfc\x82\xb7\x82\xe9\x82\xb1\x82\xc6\x82\xc5\r\n
    \x83o\x83C\x83i\x83\x8a\x83\x82\x81[\x83h\x82\xc9\x82\xc8\x82\xe8\x82\xdc\x82\xb7\x81B\x95\xb6\x8e\x9a\x97\xf1\x83\x82\x81[\x83h\x82\xc9\x96\xdf\x82\xb7\x82\xc9\x82\xcd\r\n
    ex)\r\n
    blowfish.binMode    = 0;\r\n
    \r\n
    \x8bU\x82\xc9\x82\xc8\x82\xe9\x92l\x82\xf0\x91\xe3\x93\xfc\x82\xb5\x82\xdc\x82\xb7\x81B\r\n
    \r\n
    /_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */\r\n
\r\n
\r\n
\r\n
blowfish = new function()\r\n
{\r\n
    var utfLibName  = "utf";\r\n
    var def_mode    = "ecb";\r\n
    var def_padChar = "\\x05";\r\n
    var def_round   = 16;\r\n
    var blockLen    = 8;\r\n
    var keyLen      = 56;\r\n
    var keyz        = [];\r\n
    var tmpBlk      = [];\r\n
    var S           = [];\r\n
    var P           = [];\r\n
    var enc         = {};\r\n
    var dec         = {};\r\n
    var rTime       = def_round;\r\n
    var argKeyz     = ["data", "key", "mode", "iv", "round", "pchar"];\r\n
    var argDKeyz    = [argKeyz[0], argKeyz[1], argKeyz[2], argKeyz[4], argKeyz[5]];\r\n
    this.binMode    = 0;\r\n
\r\n
    this.mkIV = function(_len)\r\n
    {\r\n
        if (!_len || isNaN(_len)) _len = blockLen;\r\n
        var iv  = "";\r\n
        while (_len--) iv += String.fromCharCode( Math.floor(Math.random()* 0xff) );\r\n
        return iv;\r\n
    }\r\n
    \r\n
    this.mkKey = function(_len)\r\n
    {\r\n
        if (!_len || isNaN(_len)) _len = keyLen;\r\n
        var k = "";\r\n
        while (_len--) k += String.fromCharCode( parseInt(Math.random()* 0x50)+ 0x20 );\r\n
        return k;\r\n
    }\r\n
    \r\n
    this.encrypt = function()\r\n
    {\r\n
        var arg = initArg(arguments, "encrypt", this.binMode);\r\n
        keyUpdate(arg.keyz);\r\n
        tmpBlk  = arg.ivz;\r\n
        rTime   = checkRound(arg.round);\r\n
        var i, edat = "";\r\n
        for (i=0; i<arg.datz.length; i+=blockLen) {\r\n
            edat += packChar( enc[arg.mode](arg.datz.slice(i, i+ blockLen)) );\r\n
        }\r\n
        //return arg.iv+ edat;\r\n
        return edat;\r\n
    }\r\n
\r\n
    this.decrypt = function()\r\n
    {\r\n
        var arg = initArg(arguments, "decrypt");\r\n
        keyUpdate(arg.keyz);\r\n
        tmpBlk  = arg.ivz;\r\n
        //console.log("IV encoded:"+base64.encode(tmpBlk));\r\n
        rTime   = checkRound(arg.round);\r\n
        var i, edat = [];\r\n
        \r\n
        for (i=0; i<arg.datz.length; i+=blockLen) {\r\n
            edat = edat.concat( dec[arg.mode](arg.datz.slice(i, i+ blockLen)) );\r\n
        }\r\n
    //    return edat;\r\n
        return (this.binMode? packChar(edat): packUTF8(edat)\r\n
                ).replace( new RegExp(arg.pchar+"+$"), "");\r\n
    }\r\n
    \r\n
    dec.ecb = function(_blk) \r\n
    {\r\n
        return round(_blk);\r\n
    }\r\n
    \r\n
    enc.ecb = function(_blk) \r\n
    {\r\n
        return re_round(_blk);\r\n
    }\r\n
    \r\n
    enc.cbc = function(_blk) \r\n
    {\r\n
        return tmpBlk = round(xor(_blk, tmpBlk));\r\n
    }\r\n
    \r\n
    dec.cbc = function(_blk) \r\n
    {\r\n
        var tmp = _blk;\r\n
        _blk = xor(re_round(_blk), tmpBlk);\r\n
        tmpBlk = tmp;\r\n
        return _blk;\r\n
    }\r\n
    \r\n
    enc.cfb = function(_blk) \r\n
    {\r\n
        return tmpBlk = xor(round(tmpBlk), _blk);\r\n
    }\r\n
    \r\n
    dec.cfb = function(_blk) \r\n
    {\r\n
        var tmp = xor(round(tmpBlk), _blk);\r\n
        tmpBlk = _blk;\r\n
        return tmp;\r\n
    }\r\n
    \r\n
    enc.ofb = function(_blk) \r\n
    {\r\n
        tmpBlk = round(tmpBlk);\r\n
        return xor(tmpBlk, _blk);\r\n
    }\r\n
    \r\n
    dec.ofb = function(_blk) \r\n
    {\r\n
        tmpBlk = round(tmpBlk);\r\n
        return xor(tmpBlk, _blk);\r\n
    }\r\n
\r\n
    var initArg = function(_arg, _encrypt, _bin)\r\n
    {\r\n
        var val     = {};\r\n
        var padDatz = 1;\r\n
        var padKeyz = 0;\r\n
        var i;\r\n
        var isStr = new Function("_x", "return typeof(_x) == typeof(\'string\')");\r\n
        \r\n
        _encrypt = !!(_encrypt && _encrypt.match(/^enc/i) !== null);\r\n
        \r\n
        var aks = _encrypt? argKeyz: argDKeyz;\r\n
        if (typeof(_arg[0]) == typeof(val))\r\n
            val = _arg[0];\r\n
        else for (i=0; i<_arg.length; i++)\r\n
                val[aks[i]] = _arg[i];\r\n
        \r\n
        \r\n
        if (!isStr(val.pchar)) val.pchar = def_padChar;\r\n
        var tmpPChar = unpackChar(val.pchar);\r\n
        \r\n
        \r\n
        if (!isStr(val.mode) || val.mode.match(/^(ecb|cbc|ofb|cfb)$/i) === null)\r\n
            val.mode = def_mode;\r\n
        val.mode = val.mode.toLowerCase();\r\n
        \r\n
        \r\n
        if (!isStr(val.key)) val.key = "\\0";\r\n
        val.keyz = unpackChar(val.key);\r\n
        if (padKeyz)\r\n
            for (i=val.keyz.length; i<keyLen; i++) val.keyz[i] = 0; \r\n
        \r\n
        \r\n
        if (!_encrypt || _bin)\r\n
            val.datz = unpackChar(val.data);\r\n
        else \r\n
            val.datz = unpackUTF8(val.data);\r\n
        if (_encrypt && padDatz)\r\n
            for (i=val.datz.length%blockLen; i<blockLen; i++)\r\n
                val.datz[val.datz.length] = tmpPChar;\r\n
        \r\n
        if (val.mode == "ecb")\r\n
        {\r\n
            val.iv  = "";\r\n
            val.ivz = [];\r\n
        }\r\n
        else if (_encrypt)\r\n
        {\r\n
            if (!isStr(val.iv)) val.iv = "";\r\n
            val.ivz = unpackChar(val.iv);\r\n
            for (i=val.ivz.length; i<blockLen; i++) val.ivz[i] = 0;\r\n
            val.ivz.length = blockLen;\r\n
            val.iv = packChar(val.ivz);\r\n
        }\r\n
        else\r\n
        {\r\n
            //val.ivz  = val.datz.slice(0, blockLen);\r\n
            //val.datz = val.datz.slice(blockLen);\r\n
            /* IV is packed directly because is send explicitly    */\r\n
            val.ivz = unpackChar(val.iv);\r\n
         }\r\n
\r\n
        return val;\r\n
    }\r\n
\r\n
    var xor = function(_a, _b) \r\n
    {\r\n
        var i, tmp = [];\r\n
        for (i=0; i<_a.length; i++)\r\n
            tmp[i] = _a[i] ^ _b[i];\r\n
        return tmp;\r\n
    }\r\n
    \r\n
    var packUTF8    = function(_x){ return window[utfLibName].packUTF8(_x) };\r\n
    var unpackUTF8  = function(_x){ return window[utfLibName].unpackUTF8(_x) };\r\n
    var packChar    = function(_x){ return window[utfLibName].packChar(_x) };\r\n
    var unpackChar  = function(_x){ return window[utfLibName].unpackChar(_x) };\r\n
    \r\n
    var toBigEndian32 = function(_x) \r\n
    {\r\n
        var i, tmp = [];\r\n
        for (i=0; i<_x.length; i+=4)\r\n
            tmp[i/4] = (_x[i]<<24) | (_x[i+1]<<16) | (_x[i+2]<< 8) | _x[i+3];\r\n
        return tmp;\r\n
    }\r\n
    \r\n
    var fromBigEndian32 = function(_x) \r\n
    {\r\n
        var i, tmp = [];\r\n
        for (i=0; i<_x.length; i++) {\r\n
            tmp[i*4   ] = (_x[i]>>>24) & 0xff;\r\n
            tmp[i*4+ 1] = (_x[i]>>>16) & 0xff;\r\n
            tmp[i*4+ 2] = (_x[i]>>> 8) & 0xff;\r\n
            tmp[i*4+ 3] =  _x[i]       & 0xff;\r\n
        }\r\n
        return tmp;\r\n
    }\r\n
\r\n
    var round = function(_blk, _32)\r\n
    {\r\n
        var xl, xr;\r\n
        if (_32) {\r\n
            xl = _blk[0];\r\n
            xr = _blk[1];\r\n
        }\r\n
        else {\r\n
             xl = toBigEndian32(_blk.slice(0, 4));\r\n
             xr = toBigEndian32(_blk.slice(   4));\r\n
        }\r\n
        var i, tmp;\r\n
        for (i=0; i<rTime; i++)\r\n
        {\r\n
            xl ^= P[i];\r\n
            xr ^= f(xl);\r\n
            tmp = xl;\r\n
            xl  = xr;\r\n
            xr  = tmp;\r\n
        }\r\n
        tmp = xl;\r\n
        xl  = xr ^ P[rTime+1];\r\n
        xr  = tmp ^ P[rTime];\r\n
\r\n
        if (_32) return [xl, xr];\r\n
        else  return fromBigEndian32([xl, xr]);\r\n
    }\r\n
\r\n
    var re_round = function(_blk)\r\n
    {\r\n
        var xl = toBigEndian32(_blk.slice(0, 4));\r\n
        var xr = toBigEndian32(_blk.slice(   4));\r\n
        var i, tmp;\r\n
        for (i=rTime+1; i>1; i--)\r\n
        {\r\n
            xl ^= P[i];\r\n
            xr ^= f(xl);\r\n
            tmp = xl;\r\n
            xl  = xr;\r\n
            xr  = tmp;\r\n
        }\r\n
        tmp = xl;\r\n
        xl  = xr ^ P[0];\r\n
        xr  = tmp ^ P[1];\r\n
        return fromBigEndian32([xl, xr]);\r\n
    }\r\n
\r\n
    var f = function(_x)\r\n
    {\r\n
        return  ((S[0][(_x >>> 24) & 0xff]  + S[1][(_x >>> 16) & 0xff])\r\n
                ^ S[2][(_x >>>  8) & 0xff]) + S[3][ _x & 0xff ];\r\n
    }\r\n
\r\n
    var keyUpdate = function(_key)\r\n
    {\r\n
        var keyLen = _key.length;\r\n
        var i, j, tmp;\r\n
        var tmpD = [0, 0];\r\n
        initVal();\r\n
\r\n
        for (j=i=0; i<18 /* p.length */; i++)\r\n
        {\r\n
            for (tmp=k=0; k<4; k++, j++)\r\n
                tmp = (tmp<<8) | _key[j%keyLen];      \r\n
            P[i] ^= tmp;\r\n
        }\r\n
\r\n
        for (i=0; i<18 /* p.length */; i+=2)\r\n
        {\r\n
            tmpD    = round(tmpD, 1);\r\n
            P[i]    = tmpD[0];\r\n
            P[i+1]  = tmpD[1];\r\n
        }\r\n
        \r\n
        for (i=0; i<4 /* s.length */; i++) \r\n
            for (j=0; j<=0xff /* s[i].length */; j+=2)\r\n
        {\r\n
            tmpD        = round(tmpD, 1);\r\n
            S[i][j]     = tmpD[0];\r\n
            S[i][j+1]   = tmpD[1];\r\n
        }\r\n
    }\r\n
    \r\n
    var checkRound = function(_r)\r\n
    {\r\n
        if (!_r || isNaN(_r) || _r>16) _r = def_round;\r\n
        return _r;\r\n
    }\r\n
    \r\n
    var initVal = function()\r\n
    {\r\n
        P = [\r\n
            0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344,\r\n
            0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89,\r\n
            0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C,\r\n
            0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917,\r\n
            0x9216D5D9, 0x8979FB1B\r\n
        ];\r\n
\r\n
        S = [ \r\n
        [   0xD1310BA6, 0x98DFB5AC, 0x2FFD72DB, 0xD01ADFB7,\r\n
            0xB8E1AFED, 0x6A267E96, 0xBA7C9045, 0xF12C7F99,\r\n
            0x24A19947, 0xB3916CF7, 0x0801F2E2, 0x858EFC16,\r\n
            0x636920D8, 0x71574E69, 0xA458FEA3, 0xF4933D7E,\r\n
            0x0D95748F, 0x728EB658, 0x718BCD58, 0x82154AEE,\r\n
            0x7B54A41D, 0xC25A59B5, 0x9C30D539, 0x2AF26013,\r\n
            0xC5D1B023, 0x286085F0, 0xCA417918, 0xB8DB38EF,\r\n
            0x8E79DCB0, 0x603A180E, 0x6C9E0E8B, 0xB01E8A3E,\r\n
            0xD71577C1, 0xBD314B27, 0x78AF2FDA, 0x55605C60,\r\n
            0xE65525F3, 0xAA55AB94, 0x57489862, 0x63E81440,\r\n
            0x55CA396A, 0x2AAB10B6, 0xB4CC5C34, 0x1141E8CE,\r\n
            0xA15486AF, 0x7C72E993, 0xB3EE1411, 0x636FBC2A,\r\n
            0x2BA9C55D, 0x741831F6, 0xCE5C3E16, 0x9B87931E,\r\n
            0xAFD6BA33, 0x6C24CF5C, 0x7A325381, 0x28958677,\r\n
            0x3B8F4898, 0x6B4BB9AF, 0xC4BFE81B, 0x66282193,\r\n
            0x61D809CC, 0xFB21A991, 0x487CAC60, 0x5DEC8032,\r\n
            0xEF845D5D, 0xE98575B1, 0xDC262302, 0xEB651B88,\r\n
            0x23893E81, 0xD396ACC5, 0x0F6D6FF3, 0x83F44239,\r\n
            0x2E0B4482, 0xA4842004, 0x69C8F04A, 0x9E1F9B5E,\r\n
            0x21C66842, 0xF6E96C9A, 0x670C9C61, 0xABD388F0,\r\n
            0x6A51A0D2, 0xD8542F68, 0x960FA728, 0xAB5133A3,\r\n
            0x6EEF0B6C, 0x137A3BE4, 0xBA3BF050, 0x7EFB2A98,\r\n
            0xA1F1651D, 0x39AF0176, 0x66CA593E, 0x82430E88,\r\n
            0x8CEE8619, 0x456F9FB4, 0x7D84A5C3, 0x3B8B5EBE,\r\n
            0xE06F75D8, 0x85C12073, 0x401A449F, 0x56C16AA6,\r\n
            0x4ED3AA62, 0x363F7706, 0x1BFEDF72, 0x429B023D,\r\n
            0x37D0D724, 0xD00A1248, 0xDB0FEAD3, 0x49F1C09B,\r\n
            0x075372C9, 0x80991B7B, 0x25D479D8, 0xF6E8DEF7,\r\n
            0xE3FE501A, 0xB6794C3B, 0x976CE0BD, 0x04C006BA,\r\n
            0xC1A94FB6, 0x409F60C4, 0x5E5C9EC2, 0x196A2463,\r\n
            0x68FB6FAF, 0x3E6C53B5, 0x1339B2EB, 0x3B52EC6F,\r\n
            0x6DFC511F, 0x9B30952C, 0xCC814544, 0xAF5EBD09,\r\n
            0xBEE3D004, 0xDE334AFD, 0x660F2807, 0x192E4BB3,\r\n
            0xC0CBA857, 0x45C8740F, 0xD20B5F39, 0xB9D3FBDB,\r\n
            0x5579C0BD, 0x1A60320A, 0xD6A100C6, 0x402C7279,\r\n
            0x679F25FE, 0xFB1FA3CC, 0x8EA5E9F8, 0xDB3222F8,\r\n
            0x3C7516DF, 0xFD616B15, 0x2F501EC8, 0xAD0552AB,\r\n
            0x323DB5FA, 0xFD238760, 0x53317B48, 0x3E00DF82,\r\n
            0x9E5C57BB, 0xCA6F8CA0, 0x1A87562E, 0xDF1769DB,\r\n
            0xD542A8F6, 0x287EFFC3, 0xAC6732C6, 0x8C4F5573,\r\n
            0x695B27B0, 0xBBCA58C8, 0xE1FFA35D, 0xB8F011A0,\r\n
            0x10FA3D98, 0xFD2183B8, 0x4AFCB56C, 0x2DD1D35B,\r\n
            0x9A53E479, 0xB6F84565, 0xD28E49BC, 0x4BFB9790,\r\n
            0xE1DDF2DA, 0xA4CB7E33, 0x62FB1341, 0xCEE4C6E8,\r\n
            0xEF20CADA, 0x36774C01, 0xD07E9EFE, 0x2BF11FB4,\r\n
            0x95DBDA4D, 0xAE909198, 0xEAAD8E71, 0x6B93D5A0,\r\n
            0xD08ED1D0, 0xAFC725E0, 0x8E3C5B2F, 0x8E7594B7,\r\n
            0x8FF6E2FB, 0xF2122B64, 0x8888B812, 0x900DF01C,\r\n
            0x4FAD5EA0, 0x688FC31C, 0xD1CFF191, 0xB3A8C1AD,\r\n
            0x2F2F2218, 0xBE0E1777, 0xEA752DFE, 0x8B021FA1,\r\n
            0xE5A0CC0F, 0xB56F74E8, 0x18ACF3D6, 0xCE89E299,\r\n
            0xB4A84FE0, 0xFD13E0B7, 0x7CC43B81, 0xD2ADA8D9,\r\n
            0x165FA266, 0x80957705, 0x93CC7314, 0x211A1477,\r\n
            0xE6AD2065, 0x77B5FA86, 0xC75442F5, 0xFB9D35CF,\r\n
            0xEBCDAF0C, 0x7B3E89A0, 0xD6411BD3, 0xAE1E7E49,\r\n
            0x00250E2D, 0x2071B35E, 0x226800BB, 0x57B8E0AF,\r\n
            0x2464369B, 0xF009B91E, 0x5563911D, 0x59DFA6AA,\r\n
            0x78C14389, 0xD95A537F, 0x207D5BA2, 0x02E5B9C5,\r\n
            0x83260376, 0x6295CFA9, 0x11C81968, 0x4E734A41,\r\n
            0xB3472DCA, 0x7B14A94A, 0x1B510052, 0x9A532915,\r\n
            0xD60F573F, 0xBC9BC6E4, 0x2B60A476, 0x81E67400,\r\n
            0x08BA6FB5, 0x571BE91F, 0xF296EC6B, 0x2A0DD915,\r\n
            0xB6636521, 0xE7B9F9B6, 0xFF34052E, 0xC5855664,\r\n
            0x53B02D5D, 0xA99F8FA1, 0x08BA4799, 0x6E85076A   ],\r\n
        [   0x4B7A70E9, 0xB5B32944, 0xDB75092E, 0xC4192623,\r\n
            0xAD6EA6B0, 0x49A7DF7D, 0x9CEE60B8, 0x8FEDB266,\r\n
            0xECAA8C71, 0x699A17FF, 0x5664526C, 0xC2B19EE1,\r\n
            0x193602A5, 0x75094C29, 0xA0591340, 0xE4183A3E,\r\n
            0x3F54989A, 0x5B429D65, 0x6B8FE4D6, 0x99F73FD6,\r\n
            0xA1D29C07, 0xEFE830F5, 0x4D2D38E6, 0xF0255DC1,\r\n
            0x4CDD2086, 0x8470EB26, 0x6382E9C6, 0x021ECC5E,\r\n
            0x09686B3F, 0x3EBAEFC9, 0x3C971814, 0x6B6A70A1,\r\n
            0x687F3584, 0x52A0E286, 0xB79C5305, 0xAA500737,\r\n
            0x3E07841C, 0x7FDEAE5C, 0x8E7D44EC, 0x5716F2B8,\r\n
            0xB03ADA37, 0xF0500C0D, 0xF01C1F04, 0x0200B3FF,\r\n
            0xAE0CF51A, 0x3CB574B2, 0x25837A58, 0xDC0921BD,\r\n
            0xD19113F9, 0x7CA92FF6, 0x94324773, 0x22F54701,\r\n
            0x3AE5E581, 0x37C2DADC, 0xC8B57634, 0x9AF3DDA7,\r\n
            0xA9446146, 0x0FD0030E, 0xECC8C73E, 0xA4751E41,\r\n
            0xE238CD99, 0x3BEA0E2F, 0x3280BBA1, 0x183EB331,\r\n
            0x4E548B38, 0x4F6DB908, 0x6F420D03, 0xF60A04BF,\r\n
            0x2CB81290, 0x24977C79, 0x5679B072, 0xBCAF89AF,\r\n
            0xDE9A771F, 0xD9930810, 0xB38BAE12, 0xDCCF3F2E,\r\n
            0x5512721F, 0x2E6B7124, 0x501ADDE6, 0x9F84CD87,\r\n
            0x7A584718, 0x7408DA17, 0xBC9F9ABC, 0xE94B7D8C,\r\n
            0xEC7AEC3A, 0xDB851DFA, 0x63094366, 0xC464C3D2,\r\n
            0xEF1C1847, 0x3215D908, 0xDD433B37, 0x24C2BA16,\r\n
            0x12A14D43, 0x2A65C451, 0x50940002, 0x133AE4DD,\r\n
            0x71DFF89E, 0x10314E55, 0x81AC77D6, 0x5F11199B,\r\n
            0x043556F1, 0xD7A3C76B, 0x3C11183B, 0x5924A509,\r\n
            0xF28FE6ED, 0x97F1FBFA, 0x9EBABF2C, 0x1E153C6E,\r\n
            0x86E34570, 0xEAE96FB1, 0x860E5E0A, 0x5A3E2AB3,\r\n
            0x771FE71C, 0x4E3D06FA, 0x2965DCB9, 0x99E71D0F,\r\n
            0x803E89D6, 0x5266C825, 0x2E4CC978, 0x9C10B36A,\r\n
            0xC6150EBA, 0x94E2EA78, 0xA5FC3C53, 0x1E0A2DF4,\r\n
            0xF2F74EA7, 0x361D2B3D, 0x1939260F, 0x19C27960,\r\n
            0x5223A708, 0xF71312B6, 0xEBADFE6E, 0xEAC31F66,\r\n
            0xE3BC4595, 0xA67BC883, 0xB17F37D1, 0x018CFF28,\r\n
            0xC332DDEF, 0xBE6C5AA5, 0x65582185, 0x68AB9802,\r\n
            0xEECEA50F, 0xDB2F953B, 0x2AEF7DAD, 0x5B6E2F84,\r\n
            0x1521B628, 0x29076170, 0xECDD4775, 0x619F1510,\r\n
            0x13CCA830, 0xEB61BD96, 0x0334FE1E, 0xAA0363CF,\r\n
            0xB5735C90, 0x4C70A239, 0xD59E9E0B, 0xCBAADE14,\r\n
            0xEECC86BC, 0x60622CA7, 0x9CAB5CAB, 0xB2F3846E,\r\n
            0x648B1EAF, 0x19BDF0CA, 0xA02369B9, 0x655ABB50,\r\n
            0x40685A32, 0x3C2AB4B3, 0x319EE9D5, 0xC021B8F7,\r\n
            0x9B540B19, 0x875FA099, 0x95F7997E, 0x623D7DA8,\r\n
            0xF837889A, 0x97E32D77, 0x11ED935F, 0x16681281,\r\n
            0x0E358829, 0xC7E61FD6, 0x96DEDFA1, 0x7858BA99,\r\n
            0x57F584A5, 0x1B227263, 0x9B83C3FF, 0x1AC24696,\r\n
            0xCDB30AEB, 0x532E3054, 0x8FD948E4, 0x6DBC3128,\r\n
            0x58EBF2EF, 0x34C6FFEA, 0xFE28ED61, 0xEE7C3C73,\r\n
            0x5D4A14D9, 0xE864B7E3, 0x42105D14, 0x203E13E0,\r\n
            0x45EEE2B6, 0xA3AAABEA, 0xDB6C4F15, 0xFACB4FD0,\r\n
            0xC742F442, 0xEF6ABBB5, 0x654F3B1D, 0x41CD2105,\r\n
            0xD81E799E, 0x86854DC7, 0xE44B476A, 0x3D816250,\r\n
            0xCF62A1F2, 0x5B8D2646, 0xFC8883A0, 0xC1C7B6A3,\r\n
            0x7F1524C3, 0x69CB7492, 0x47848A0B, 0x5692B285,\r\n
            0x095BBF00, 0xAD19489D, 0x1462B174, 0x23820E00,\r\n
            0x58428D2A, 0x0C55F5EA, 0x1DADF43E, 0x233F7061,\r\n
            0x3372F092, 0x8D937E41, 0xD65FECF1, 0x6C223BDB,\r\n
            0x7CDE3759, 0xCBEE7460, 0x4085F2A7, 0xCE77326E,\r\n
            0xA6078084, 0x19F8509E, 0xE8EFD855, 0x61D99735,\r\n
            0xA969A7AA, 0xC50C06C2, 0x5A04ABFC, 0x800BCADC,\r\n
            0x9E447A2E, 0xC3453484, 0xFDD56705, 0x0E1E9EC9,\r\n
            0xDB73DBD3, 0x105588CD, 0x675FDA79, 0xE3674340,\r\n
            0xC5C43465, 0x713E38D8, 0x3D28F89E, 0xF16DFF20,\r\n
            0x153E21E7, 0x8FB03D4A, 0xE6E39F2B, 0xDB83ADF7   ],\r\n
        [   0xE93D5A68, 0x948140F7, 0xF64C261C, 0x94692934,\r\n
            0x411520F7, 0x7602D4F7, 0xBCF46B2E, 0xD4A20068,\r\n
            0xD4082471, 0x3320F46A, 0x43B7D4B7, 0x500061AF,\r\n
            0x1E39F62E, 0x97244546, 0x14214F74, 0xBF8B8840,\r\n
            0x4D95FC1D, 0x96B591AF, 0x70F4DDD3, 0x66A02F45,\r\n
            0xBFBC09EC, 0x03BD9785, 0x7FAC6DD0, 0x31CB8504,\r\n
            0x96EB27B3, 0x55FD3941, 0xDA2547E6, 0xABCA0A9A,\r\n
            0x28507825, 0x530429F4, 0x0A2C86DA, 0xE9B66DFB,\r\n
            0x68DC1462, 0xD7486900, 0x680EC0A4, 0x27A18DEE,\r\n
            0x4F3FFEA2, 0xE887AD8C, 0xB58CE006, 0x7AF4D6B6,\r\n
            0xAACE1E7C, 0xD3375FEC, 0xCE78A399, 0x406B2A42,\r\n
            0x20FE9E35, 0xD9F385B9, 0xEE39D7AB, 0x3B124E8B,\r\n
            0x1DC9FAF7, 0x4B6D1856, 0x26A36631, 0xEAE397B2,\r\n
            0x3A6EFA74, 0xDD5B4332, 0x6841E7F7, 0xCA7820FB,\r\n
            0xFB0AF54E, 0xD8FEB397, 0x454056AC, 0xBA489527,\r\n
            0x55533A3A, 0x20838D87, 0xFE6BA9B7, 0xD096954B,\r\n
            0x55A867BC, 0xA1159A58, 0xCCA92963, 0x99E1DB33,\r\n
            0xA62A4A56, 0x3F3125F9, 0x5EF47E1C, 0x9029317C,\r\n
            0xFDF8E802, 0x04272F70, 0x80BB155C, 0x05282CE3,\r\n
            0x95C11548, 0xE4C66D22, 0x48C1133F, 0xC70F86DC,\r\n
            0x07F9C9EE, 0x41041F0F, 0x404779A4, 0x5D886E17,\r\n
            0x325F51EB, 0xD59BC0D1, 0xF2BCC18F, 0x41113564,\r\n
            0x257B7834, 0x602A9C60, 0xDFF8E8A3, 0x1F636C1B,\r\n
            0x0E12B4C2, 0x02E1329E, 0xAF664FD1, 0xCAD18115,\r\n
            0x6B2395E0, 0x333E92E1, 0x3B240B62, 0xEEBEB922,\r\n
            0x85B2A20E, 0xE6BA0D99, 0xDE720C8C, 0x2DA2F728,\r\n
            0xD0127845, 0x95B794FD, 0x647D0862, 0xE7CCF5F0,\r\n
            0x5449A36F, 0x877D48FA, 0xC39DFD27, 0xF33E8D1E,\r\n
            0x0A476341, 0x992EFF74, 0x3A6F6EAB, 0xF4F8FD37,\r\n
            0xA812DC60, 0xA1EBDDF8, 0x991BE14C, 0xDB6E6B0D,\r\n
            0xC67B5510, 0x6D672C37, 0x2765D43B, 0xDCD0E804,\r\n
            0xF1290DC7, 0xCC00FFA3, 0xB5390F92, 0x690FED0B,\r\n
            0x667B9FFB, 0xCEDB7D9C, 0xA091CF0B, 0xD9155EA3,\r\n
            0xBB132F88, 0x515BAD24, 0x7B9479BF, 0x763BD6EB,\r\n
            0x37392EB3, 0xCC115979, 0x8026E297, 0xF42E312D,\r\n
            0x6842ADA7, 0xC66A2B3B, 0x12754CCC, 0x782EF11C,\r\n
            0x6A124237, 0xB79251E7, 0x06A1BBE6, 0x4BFB6350,\r\n
            0x1A6B1018, 0x11CAEDFA, 0x3D25BDD8, 0xE2E1C3C9,\r\n
            0x44421659, 0x0A121386, 0xD90CEC6E, 0xD5ABEA2A,\r\n
            0x64AF674E, 0xDA86A85F, 0xBEBFE988, 0x64E4C3FE,\r\n
            0x9DBC8057, 0xF0F7C086, 0x60787BF8, 0x6003604D,\r\n
            0xD1FD8346, 0xF6381FB0, 0x7745AE04, 0xD736FCCC,\r\n
            0x83426B33, 0xF01EAB71, 0xB0804187, 0x3C005E5F,\r\n
            0x77A057BE, 0xBDE8AE24, 0x55464299, 0xBF582E61,\r\n
            0x4E58F48F, 0xF2DDFDA2, 0xF474EF38, 0x8789BDC2,\r\n
            0x5366F9C3, 0xC8B38E74, 0xB475F255, 0x46FCD9B9,\r\n
            0x7AEB2661, 0x8B1DDF84, 0x846A0E79, 0x915F95E2,\r\n
            0x466E598E, 0x20B45770, 0x8CD55591, 0xC902DE4C,\r\n
            0xB90BACE1, 0xBB8205D0, 0x11A86248, 0x7574A99E,\r\n
            0xB77F19B6, 0xE0A9DC09, 0x662D09A1, 0xC4324633,\r\n
            0xE85A1F02, 0x09F0BE8C, 0x4A99A025, 0x1D6EFE10,\r\n
            0x1AB93D1D, 0x0BA5A4DF, 0xA186F20F, 0x2868F169,\r\n
            0xDCB7DA83, 0x573906FE, 0xA1E2CE9B, 0x4FCD7F52,\r\n
            0x50115E01, 0xA70683FA, 0xA002B5C4, 0x0DE6D027,\r\n
            0x9AF88C27, 0x773F8641, 0xC3604C06, 0x61A806B5,\r\n
            0xF0177A28, 0xC0F586E0, 0x006058AA, 0x30DC7D62,\r\n
            0x11E69ED7, 0x2338EA63, 0x53C2DD94, 0xC2C21634,\r\n
            0xBBCBEE56, 0x90BCB6DE, 0xEBFC7DA1, 0xCE591D76,\r\n
            0x6F05E409, 0x4B7C0188, 0x39720A3D, 0x7C927C24,\r\n
            0x86E3725F, 0x724D9DB9, 0x1AC15BB4, 0xD39EB8FC,\r\n
            0xED545578, 0x08FCA5B5, 0xD83D7CD3, 0x4DAD0FC4,\r\n
            0x1E50EF5E, 0xB161E6F8, 0xA28514D9, 0x6C51133C,\r\n
            0x6FD5C7E7, 0x56E14EC4, 0x362ABFCE, 0xDDC6C837,\r\n
            0xD79A3234, 0x92638212, 0x670EFA8E, 0x406000E0  ],\r\n
        [   0x3A39CE37, 0xD3FAF5CF, 0xABC27737, 0x5AC52D1B,\r\n
            0x5CB0679E, 0x4FA33742, 0xD3822740, 0x99BC9BBE,\r\n
            0xD5118E9D, 0xBF0F7315, 0xD62D1C7E, 0xC700C47B,\r\n
            0xB78C1B6B, 0x21A19045, 0xB26EB1BE, 0x6A366EB4,\r\n
            0x5748AB2F, 0xBC946E79, 0xC6A376D2, 0x6549C2C8,\r\n
            0x530FF8EE, 0x468DDE7D, 0xD5730A1D, 0x4CD04DC6,\r\n
            0x2939BBDB, 0xA9BA4650, 0xAC9526E8, 0xBE5EE304,\r\n
            0xA1FAD5F0, 0x6A2D519A, 0x63EF8CE2, 0x9A86EE22,\r\n
            0xC089C2B8, 0x43242EF6, 0xA51E03AA, 0x9CF2D0A4,\r\n
            0x83C061BA, 0x9BE96A4D, 0x8FE51550, 0xBA645BD6,\r\n
            0x2826A2F9, 0xA73A3AE1, 0x4BA99586, 0xEF5562E9,\r\n
            0xC72FEFD3, 0xF752F7DA, 0x3F046F69, 0x77FA0A59,\r\n
            0x80E4A915, 0x87B08601, 0x9B09E6AD, 0x3B3EE593,\r\n
            0xE990FD5A, 0x9E34D797, 0x2CF0B7D9, 0x022B8B51,\r\n
            0x96D5AC3A, 0x017DA67D, 0xD1CF3ED6, 0x7C7D2D28,\r\n
            0x1F9F25CF, 0xADF2B89B, 0x5AD6B472, 0x5A88F54C,\r\n
            0xE029AC71, 0xE019A5E6, 0x47B0ACFD, 0xED93FA9B,\r\n
            0xE8D3C48D, 0x283B57CC, 0xF8D56629, 0x79132E28,\r\n
            0x785F0191, 0xED756055, 0xF7960E44, 0xE3D35E8C,\r\n
            0x15056DD4, 0x88F46DBA, 0x03A16125, 0x0564F0BD,\r\n
            0xC3EB9E15, 0x3C9057A2, 0x97271AEC, 0xA93A072A,\r\n
            0x1B3F6D9B, 0x1E6321F5, 0xF59C66FB, 0x26DCF319,\r\n
            0x7533D928, 0xB155FDF5, 0x03563482, 0x8ABA3CBB,\r\n
            0x28517711, 0xC20AD9F8, 0xABCC5167, 0xCCAD925F,\r\n
            0x4DE81751, 0x3830DC8E, 0x379D5862, 0x9320F991,\r\n
            0xEA7A90C2, 0xFB3E7BCE, 0x5121CE64, 0x774FBE32,\r\n
            0xA8B6E37E, 0xC3293D46, 0x48DE5369, 0x6413E680,\r\n
            0xA2AE0810, 0xDD6DB224, 0x69852DFD, 0x09072166,\r\n
            0xB39A460A, 0x6445C0DD, 0x586CDECF, 0x1C20C8AE,\r\n
            0x5BBEF7DD, 0x1B588D40, 0xCCD2017F, 0x6BB4E3BB,\r\n
            0xDDA26A7E, 0x3A59FF45, 0x3E350A44, 0xBCB4CDD5,\r\n
            0x72EACEA8, 0xFA6484BB, 0x8D6612AE, 0xBF3C6F47,\r\n
            0xD29BE463, 0x542F5D9E, 0xAEC2771B, 0xF64E6370,\r\n
            0x740E0D8D, 0xE75B1357, 0xF8721671, 0xAF537D5D,\r\n
            0x4040CB08, 0x4EB4E2CC, 0x34D2466A, 0x0115AF84,\r\n
            0xE1B00428, 0x95983A1D, 0x06B89FB4, 0xCE6EA048,\r\n
            0x6F3F3B82, 0x3520AB82, 0x011A1D4B, 0x277227F8,\r\n
            0x611560B1, 0xE7933FDC, 0xBB3A792B, 0x344525BD,\r\n
            0xA08839E1, 0x51CE794B, 0x2F32C9B7, 0xA01FBAC9,\r\n
            0xE01CC87E, 0xBCC7D1F6, 0xCF0111C3, 0xA1E8AAC7,\r\n
            0x1A908749, 0xD44FBD9A, 0xD0DADECB, 0xD50ADA38,\r\n
            0x0339C32A, 0xC6913667, 0x8DF9317C, 0xE0B12B4F,\r\n
            0xF79E59B7, 0x43F5BB3A, 0xF2D519FF, 0x27D9459C,\r\n
            0xBF97222C, 0x15E6FC2A, 0x0F91FC71, 0x9B941525,\r\n
            0xFAE59361, 0xCEB69CEB, 0xC2A86459, 0x12BAA8D1,\r\n
            0xB6C1075E, 0xE3056A0C, 0x10D25065, 0xCB03A442,\r\n
            0xE0EC6E0E, 0x1698DB3B, 0x4C98A0BE, 0x3278E964,\r\n
            0x9F1F9532, 0xE0D392DF, 0xD3A0342B, 0x8971F21E,\r\n
            0x1B0A7441, 0x4BA3348C, 0xC5BE7120, 0xC37632D8,\r\n
            0xDF359F8D, 0x9B992F2E, 0xE60B6F47, 0x0FE3F11D,\r\n
            0xE54CDA54, 0x1EDAD891, 0xCE6279CF, 0xCD3E7E6F,\r\n
            0x1618B166, 0xFD2C1D05, 0x848FD2C5, 0xF6FB2299,\r\n
            0xF523F357, 0xA6327623, 0x93A83531, 0x56CCCD02,\r\n
            0xACF08162, 0x5A75EBB5, 0x6E163697, 0x88D273CC,\r\n
            0xDE966292, 0x81B949D0, 0x4C50901B, 0x71C65614,\r\n
            0xE6C6C7BD, 0x327A140A, 0x45E1D006, 0xC3F27B9A,\r\n
            0xC9AA53FD, 0x62A80F00, 0xBB25BFE2, 0x35BDD2F6,\r\n
            0x71126905, 0xB2040222, 0xB6CBCF7C, 0xCD769C2B,\r\n
            0x53113EC0, 0x1640E3D3, 0x38ABBD60, 0x2547ADF0,\r\n
            0xBA38209C, 0xF746CE76, 0x77AFA1C5, 0x20756060,\r\n
            0x85CBFE4E, 0x8AE88DD8, 0x7AAAF9B0, 0x4CF9AA7E,\r\n
            0x1948C25C, 0x02FB8A8C, 0x01C36AE4, 0xD6EBE1F9,\r\n
            0x90D4F869, 0xA65CDEA0, 0x3F09252D, 0xC208E69F,\r\n
            0xB74E6132, 0xCE77E25B, 0x578FDFE3, 0x3AC372E6  ]\r\n
        ];\r\n
    }\r\n
}\r\n
\r\n
\r\n
    /* /_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/\r\n
    charset = shift_jis\r\n
\r\n
    +++ UTF8/16 \x83\x89\x83C\x83u\x83\x89\x83\x8a +++\r\n
\r\n
\r\n
    LastModified : 2006-10/15\r\n
    \r\n
    Powered by kerry\r\n
    http://202.248.69.143/~goma/\r\n
    \r\n
    \x93\xae\x8d\xec\x83u\x83\x89\x83E\x83U :: IE4+ , NN4.06+ , Gecko , Opera6+\r\n
\r\n
\r\n
\r\n
    * [RFC 2279] UTF-8, a transformation format of ISO 10646\r\n
    ftp://ftp.isi.edu/in-notes/rfc2279.txt\r\n
    \r\n
    * [RFC 1738] Uniform Resource Locators (URL)\r\n
    ftp://ftp.isi.edu/in-notes/rfc1738.txt\r\n
\r\n
    /_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/\r\n
    \r\n
    Usage:\r\n
    \r\n
    // \x95\xb6\x8e\x9a\x97\xf1\x82\xf0 UTF16 (\x95\xb6\x8e\x9a\x83R\x81[\x83h) \x82\xd6\r\n
    utf16code_array = utf.unpackUTF16( my_string );\r\n
\r\n
    // \x95\xb6\x8e\x9a\x97\xf1\x82\xf0 UTF8 (\x95\xb6\x8e\x9a\x83R\x81[\x83h) \x82\xd6\r\n
    utf8code_array = utf.unpackUTF8( my_string );\r\n
    \r\n
    // UTF8 (\x95\xb6\x8e\x9a\x83R\x81[\x83h) \x82\xa9\x82\xe7\x95\xb6\x8e\x9a\x97\xf1\x82\xd6\x81B utf.unpackUTF8() \x82\xb5\x82\xbd\x82\xe0\x82\xcc\x82\xf0\x8c\xb3\x82\xc9\x96\xdf\x82\xb7\r\n
    my_string = utf.packUTF8( utf8code_array );\r\n
\r\n
    // UTF8/16 (\x95\xb6\x8e\x9a\x83R\x81[\x83h) \x82\xf0\x95\xb6\x8e\x9a\x97\xf1\x82\xd6\r\n
    my_string = utf.packChar( utfCode_array );\r\n
    \r\n
    // UTF16 (\x95\xb6\x8e\x9a\x83R\x81[\x83h) \x82\xa9\x82\xe7 UTF8 (\x95\xb6\x8e\x9a\x83R\x81[\x83h) \x82\xd6\r\n
    utf8code_array = utf.toUTF8( utf16code_array );\r\n
    \r\n
    // UTF8 (\x95\xb6\x8e\x9a\x83R\x81[\x83h) \x82\xa9\x82\xe7 UTF16 (\x95\xb6\x8e\x9a\x83R\x81[\x83h) \x82\xd6\r\n
    utf16code_array = utf.toUTF16( utf8code_array );\r\n
\r\n
\r\n
\r\n
    // URL \x95\xb6\x8e\x9a\x97\xf1\x82\xd6\x83G\x83\x93\x83R\x81[\x83h\r\n
    url_string = utf.URLencode( my_string );\r\n
\r\n
    // URL \x95\xb6\x8e\x9a\x97\xf1\x82\xa9\x82\xe7\x83f\x83R\x81[\x83h\r\n
    my_string = utf.URLdecode( url_string );\r\n
\r\n
    /_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */\r\n
\r\n
\r\n
\r\n
utf = new function()\r\n
{\r\n
    this.unpackUTF16 = function(_str)\r\n
    {\r\n
        var i, utf16=[];\r\n
        for (i=0; i<_str.length; i++) utf16[i] = _str.charCodeAt(i);\r\n
        return utf16;\r\n
    }\r\n
    \r\n
    this.unpackChar = function(_str) \r\n
    {\r\n
        var utf16 = this.unpackUTF16(_str);\r\n
        var i,n, tmp = [];\r\n
        for (n=i=0; i<utf16.length; i++) {\r\n
            if (utf16[i]<=0xff) tmp[n++] = utf16[i];\r\n
            else {\r\n
                tmp[n++] = utf16[i] >>> 8;\r\n
                tmp[n++] = utf16[i] &  0xff;\r\n
            }   \r\n
        }\r\n
        return tmp;\r\n
    }\r\n
    \r\n
    this.packChar  =\r\n
    this.packUTF16 = function(_utf16)\r\n
    {\r\n
        var i, str = "";\r\n
        for (i in _utf16) str += String.fromCharCode(_utf16[i]);\r\n
        return str;\r\n
    }\r\n
\r\n
    this.unpackUTF8 = function(_str)\r\n
    {\r\n
       return this.toUTF8( this.unpackUTF16(_str) );\r\n
    }\r\n
\r\n
    this.packUTF8 = function(_utf8)\r\n
    {\r\n
        return this.packUTF16( this.toUTF16(_utf8) );\r\n
    }\r\n
    \r\n
    this.toUTF8 = function(_utf16)\r\n
    {\r\n
        var utf8 = [];\r\n
        var idx = 0;\r\n
        var i, j, c;\r\n
        for (i=0; i<_utf16.length; i++)\r\n
        {\r\n
            c = _utf16[i];\r\n
            if (c <= 0x7f) utf8[idx++] = c;\r\n
            else if (c <= 0x7ff)\r\n
            {\r\n
                utf8[idx++] = 0xc0 | (c >>> 6 );\r\n
                utf8[idx++] = 0x80 | (c & 0x3f);\r\n
            }\r\n
            else if (c <= 0xffff)\r\n
            {\r\n
                utf8[idx++] = 0xe0 | (c >>> 12 );\r\n
                utf8[idx++] = 0x80 | ((c >>> 6 ) & 0x3f);\r\n
                utf8[idx++] = 0x80 | (c & 0x3f);\r\n
            }\r\n
            else\r\n
            {\r\n
                j = 4;\r\n
                while (c >> (6*j)) j++;\r\n
                utf8[idx++] = ((0xff00 >>> j) & 0xff) | (c >>> (6*--j) );\r\n
                while (j--) \r\n
                utf8[idx++] = 0x80 | ((c >>> (6*j)) & 0x3f);\r\n
            }\r\n
        }\r\n
        return utf8;\r\n
    }\r\n
    \r\n
    this.toUTF16 = function(_utf8)\r\n
    {\r\n
        var utf16 = [];\r\n
        var idx = 0;\r\n
        var i,s;\r\n
        for (i=0; i<_utf8.length; i++, idx++)\r\n
        {\r\n
            if (_utf8[i] <= 0x7f) utf16[idx] = _utf8[i];\r\n
            else \r\n
            {\r\n
                if ( (_utf8[i]>>5) == 0x6)\r\n
                {\r\n
                    utf16[idx] = ( (_utf8[i] & 0x1f) << 6 )\r\n
                                 | ( _utf8[++i] & 0x3f );\r\n
                }\r\n
                else if ( (_utf8[i]>>4) == 0xe)\r\n
                {\r\n
                    utf16[idx] = ( (_utf8[i] & 0xf) << 12 )\r\n
                                 | ( (_utf8[++i] & 0x3f) << 6 )\r\n
                                 | ( _utf8[++i] & 0x3f );\r\n
                }\r\n
                else\r\n
                {\r\n
                    s = 1;\r\n
                    while (_utf8[i] & (0x20 >>> s) ) s++;\r\n
                    utf16[idx] = _utf8[i] & (0x1f >>> s);\r\n
                    while (s-->=0) utf16[idx] = (utf16[idx] << 6) ^ (_utf8[++i] & 0x3f);\r\n
                }\r\n
            }\r\n
        }\r\n
        return utf16;\r\n
    }\r\n
    \r\n
    this.URLencode = function(_str)\r\n
    {\r\n
        return _str.replace(/([^a-zA-Z_\\-\\.])/g, function(_tmp, _c)\r\n
            { \r\n
                if (_c == "\\x20") return "+";\r\n
                var tmp = utf.toUTF8( [_c.charCodeAt(0)] );\r\n
                var c = "";\r\n
                for (var i in tmp)\r\n
                {\r\n
                    i = tmp[i].toString(16);\r\n
                    if (i.length == 1) i = "0"+ i;\r\n
                    c += "%"+ i;\r\n
                }\r\n
                return c;\r\n
            } );\r\n
    }\r\n
\r\n
    this.URLdecode = function(_dat)\r\n
    {\r\n
        _dat = _dat.replace(/\\+/g, "\\x20");\r\n
        _dat = _dat.replace( /%([a-fA-F0-9][a-fA-F0-9])/g, \r\n
                function(_tmp, _hex){ return String.fromCharCode( parseInt(_hex, 16) ) } );\r\n
        return this.packChar( this.toUTF16( this.unpackUTF16(_dat) ) );\r\n
    }\r\n
}\r\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>32702</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>blowfish.js</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

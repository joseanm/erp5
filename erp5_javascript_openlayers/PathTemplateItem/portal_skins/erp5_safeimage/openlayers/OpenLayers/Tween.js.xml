<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.77</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Tween.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/BaseTypes/Class.js\n
 * @requires OpenLayers/Animation.js\n
 */\n
\n
/**\n
 * Namespace: OpenLayers.Tween\n
 */\n
OpenLayers.Tween = OpenLayers.Class({\n
    \n
    /**\n
     * APIProperty: easing\n
     * {<OpenLayers.Easing>(Function)} Easing equation used for the animation\n
     *     Defaultly set to OpenLayers.Easing.Expo.easeOut\n
     */\n
    easing: null,\n
    \n
    /**\n
     * APIProperty: begin\n
     * {Object} Values to start the animation with\n
     */\n
    begin: null,\n
    \n
    /**\n
     * APIProperty: finish\n
     * {Object} Values to finish the animation with\n
     */\n
    finish: null,\n
    \n
    /**\n
     * APIProperty: duration\n
     * {int} duration of the tween (number of steps)\n
     */\n
    duration: null,\n
    \n
    /**\n
     * APIProperty: callbacks\n
     * {Object} An object with start, eachStep and done properties whose values\n
     *     are functions to be call during the animation. They are passed the\n
     *     current computed value as argument.\n
     */\n
    callbacks: null,\n
    \n
    /**\n
     * Property: time\n
     * {int} Step counter\n
     */\n
    time: null,\n
    \n
    /**\n
     * Property: animationId\n
     * {int} Loop id returned by OpenLayers.Animation.start\n
     */\n
    animationId: null,\n
    \n
    /**\n
     * Property: playing\n
     * {Boolean} Tells if the easing is currently playing\n
     */\n
    playing: false,\n
    \n
    /** \n
     * Constructor: OpenLayers.Tween\n
     * Creates a Tween.\n
     *\n
     * Parameters:\n
     * easing - {<OpenLayers.Easing>(Function)} easing function method to use\n
     */ \n
    initialize: function(easing) {\n
        this.easing = (easing) ? easing : OpenLayers.Easing.Expo.easeOut;\n
    },\n
    \n
    /**\n
     * APIMethod: start\n
     * Plays the Tween, and calls the callback method on each step\n
     * \n
     * Parameters:\n
     * begin - {Object} values to start the animation with\n
     * finish - {Object} values to finish the animation with\n
     * duration - {int} duration of the tween (number of steps)\n
     * options - {Object} hash of options (for example callbacks (start, eachStep, done))\n
     */\n
    start: function(begin, finish, duration, options) {\n
        this.playing = true;\n
        this.begin = begin;\n
        this.finish = finish;\n
        this.duration = duration;\n
        this.callbacks = options.callbacks;\n
        this.time = 0;\n
        OpenLayers.Animation.stop(this.animationId);\n
        this.animationId = null;\n
        if (this.callbacks && this.callbacks.start) {\n
            this.callbacks.start.call(this, this.begin);\n
        }\n
        this.animationId = OpenLayers.Animation.start(\n
            OpenLayers.Function.bind(this.play, this)\n
        );\n
    },\n
    \n
    /**\n
     * APIMethod: stop\n
     * Stops the Tween, and calls the done callback\n
     *     Doesn\'t do anything if animation is already finished\n
     */\n
    stop: function() {\n
        if (!this.playing) {\n
            return;\n
        }\n
        \n
        if (this.callbacks && this.callbacks.done) {\n
            this.callbacks.done.call(this, this.finish);\n
        }\n
        OpenLayers.Animation.stop(this.animationId);\n
        this.animationId = null;\n
        this.playing = false;\n
    },\n
    \n
    /**\n
     * Method: play\n
     * Calls the appropriate easing method\n
     */\n
    play: function() {\n
        var value = {};\n
        for (var i in this.begin) {\n
            var b = this.begin[i];\n
            var f = this.finish[i];\n
            if (b == null || f == null || isNaN(b) || isNaN(f)) {\n
                throw new TypeError(\'invalid value for Tween\');\n
            }\n
\n
            var c = f - b;\n
            value[i] = this.easing.apply(this, [this.time, b, c, this.duration]);\n
        }\n
        this.time++;\n
        \n
        if (this.callbacks && this.callbacks.eachStep) {\n
            this.callbacks.eachStep.call(this, value);\n
        }\n
        \n
        if (this.time > this.duration) {\n
            this.stop();\n
        }\n
    },\n
    \n
    /**\n
     * Create empty functions for all easing methods.\n
     */\n
    CLASS_NAME: "OpenLayers.Tween"\n
});\n
\n
/**\n
 * Namespace: OpenLayers.Easing\n
 * \n
 * Credits:\n
 *      Easing Equations by Robert Penner, <http://www.robertpenner.com/easing/>\n
 */\n
OpenLayers.Easing = {\n
    /**\n
     * Create empty functions for all easing methods.\n
     */\n
    CLASS_NAME: "OpenLayers.Easing"\n
};\n
\n
/**\n
 * Namespace: OpenLayers.Easing.Linear\n
 */\n
OpenLayers.Easing.Linear = {\n
    \n
    /**\n
     * Function: easeIn\n
     * \n
     * Parameters:\n
     * t - {Float} time\n
     * b - {Float} beginning position\n
     * c - {Float} total change\n
     * d - {Float} duration of the transition\n
     *\n
     * Returns:\n
     * {Float}\n
     */\n
    easeIn: function(t, b, c, d) {\n
        return c*t/d + b;\n
    },\n
    \n
    /**\n
     * Function: easeOut\n
     * \n
     * Parameters:\n
     * t - {Float} time\n
     * b - {Float} beginning position\n
     * c - {Float} total change\n
     * d - {Float} duration of the transition\n
     *\n
     * Returns:\n
     * {Float}\n
     */\n
    easeOut: function(t, b, c, d) {\n
        return c*t/d + b;\n
    },\n
    \n
    /**\n
     * Function: easeInOut\n
     * \n
     * Parameters:\n
     * t - {Float} time\n
     * b - {Float} beginning position\n
     * c - {Float} total change\n
     * d - {Float} duration of the transition\n
     *\n
     * Returns:\n
     * {Float}\n
     */\n
    easeInOut: function(t, b, c, d) {\n
        return c*t/d + b;\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Easing.Linear"\n
};\n
\n
/**\n
 * Namespace: OpenLayers.Easing.Expo\n
 */\n
OpenLayers.Easing.Expo = {\n
    \n
    /**\n
     * Function: easeIn\n
     * \n
     * Parameters:\n
     * t - {Float} time\n
     * b - {Float} beginning position\n
     * c - {Float} total change\n
     * d - {Float} duration of the transition\n
     *\n
     * Returns:\n
     * {Float}\n
     */\n
    easeIn: function(t, b, c, d) {\n
        return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;\n
    },\n
    \n
    /**\n
     * Function: easeOut\n
     * \n
     * Parameters:\n
     * t - {Float} time\n
     * b - {Float} beginning position\n
     * c - {Float} total change\n
     * d - {Float} duration of the transition\n
     *\n
     * Returns:\n
     * {Float}\n
     */\n
    easeOut: function(t, b, c, d) {\n
        return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;\n
    },\n
    \n
    /**\n
     * Function: easeInOut\n
     * \n
     * Parameters:\n
     * t - {Float} time\n
     * b - {Float} beginning position\n
     * c - {Float} total change\n
     * d - {Float} duration of the transition\n
     *\n
     * Returns:\n
     * {Float}\n
     */\n
    easeInOut: function(t, b, c, d) {\n
        if (t==0) return b;\n
        if (t==d) return b+c;\n
        if ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;\n
        return c/2 * (-Math.pow(2, -10 * --t) + 2) + b;\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Easing.Expo"\n
};\n
\n
/**\n
 * Namespace: OpenLayers.Easing.Quad\n
 */\n
OpenLayers.Easing.Quad = {\n
    \n
    /**\n
     * Function: easeIn\n
     * \n
     * Parameters:\n
     * t - {Float} time\n
     * b - {Float} beginning position\n
     * c - {Float} total change\n
     * d - {Float} duration of the transition\n
     *\n
     * Returns:\n
     * {Float}\n
     */\n
    easeIn: function(t, b, c, d) {\n
        return c*(t/=d)*t + b;\n
    },\n
    \n
    /**\n
     * Function: easeOut\n
     * \n
     * Parameters:\n
     * t - {Float} time\n
     * b - {Float} beginning position\n
     * c - {Float} total change\n
     * d - {Float} duration of the transition\n
     *\n
     * Returns:\n
     * {Float}\n
     */\n
    easeOut: function(t, b, c, d) {\n
        return -c *(t/=d)*(t-2) + b;\n
    },\n
    \n
    /**\n
     * Function: easeInOut\n
     * \n
     * Parameters:\n
     * t - {Float} time\n
     * b - {Float} beginning position\n
     * c - {Float} total change\n
     * d - {Float} duration of the transition\n
     *\n
     * Returns:\n
     * {Float}\n
     */\n
    easeInOut: function(t, b, c, d) {\n
        if ((t/=d/2) < 1) return c/2*t*t + b;\n
        return -c/2 * ((--t)*(t-2) - 1) + b;\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Easing.Quad"\n
};\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>8083</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

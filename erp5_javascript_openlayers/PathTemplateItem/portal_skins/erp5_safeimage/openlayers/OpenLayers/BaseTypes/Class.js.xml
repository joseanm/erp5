<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.78</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Class.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/SingleFile.js\n
 */\n
\n
/**\n
 * Constructor: OpenLayers.Class\n
 * Base class used to construct all other classes. Includes support for \n
 *     multiple inheritance. \n
 *     \n
 * This constructor is new in OpenLayers 2.5.  At OpenLayers 3.0, the old \n
 *     syntax for creating classes and dealing with inheritance \n
 *     will be removed.\n
 * \n
 * To create a new OpenLayers-style class, use the following syntax:\n
 * (code)\n
 *     var MyClass = OpenLayers.Class(prototype);\n
 * (end)\n
 *\n
 * To create a new OpenLayers-style class with multiple inheritance, use the\n
 *     following syntax:\n
 * (code)\n
 *     var MyClass = OpenLayers.Class(Class1, Class2, prototype);\n
 * (end)\n
 * \n
 * Note that instanceof reflection will only reveal Class1 as superclass.\n
 *\n
 */\n
OpenLayers.Class = function() {\n
    var len = arguments.length;\n
    var P = arguments[0];\n
    var F = arguments[len-1];\n
\n
    var C = typeof F.initialize == "function" ?\n
        F.initialize :\n
        function(){ P.prototype.initialize.apply(this, arguments); };\n
\n
    if (len > 1) {\n
        var newArgs = [C, P].concat(\n
                Array.prototype.slice.call(arguments).slice(1, len-1), F);\n
        OpenLayers.inherit.apply(null, newArgs);\n
    } else {\n
        C.prototype = F;\n
    }\n
    return C;\n
};\n
\n
/**\n
 * Function: OpenLayers.inherit\n
 *\n
 * Parameters:\n
 * C - {Object} the class that inherits\n
 * P - {Object} the superclass to inherit from\n
 *\n
 * In addition to the mandatory C and P parameters, an arbitrary number of\n
 * objects can be passed, which will extend C.\n
 */\n
OpenLayers.inherit = function(C, P) {\n
   var F = function() {};\n
   F.prototype = P.prototype;\n
   C.prototype = new F;\n
   var i, l, o;\n
   for(i=2, l=arguments.length; i<l; i++) {\n
       o = arguments[i];\n
       if(typeof o === "function") {\n
           o = o.prototype;\n
       }\n
       OpenLayers.Util.extend(C.prototype, o);\n
   }\n
};\n
\n
/**\n
 * APIFunction: extend\n
 * Copy all properties of a source object to a destination object.  Modifies\n
 *     the passed in destination object.  Any properties on the source object\n
 *     that are set to undefined will not be (re)set on the destination object.\n
 *\n
 * Parameters:\n
 * destination - {Object} The object that will be modified\n
 * source - {Object} The object with properties to be set on the destination\n
 *\n
 * Returns:\n
 * {Object} The destination object.\n
 */\n
OpenLayers.Util = OpenLayers.Util || {};\n
OpenLayers.Util.extend = function(destination, source) {\n
    destination = destination || {};\n
    if (source) {\n
        for (var property in source) {\n
            var value = source[property];\n
            if (value !== undefined) {\n
                destination[property] = value;\n
            }\n
        }\n
\n
        /**\n
         * IE doesn\'t include the toString property when iterating over an object\'s\n
         * properties with the for(property in object) syntax.  Explicitly check if\n
         * the source has its own toString property.\n
         */\n
\n
        /*\n
         * FF/Windows < 2.0.0.13 reports "Illegal operation on WrappedNative\n
         * prototype object" when calling hawOwnProperty if the source object\n
         * is an instance of window.Event.\n
         */\n
\n
        var sourceIsEvt = typeof window.Event == "function"\n
                          && source instanceof window.Event;\n
\n
        if (!sourceIsEvt\n
           && source.hasOwnProperty && source.hasOwnProperty("toString")) {\n
            destination.toString = source.toString;\n
        }\n
    }\n
    return destination;\n
};\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3740</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

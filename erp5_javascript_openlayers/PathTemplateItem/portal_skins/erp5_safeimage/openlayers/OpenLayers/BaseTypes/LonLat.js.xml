<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.78</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>LonLat.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/BaseTypes/Class.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.LonLat\n
 * This class represents a longitude and latitude pair\n
 */\n
OpenLayers.LonLat = OpenLayers.Class({\n
\n
    /** \n
     * APIProperty: lon\n
     * {Float} The x-axis coodinate in map units\n
     */\n
    lon: 0.0,\n
    \n
    /** \n
     * APIProperty: lat\n
     * {Float} The y-axis coordinate in map units\n
     */\n
    lat: 0.0,\n
\n
    /**\n
     * Constructor: OpenLayers.LonLat\n
     * Create a new map location. Coordinates can be passed either as two\n
     * arguments, or as a single argument.\n
     *\n
     * Parameters (two arguments):\n
     * lon - {Number} The x-axis coordinate in map units.  If your map is in\n
     *     a geographic projection, this will be the Longitude.  Otherwise,\n
     *     it will be the x coordinate of the map location in your map units.\n
     * lat - {Number} The y-axis coordinate in map units.  If your map is in\n
     *     a geographic projection, this will be the Latitude.  Otherwise,\n
     *     it will be the y coordinate of the map location in your map units.\n
     *\n
     * Parameters (single argument):\n
     * location - {Array(Float)} [lon, lat]\n
     */\n
    initialize: function(lon, lat) {\n
        if (OpenLayers.Util.isArray(lon)) {\n
            lat = lon[1];\n
            lon = lon[0];\n
        }\n
        this.lon = OpenLayers.Util.toFloat(lon);\n
        this.lat = OpenLayers.Util.toFloat(lat);\n
    },\n
    \n
    /**\n
     * Method: toString\n
     * Return a readable string version of the lonlat\n
     *\n
     * Returns:\n
     * {String} String representation of OpenLayers.LonLat object. \n
     *           (e.g. <i>"lon=5,lat=42"</i>)\n
     */\n
    toString:function() {\n
        return ("lon=" + this.lon + ",lat=" + this.lat);\n
    },\n
\n
    /** \n
     * APIMethod: toShortString\n
     * \n
     * Returns:\n
     * {String} Shortened String representation of OpenLayers.LonLat object. \n
     *         (e.g. <i>"5, 42"</i>)\n
     */\n
    toShortString:function() {\n
        return (this.lon + ", " + this.lat);\n
    },\n
\n
    /** \n
     * APIMethod: clone\n
     * \n
     * Returns:\n
     * {<OpenLayers.LonLat>} New OpenLayers.LonLat object with the same lon \n
     *                       and lat values\n
     */\n
    clone:function() {\n
        return new OpenLayers.LonLat(this.lon, this.lat);\n
    },\n
\n
    /** \n
     * APIMethod: add\n
     * \n
     * Parameters:\n
     * lon - {Float}\n
     * lat - {Float}\n
     * \n
     * Returns:\n
     * {<OpenLayers.LonLat>} A new OpenLayers.LonLat object with the lon and \n
     *                       lat passed-in added to this\'s. \n
     */\n
    add:function(lon, lat) {\n
        if ( (lon == null) || (lat == null) ) {\n
            throw new TypeError(\'LonLat.add cannot receive null values\');\n
        }\n
        return new OpenLayers.LonLat(this.lon + OpenLayers.Util.toFloat(lon), \n
                                     this.lat + OpenLayers.Util.toFloat(lat));\n
    },\n
\n
    /** \n
     * APIMethod: equals\n
     * \n
     * Parameters:\n
     * ll - {<OpenLayers.LonLat>}\n
     * \n
     * Returns:\n
     * {Boolean} Boolean value indicating whether the passed-in \n
     *           <OpenLayers.LonLat> object has the same lon and lat \n
     *           components as this.\n
     *           Note: if ll passed in is null, returns false\n
     */\n
    equals:function(ll) {\n
        var equals = false;\n
        if (ll != null) {\n
            equals = ((this.lon == ll.lon && this.lat == ll.lat) ||\n
                      (isNaN(this.lon) && isNaN(this.lat) && isNaN(ll.lon) && isNaN(ll.lat)));\n
        }\n
        return equals;\n
    },\n
\n
    /**\n
     * APIMethod: transform\n
     * Transform the LonLat object from source to dest. This transformation is\n
     *    *in place*: if you want a *new* lonlat, use .clone() first.\n
     *\n
     * Parameters: \n
     * source - {<OpenLayers.Projection>} Source projection. \n
     * dest   - {<OpenLayers.Projection>} Destination projection. \n
     *\n
     * Returns:\n
     * {<OpenLayers.LonLat>} Itself, for use in chaining operations.\n
     */\n
    transform: function(source, dest) {\n
        var point = OpenLayers.Projection.transform(\n
            {\'x\': this.lon, \'y\': this.lat}, source, dest);\n
        this.lon = point.x;\n
        this.lat = point.y;\n
        return this;\n
    },\n
    \n
    /**\n
     * APIMethod: wrapDateLine\n
     * \n
     * Parameters:\n
     * maxExtent - {<OpenLayers.Bounds>}\n
     * \n
     * Returns:\n
     * {<OpenLayers.LonLat>} A copy of this lonlat, but wrapped around the \n
     *                       "dateline" (as specified by the borders of \n
     *                       maxExtent)\n
     */\n
    wrapDateLine: function(maxExtent) {    \n
\n
        var newLonLat = this.clone();\n
    \n
        if (maxExtent) {\n
            //shift right?\n
            while (newLonLat.lon < maxExtent.left) {\n
                newLonLat.lon +=  maxExtent.getWidth();\n
            }    \n
           \n
            //shift left?\n
            while (newLonLat.lon > maxExtent.right) {\n
                newLonLat.lon -= maxExtent.getWidth();\n
            }    \n
        }\n
                \n
        return newLonLat;\n
    },\n
\n
    CLASS_NAME: "OpenLayers.LonLat"\n
});\n
\n
/** \n
 * Function: fromString\n
 * Alternative constructor that builds a new <OpenLayers.LonLat> from a \n
 *     parameter string\n
 * \n
 * Parameters:\n
 * str - {String} Comma-separated Lon,Lat coordinate string. \n
 *                 (e.g. <i>"5,40"</i>)\n
 * \n
 * Returns:\n
 * {<OpenLayers.LonLat>} New <OpenLayers.LonLat> object built from the \n
 *                       passed-in String.\n
 */\n
OpenLayers.LonLat.fromString = function(str) {\n
    var pair = str.split(",");\n
    return new OpenLayers.LonLat(pair[0], pair[1]);\n
};\n
\n
/** \n
 * Function: fromArray\n
 * Alternative constructor that builds a new <OpenLayers.LonLat> from an \n
 *     array of two numbers that represent lon- and lat-values.\n
 * \n
 * Parameters:\n
 * arr - {Array(Float)} Array of lon/lat values (e.g. [5,-42])\n
 * \n
 * Returns:\n
 * {<OpenLayers.LonLat>} New <OpenLayers.LonLat> object built from the \n
 *                       passed-in array.\n
 */\n
OpenLayers.LonLat.fromArray = function(arr) {\n
    var gotArr = OpenLayers.Util.isArray(arr),\n
        lon = gotArr && arr[0],\n
        lat = gotArr && arr[1];\n
    return new OpenLayers.LonLat(lon, lat);\n
};\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6425</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.78</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Element.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Util.js\n
 * @requires OpenLayers/BaseTypes.js\n
 */\n
\n
/**\n
 * Namespace: OpenLayers.Element\n
 */\n
OpenLayers.Element = {\n
\n
    /**\n
     * APIFunction: visible\n
     * \n
     * Parameters: \n
     * element - {DOMElement}\n
     * \n
     * Returns:\n
     * {Boolean} Is the element visible?\n
     */\n
    visible: function(element) {\n
        return OpenLayers.Util.getElement(element).style.display != \'none\';\n
    },\n
\n
    /**\n
     * APIFunction: toggle\n
     * Toggle the visibility of element(s) passed in\n
     * \n
     * Parameters:\n
     * element - {DOMElement} Actually user can pass any number of elements\n
     */\n
    toggle: function() {\n
        for (var i=0, len=arguments.length; i<len; i++) {\n
            var element = OpenLayers.Util.getElement(arguments[i]);\n
            var display = OpenLayers.Element.visible(element) ? \'none\' \n
                                                              : \'\';\n
            element.style.display = display;\n
        }\n
    },\n
\n
    /**\n
     * APIFunction: remove\n
     * Remove the specified element from the DOM.\n
     * \n
     * Parameters:\n
     * element - {DOMElement}\n
     */\n
    remove: function(element) {\n
        element = OpenLayers.Util.getElement(element);\n
        element.parentNode.removeChild(element);\n
    },\n
\n
    /**\n
     * APIFunction: getHeight\n
     *  \n
     * Parameters:\n
     * element - {DOMElement}\n
     * \n
     * Returns:\n
     * {Integer} The offset height of the element passed in\n
     */\n
    getHeight: function(element) {\n
        element = OpenLayers.Util.getElement(element);\n
        return element.offsetHeight;\n
    },\n
\n
    /**\n
     * Function: hasClass\n
     * Tests if an element has the given CSS class name.\n
     *\n
     * Parameters:\n
     * element - {DOMElement} A DOM element node.\n
     * name - {String} The CSS class name to search for.\n
     *\n
     * Returns:\n
     * {Boolean} The element has the given class name.\n
     */\n
    hasClass: function(element, name) {\n
        var names = element.className;\n
        return (!!names && new RegExp("(^|\\\\s)" + name + "(\\\\s|$)").test(names));\n
    },\n
    \n
    /**\n
     * Function: addClass\n
     * Add a CSS class name to an element.  Safe where element already has\n
     *     the class name.\n
     *\n
     * Parameters:\n
     * element - {DOMElement} A DOM element node.\n
     * name - {String} The CSS class name to add.\n
     *\n
     * Returns:\n
     * {DOMElement} The element.\n
     */\n
    addClass: function(element, name) {\n
        if(!OpenLayers.Element.hasClass(element, name)) {\n
            element.className += (element.className ? " " : "") + name;\n
        }\n
        return element;\n
    },\n
\n
    /**\n
     * Function: removeClass\n
     * Remove a CSS class name from an element.  Safe where element does not\n
     *     have the class name.\n
     *\n
     * Parameters:\n
     * element - {DOMElement} A DOM element node.\n
     * name - {String} The CSS class name to remove.\n
     *\n
     * Returns:\n
     * {DOMElement} The element.\n
     */\n
    removeClass: function(element, name) {\n
        var names = element.className;\n
        if(names) {\n
            element.className = OpenLayers.String.trim(\n
                names.replace(\n
                    new RegExp("(^|\\\\s+)" + name + "(\\\\s+|$)"), " "\n
                )\n
            );\n
        }\n
        return element;\n
    },\n
\n
    /**\n
     * Function: toggleClass\n
     * Remove a CSS class name from an element if it exists.  Add the class name\n
     *     if it doesn\'t exist.\n
     *\n
     * Parameters:\n
     * element - {DOMElement} A DOM element node.\n
     * name - {String} The CSS class name to toggle.\n
     *\n
     * Returns:\n
     * {DOMElement} The element.\n
     */\n
    toggleClass: function(element, name) {\n
        if(OpenLayers.Element.hasClass(element, name)) {\n
            OpenLayers.Element.removeClass(element, name);\n
        } else {\n
            OpenLayers.Element.addClass(element, name);\n
        }\n
        return element;\n
    },\n
\n
    /**\n
     * APIFunction: getStyle\n
     * \n
     * Parameters:\n
     * element - {DOMElement}\n
     * style - {?}\n
     * \n
     * Returns:\n
     * {?}\n
     */\n
    getStyle: function(element, style) {\n
        element = OpenLayers.Util.getElement(element);\n
\n
        var value = null;\n
        if (element && element.style) {\n
            value = element.style[OpenLayers.String.camelize(style)];\n
            if (!value) {\n
                if (document.defaultView && \n
                    document.defaultView.getComputedStyle) {\n
                    \n
                    var css = document.defaultView.getComputedStyle(element, null);\n
                    value = css ? css.getPropertyValue(style) : null;\n
                } else if (element.currentStyle) {\n
                    value = element.currentStyle[OpenLayers.String.camelize(style)];\n
                }\n
            }\n
        \n
            var positions = [\'left\', \'top\', \'right\', \'bottom\'];\n
            if (window.opera &&\n
                (OpenLayers.Util.indexOf(positions,style) != -1) &&\n
                (OpenLayers.Element.getStyle(element, \'position\') == \'static\')) { \n
                value = \'auto\';\n
            }\n
        }\n
    \n
        return value == \'auto\' ? null : value;\n
    }\n
\n
};\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5398</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

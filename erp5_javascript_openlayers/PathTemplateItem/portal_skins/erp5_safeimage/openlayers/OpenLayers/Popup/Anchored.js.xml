<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.83</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Anchored.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
\n
/**\n
 * @requires OpenLayers/Popup.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Popup.Anchored\n
 * \n
 * Inherits from:\n
 *  - <OpenLayers.Popup>\n
 */\n
OpenLayers.Popup.Anchored = \n
  OpenLayers.Class(OpenLayers.Popup, {\n
\n
    /** \n
     * Property: relativePosition\n
     * {String} Relative position of the popup ("br", "tr", "tl" or "bl").\n
     */\n
    relativePosition: null,\n
    \n
    /**\n
     * APIProperty: keepInMap \n
     * {Boolean} If panMapIfOutOfView is false, and this property is true, \n
     *     contrain the popup such that it always fits in the available map\n
     *     space. By default, this is set. If you are creating popups that are\n
     *     near map edges and not allowing pannning, and especially if you have\n
     *     a popup which has a fixedRelativePosition, setting this to false may\n
     *     be a smart thing to do.\n
     *   \n
     *     For anchored popups, default is true, since subclasses will\n
     *     usually want this functionality.\n
     */\n
    keepInMap: true,\n
\n
    /**\n
     * Property: anchor\n
     * {Object} Object to which we\'ll anchor the popup. Must expose a \n
     *     \'size\' (<OpenLayers.Size>) and \'offset\' (<OpenLayers.Pixel>).\n
     */\n
    anchor: null,\n
\n
    /** \n
    * Constructor: OpenLayers.Popup.Anchored\n
    * \n
    * Parameters:\n
    * id - {String}\n
    * lonlat - {<OpenLayers.LonLat>}\n
    * contentSize - {<OpenLayers.Size>}\n
    * contentHTML - {String}\n
    * anchor - {Object} Object which must expose a \'size\' <OpenLayers.Size> \n
    *     and \'offset\' <OpenLayers.Pixel> (generally an <OpenLayers.Icon>).\n
    * closeBox - {Boolean}\n
    * closeBoxCallback - {Function} Function to be called on closeBox click.\n
    */\n
    initialize:function(id, lonlat, contentSize, contentHTML, anchor, closeBox,\n
                        closeBoxCallback) {\n
        var newArguments = [\n
            id, lonlat, contentSize, contentHTML, closeBox, closeBoxCallback\n
        ];\n
        OpenLayers.Popup.prototype.initialize.apply(this, newArguments);\n
\n
        this.anchor = (anchor != null) ? anchor \n
                                       : { size: new OpenLayers.Size(0,0),\n
                                           offset: new OpenLayers.Pixel(0,0)};\n
    },\n
\n
    /**\n
     * APIMethod: destroy\n
     */\n
    destroy: function() {\n
        this.anchor = null;\n
        this.relativePosition = null;\n
        \n
        OpenLayers.Popup.prototype.destroy.apply(this, arguments);        \n
    },\n
\n
    /**\n
     * APIMethod: show\n
     * Overridden from Popup since user might hide popup and then show() it \n
     *     in a new location (meaning we might want to update the relative\n
     *     position on the show)\n
     */\n
    show: function() {\n
        this.updatePosition();\n
        OpenLayers.Popup.prototype.show.apply(this, arguments);\n
    },\n
\n
    /**\n
     * Method: moveTo\n
     * Since the popup is moving to a new px, it might need also to be moved\n
     *     relative to where the marker is. We first calculate the new \n
     *     relativePosition, and then we calculate the new px where we will \n
     *     put the popup, based on the new relative position. \n
     * \n
     *     If the relativePosition has changed, we must also call \n
     *     updateRelativePosition() to make any visual changes to the popup \n
     *     which are associated with putting it in a new relativePosition.\n
     * \n
     * Parameters:\n
     * px - {<OpenLayers.Pixel>}\n
     */\n
    moveTo: function(px) {\n
        var oldRelativePosition = this.relativePosition;\n
        this.relativePosition = this.calculateRelativePosition(px);\n
        \n
        var newPx = this.calculateNewPx(px);\n
        \n
        var newArguments = new Array(newPx);        \n
        OpenLayers.Popup.prototype.moveTo.apply(this, newArguments);\n
        \n
        //if this move has caused the popup to change its relative position, \n
        // we need to make the appropriate cosmetic changes.\n
        if (this.relativePosition != oldRelativePosition) {\n
            this.updateRelativePosition();\n
        }\n
    },\n
\n
    /**\n
     * APIMethod: setSize\n
     * \n
     * Parameters:\n
     * contentSize - {<OpenLayers.Size>} the new size for the popup\'s \n
     *     contents div (in pixels).\n
     */\n
    setSize:function(contentSize) { \n
        OpenLayers.Popup.prototype.setSize.apply(this, arguments);\n
\n
        if ((this.lonlat) && (this.map)) {\n
            var px = this.map.getLayerPxFromLonLat(this.lonlat);\n
            this.moveTo(px);\n
        }\n
    },  \n
    \n
    /** \n
     * Method: calculateRelativePosition\n
     * \n
     * Parameters:\n
     * px - {<OpenLayers.Pixel>}\n
     * \n
     * Returns:\n
     * {String} The relative position ("br" "tr" "tl" "bl") at which the popup\n
     *     should be placed.\n
     */\n
    calculateRelativePosition:function(px) {\n
        var lonlat = this.map.getLonLatFromLayerPx(px);        \n
        \n
        var extent = this.map.getExtent();\n
        var quadrant = extent.determineQuadrant(lonlat);\n
        \n
        return OpenLayers.Bounds.oppositeQuadrant(quadrant);\n
    }, \n
\n
    /**\n
     * Method: updateRelativePosition\n
     * The popup has been moved to a new relative location, so we may want to \n
     *     make some cosmetic adjustments to it. \n
     * \n
     *     Note that in the classic Anchored popup, there is nothing to do \n
     *     here, since the popup looks exactly the same in all four positions.\n
     *     Subclasses such as Framed, however, will want to do something\n
     *     special here.\n
     */\n
    updateRelativePosition: function() {\n
        //to be overridden by subclasses\n
    },\n
\n
    /** \n
     * Method: calculateNewPx\n
     * \n
     * Parameters:\n
     * px - {<OpenLayers.Pixel>}\n
     * \n
     * Returns:\n
     * {<OpenLayers.Pixel>} The the new px position of the popup on the screen\n
     *     relative to the passed-in px.\n
     */\n
    calculateNewPx:function(px) {\n
        var newPx = px.offset(this.anchor.offset);\n
        \n
        //use contentSize if size is not already set\n
        var size = this.size || this.contentSize;\n
\n
        var top = (this.relativePosition.charAt(0) == \'t\');\n
        newPx.y += (top) ? -size.h : this.anchor.size.h;\n
        \n
        var left = (this.relativePosition.charAt(1) == \'l\');\n
        newPx.x += (left) ? -size.w : this.anchor.size.w;\n
\n
        return newPx;   \n
    },\n
\n
    CLASS_NAME: "OpenLayers.Popup.Anchored"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6530</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.77</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Animation.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/**\n
 * Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. \n
 *\n
 * @requires OpenLayers/SingleFile.js\n
 */\n
\n
/**\n
 * Namespace: OpenLayers.Animation\n
 * A collection of utility functions for executing methods that repaint a \n
 *     portion of the browser window.  These methods take advantage of the\n
 *     browser\'s scheduled repaints where requestAnimationFrame is available.\n
 */\n
OpenLayers.Animation = (function(window) {\n
    \n
    /**\n
     * Property: isNative\n
     * {Boolean} true if a native requestAnimationFrame function is available\n
     */\n
    var isNative = !!(window.requestAnimationFrame ||\n
        window.webkitRequestAnimationFrame ||\n
        window.mozRequestAnimationFrame ||\n
        window.oRequestAnimationFrame ||\n
        window.msRequestAnimationFrame);\n
    \n
    /**\n
     * Function: requestFrame\n
     * Schedule a function to be called at the next available animation frame.\n
     *     Uses the native method where available.  Where requestAnimationFrame is\n
     *     not available, setTimeout will be called with a 16ms delay.\n
     *\n
     * Parameters:\n
     * callback - {Function} The function to be called at the next animation frame.\n
     * element - {DOMElement} Optional element that visually bounds the animation.\n
     */\n
    var requestFrame = (function() {\n
        var request = window.requestAnimationFrame ||\n
            window.webkitRequestAnimationFrame ||\n
            window.mozRequestAnimationFrame ||\n
            window.oRequestAnimationFrame ||\n
            window.msRequestAnimationFrame ||\n
            function(callback, element) {\n
                window.setTimeout(callback, 16);\n
            };\n
        // bind to window to avoid illegal invocation of native function\n
        return function(callback, element) {\n
            request.apply(window, [callback, element]);\n
        };\n
    })();\n
    \n
    // private variables for animation loops\n
    var counter = 0;\n
    var loops = {};\n
    \n
    /**\n
     * Function: start\n
     * Executes a method with <requestFrame> in series for some \n
     *     duration.\n
     *\n
     * Parameters:\n
     * callback - {Function} The function to be called at the next animation frame.\n
     * duration - {Number} Optional duration for the loop.  If not provided, the\n
     *     animation loop will execute indefinitely.\n
     * element - {DOMElement} Optional element that visually bounds the animation.\n
     *\n
     * Returns:\n
     * {Number} Identifier for the animation loop.  Used to stop animations with\n
     *     <stop>.\n
     */\n
    function start(callback, duration, element) {\n
        duration = duration > 0 ? duration : Number.POSITIVE_INFINITY;\n
        var id = ++counter;\n
        var start = +new Date;\n
        loops[id] = function() {\n
            if (loops[id] && +new Date - start <= duration) {\n
                callback();\n
                if (loops[id]) {\n
                    requestFrame(loops[id], element);\n
                }\n
            } else {\n
                delete loops[id];\n
            }\n
        };\n
        requestFrame(loops[id], element);\n
        return id;\n
    }\n
    \n
    /**\n
     * Function: stop\n
     * Terminates an animation loop started with <start>.\n
     *\n
     * Parameters:\n
     * id - {Number} Identifier returned from <start>.\n
     */\n
    function stop(id) {\n
        delete loops[id];\n
    }\n
    \n
    return {\n
        isNative: isNative,\n
        requestFrame: requestFrame,\n
        start: start,\n
        stop: stop\n
    };\n
    \n
})(window);\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3633</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.78</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Image.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
 \n
/**\n
 * @requires OpenLayers/Layer.js\n
 * @requires OpenLayers/Tile/Image.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Layer.Image\n
 * Instances of OpenLayers.Layer.Image are used to display data from a web\n
 * accessible image as a map layer.  Create a new image layer with the\n
 * <OpenLayers.Layer.Image> constructor.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Layer>\n
 */\n
OpenLayers.Layer.Image = OpenLayers.Class(OpenLayers.Layer, {\n
\n
    /**\n
     * Property: isBaseLayer\n
     * {Boolean} The layer is a base layer.  Default is true.  Set this property\n
     * in the layer options\n
     */\n
    isBaseLayer: true,\n
    \n
    /**\n
     * Property: url\n
     * {String} URL of the image to use\n
     */\n
    url: null,\n
\n
    /**\n
     * Property: extent\n
     * {<OpenLayers.Bounds>} The image bounds in map units.  This extent will\n
     *     also be used as the default maxExtent for the layer.  If you wish\n
     *     to have a maxExtent that is different than the image extent, set the\n
     *     maxExtent property of the options argument (as with any other layer).\n
     */\n
    extent: null,\n
    \n
    /**\n
     * Property: size\n
     * {<OpenLayers.Size>} The image size in pixels\n
     */\n
    size: null,\n
\n
    /**\n
     * Property: tile\n
     * {<OpenLayers.Tile.Image>}\n
     */\n
    tile: null,\n
\n
    /**\n
     * Property: aspectRatio\n
     * {Float} The ratio of height/width represented by a single pixel in the\n
     * graphic\n
     */\n
    aspectRatio: null,\n
\n
    /**\n
     * Constructor: OpenLayers.Layer.Image\n
     * Create a new image layer\n
     *\n
     * Parameters:\n
     * name - {String} A name for the layer.\n
     * url - {String} Relative or absolute path to the image\n
     * extent - {<OpenLayers.Bounds>} The extent represented by the image\n
     * size - {<OpenLayers.Size>} The size (in pixels) of the image\n
     * options - {Object} Hashtable of extra options to tag onto the layer\n
     */\n
    initialize: function(name, url, extent, size, options) {\n
        this.url = url;\n
        this.extent = extent;\n
        this.maxExtent = extent;\n
        this.size = size;\n
        OpenLayers.Layer.prototype.initialize.apply(this, [name, options]);\n
\n
        this.aspectRatio = (this.extent.getHeight() / this.size.h) /\n
                           (this.extent.getWidth() / this.size.w);\n
    },    \n
\n
    /**\n
     * Method: destroy\n
     * Destroy this layer\n
     */\n
    destroy: function() {\n
        if (this.tile) {\n
            this.removeTileMonitoringHooks(this.tile);\n
            this.tile.destroy();\n
            this.tile = null;\n
        }\n
        OpenLayers.Layer.prototype.destroy.apply(this, arguments);\n
    },\n
    \n
    /**\n
     * Method: clone\n
     * Create a clone of this layer\n
     *\n
     * Paramters:\n
     * obj - {Object} An optional layer (is this ever used?)\n
     *\n
     * Returns:\n
     * {<OpenLayers.Layer.Image>} An exact copy of this layer\n
     */\n
    clone: function(obj) {\n
        \n
        if(obj == null) {\n
            obj = new OpenLayers.Layer.Image(this.name,\n
                                               this.url,\n
                                               this.extent,\n
                                               this.size,\n
                                               this.getOptions());\n
        }\n
\n
        //get all additions from superclasses\n
        obj = OpenLayers.Layer.prototype.clone.apply(this, [obj]);\n
\n
        // copy/set any non-init, non-simple values here\n
\n
        return obj;\n
    },    \n
    \n
    /**\n
     * APIMethod: setMap\n
     * \n
     * Parameters:\n
     * map - {<OpenLayers.Map>}\n
     */\n
    setMap: function(map) {\n
        /**\n
         * If nothing to do with resolutions has been set, assume a single\n
         * resolution determined by ratio*extent/size - if an image has a\n
         * pixel aspect ratio different than one (as calculated above), the\n
         * image will be stretched in one dimension only.\n
         */\n
        if( this.options.maxResolution == null ) {\n
            this.options.maxResolution = this.aspectRatio *\n
                                         this.extent.getWidth() /\n
                                         this.size.w;\n
        }\n
        OpenLayers.Layer.prototype.setMap.apply(this, arguments);\n
    },\n
\n
    /** \n
     * Method: moveTo\n
     * Create the tile for the image or resize it for the new resolution\n
     * \n
     * Parameters:\n
     * bounds - {<OpenLayers.Bounds>}\n
     * zoomChanged - {Boolean}\n
     * dragging - {Boolean}\n
     */\n
    moveTo:function(bounds, zoomChanged, dragging) {\n
        OpenLayers.Layer.prototype.moveTo.apply(this, arguments);\n
\n
        var firstRendering = (this.tile == null);\n
\n
        if(zoomChanged || firstRendering) {\n
\n
            //determine new tile size\n
            this.setTileSize();\n
\n
            //determine new position (upper left corner of new bounds)\n
            var ulPx = this.map.getLayerPxFromLonLat({\n
                lon: this.extent.left,\n
                lat: this.extent.top\n
            });\n
\n
            if(firstRendering) {\n
                //create the new tile\n
                this.tile = new OpenLayers.Tile.Image(this, ulPx, this.extent, \n
                                                      null, this.tileSize);\n
                this.addTileMonitoringHooks(this.tile);\n
            } else {\n
                //just resize the tile and set it\'s new position\n
                this.tile.size = this.tileSize.clone();\n
                this.tile.position = ulPx.clone();\n
            }\n
            this.tile.draw();\n
        }\n
    }, \n
\n
    /**\n
     * Set the tile size based on the map size.\n
     */\n
    setTileSize: function() {\n
        var tileWidth = this.extent.getWidth() / this.map.getResolution();\n
        var tileHeight = this.extent.getHeight() / this.map.getResolution();\n
        this.tileSize = new OpenLayers.Size(tileWidth, tileHeight);\n
    },\n
\n
    /** \n
     * Method: addTileMonitoringHooks\n
     * This function takes a tile as input and adds the appropriate hooks to \n
     *     the tile so that the layer can keep track of the loading tiles.\n
     * \n
     * Parameters: \n
     * tile - {<OpenLayers.Tile>}\n
     */\n
    addTileMonitoringHooks: function(tile) {\n
        tile.onLoadStart = function() {\n
            this.events.triggerEvent("loadstart");\n
        };\n
        tile.events.register("loadstart", this, tile.onLoadStart);\n
      \n
        tile.onLoadEnd = function() {\n
            this.events.triggerEvent("loadend");\n
        };\n
        tile.events.register("loadend", this, tile.onLoadEnd);\n
        tile.events.register("unload", this, tile.onLoadEnd);\n
    },\n
\n
    /** \n
     * Method: removeTileMonitoringHooks\n
     * This function takes a tile as input and removes the tile hooks \n
     *     that were added in <addTileMonitoringHooks>.\n
     * \n
     * Parameters: \n
     * tile - {<OpenLayers.Tile>}\n
     */\n
    removeTileMonitoringHooks: function(tile) {\n
        tile.unload();\n
        tile.events.un({\n
            "loadstart": tile.onLoadStart,\n
            "loadend": tile.onLoadEnd,\n
            "unload": tile.onLoadEnd,\n
            scope: this\n
        });\n
    },\n
    \n
    /**\n
     * APIMethod: setUrl\n
     * \n
     * Parameters:\n
     * newUrl - {String}\n
     */\n
    setUrl: function(newUrl) {\n
        this.url = newUrl;\n
        this.tile.draw();\n
    },\n
\n
    /** \n
     * APIMethod: getURL\n
     * The url we return is always the same (the image itself never changes)\n
     *     so we can ignore the bounds parameter (it will always be the same, \n
     *     anyways) \n
     * \n
     * Parameters:\n
     * bounds - {<OpenLayers.Bounds>}\n
     */\n
    getURL: function(bounds) {\n
        return this.url;\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Layer.Image"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>7832</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.78</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Bing.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Layer/XYZ.js\n
 */\n
\n
/** \n
 * Class: OpenLayers.Layer.Bing\n
 * Bing layer using direct tile access as provided by Bing Maps REST Services.\n
 * See http://msdn.microsoft.com/en-us/library/ff701713.aspx for more\n
 * information. Note: Terms of Service compliant use requires the map to be\n
 * configured with an <OpenLayers.Control.Attribution> control and the\n
 * attribution placed on or near the map.\n
 * \n
 * Inherits from:\n
 *  - <OpenLayers.Layer.XYZ>\n
 */\n
OpenLayers.Layer.Bing = OpenLayers.Class(OpenLayers.Layer.XYZ, {\n
\n
    /**\n
     * Property: key\n
     * {String} API key for Bing maps, get your own key \n
     *     at http://bingmapsportal.com/ .\n
     */\n
    key: null,\n
\n
    /**\n
     * Property: serverResolutions\n
     * {Array} the resolutions provided by the Bing servers.\n
     */\n
    serverResolutions: [\n
        156543.03390625, 78271.516953125, 39135.7584765625,\n
        19567.87923828125, 9783.939619140625, 4891.9698095703125,\n
        2445.9849047851562, 1222.9924523925781, 611.4962261962891,\n
        305.74811309814453, 152.87405654907226, 76.43702827453613,\n
        38.218514137268066, 19.109257068634033, 9.554628534317017,\n
        4.777314267158508, 2.388657133579254, 1.194328566789627,\n
        0.5971642833948135, 0.29858214169740677, 0.14929107084870338,\n
        0.07464553542435169\n
    ],\n
    \n
    /**\n
     * Property: attributionTemplate\n
     * {String}\n
     */\n
    attributionTemplate: \'<span class="olBingAttribution ${type}">\' +\n
         \'<div><a target="_blank" href="http://www.bing.com/maps/">\' +\n
         \'<img src="${logo}" /></a></div>${copyrights}\' +\n
         \'<a style="white-space: nowrap" target="_blank" \'+\n
         \'href="http://www.microsoft.com/maps/product/terms.html">\' +\n
         \'Terms of Use</a></span>\',\n
\n
    /**\n
     * Property: metadata\n
     * {Object} Metadata for this layer, as returned by the callback script\n
     */\n
    metadata: null,\n
    \n
    /**\n
     * APIProperty: type\n
     * {String} The layer identifier.  Any non-birdseye imageryType\n
     *     from http://msdn.microsoft.com/en-us/library/ff701716.aspx can be\n
     *     used.  Default is "Road".\n
     */\n
    type: "Road",\n
    \n
    /**\n
     * APIProperty: culture\n
     * {String} The culture identifier.  See http://msdn.microsoft.com/en-us/library/ff701709.aspx\n
     * for the definition and the possible values.  Default is "en-US".\n
     */\n
    culture: "en-US",\n
    \n
    /**\n
     * APIProperty: metadataParams\n
     * {Object} Optional url parameters for the Get Imagery Metadata request\n
     * as described here: http://msdn.microsoft.com/en-us/library/ff701716.aspx\n
     */\n
    metadataParams: null,\n
\n
    /** APIProperty: tileOptions\n
     *  {Object} optional configuration options for <OpenLayers.Tile> instances\n
     *  created by this Layer. Default is\n
     *\n
     *  (code)\n
     *  {crossOriginKeyword: \'anonymous\'}\n
     *  (end)\n
     */\n
    tileOptions: null,\n
\n
    /**\n
     * Constructor: OpenLayers.Layer.Bing\n
     * Create a new Bing layer.\n
     *\n
     * Example:\n
     * (code)\n
     * var road = new OpenLayers.Layer.Bing({\n
     *     name: "My Bing Aerial Layer",\n
     *     type: "Aerial",\n
     *     key: "my-api-key-here",\n
     * });\n
     * (end)\n
     *\n
     * Parameters:\n
     * options - {Object} Configuration properties for the layer.\n
     *\n
     * Required configuration properties:\n
     * key - {String} Bing Maps API key for your application. Get one at\n
     *     http://bingmapsportal.com/.\n
     * type - {String} The layer identifier.  Any non-birdseye imageryType\n
     *     from http://msdn.microsoft.com/en-us/library/ff701716.aspx can be\n
     *     used.\n
     *\n
     * Any other documented layer properties can be provided in the config object.\n
     */\n
    initialize: function(options) {\n
        options = OpenLayers.Util.applyDefaults({\n
            sphericalMercator: true\n
        }, options);\n
        var name = options.name || "Bing " + (options.type || this.type);\n
        \n
        var newArgs = [name, null, options];\n
        OpenLayers.Layer.XYZ.prototype.initialize.apply(this, newArgs);\n
        this.tileOptions = OpenLayers.Util.extend({\n
            crossOriginKeyword: \'anonymous\'\n
        }, this.options.tileOptions);\n
        this.loadMetadata(); \n
    },\n
\n
    /**\n
     * Method: loadMetadata\n
     */\n
    loadMetadata: function() {\n
        this._callbackId = "_callback_" + this.id.replace(/\\./g, "_");\n
        // link the processMetadata method to the global scope and bind it\n
        // to this instance\n
        window[this._callbackId] = OpenLayers.Function.bind(\n
            OpenLayers.Layer.Bing.processMetadata, this\n
        );\n
        var params = OpenLayers.Util.applyDefaults({\n
            key: this.key,\n
            jsonp: this._callbackId,\n
            include: "ImageryProviders"\n
        }, this.metadataParams);\n
        var url = "http://dev.virtualearth.net/REST/v1/Imagery/Metadata/" +\n
            this.type + "?" + OpenLayers.Util.getParameterString(params);\n
        var script = document.createElement("script");\n
        script.type = "text/javascript";\n
        script.src = url;\n
        script.id = this._callbackId;\n
        document.getElementsByTagName("head")[0].appendChild(script);\n
    },\n
    \n
    /**\n
     * Method: initLayer\n
     *\n
     * Sets layer properties according to the metadata provided by the API\n
     */\n
    initLayer: function() {\n
        var res = this.metadata.resourceSets[0].resources[0];\n
        var url = res.imageUrl.replace("{quadkey}", "${quadkey}");\n
        url = url.replace("{culture}", this.culture);\n
        this.url = [];\n
        for (var i=0; i<res.imageUrlSubdomains.length; ++i) {\n
            this.url.push(url.replace("{subdomain}", res.imageUrlSubdomains[i]));\n
        }\n
        this.addOptions({\n
            maxResolution: Math.min(\n
                this.serverResolutions[res.zoomMin],\n
                this.maxResolution || Number.POSITIVE_INFINITY\n
            ),\n
            numZoomLevels: Math.min(\n
                res.zoomMax + 1 - res.zoomMin, this.numZoomLevels\n
            )\n
        }, true);\n
    },\n
\n
    /**\n
     * Method: getURL\n
     *\n
     * Paramters:\n
     * bounds - {<OpenLayers.Bounds>}\n
     */\n
    getURL: function(bounds) {\n
        if (!this.url) {\n
            return;\n
        }\n
        var xyz = this.getXYZ(bounds), x = xyz.x, y = xyz.y, z = xyz.z;\n
        var quadDigits = [];\n
        for (var i = z; i > 0; --i) {\n
            var digit = \'0\';\n
            var mask = 1 << (i - 1);\n
            if ((x & mask) != 0) {\n
                digit++;\n
            }\n
            if ((y & mask) != 0) {\n
                digit++;\n
                digit++;\n
            }\n
            quadDigits.push(digit);\n
        }\n
        var quadKey = quadDigits.join("");\n
        var url = this.selectUrl(\'\' + x + y + z, this.url);\n
\n
        return OpenLayers.String.format(url, {\'quadkey\': quadKey});\n
    },\n
    \n
    /**\n
     * Method: updateAttribution\n
     * Updates the attribution according to the requirements outlined in\n
     * http://gis.638310.n2.nabble.com/Bing-imagery-td5789168.html\n
     */\n
    updateAttribution: function() {\n
        var metadata = this.metadata;\n
        if (!metadata.resourceSets || !this.map || !this.map.center) {\n
            return;\n
        }\n
        var res = metadata.resourceSets[0].resources[0];\n
        var extent = this.map.getExtent().transform(\n
            this.map.getProjectionObject(),\n
            new OpenLayers.Projection("EPSG:4326")\n
        );\n
        var providers = res.imageryProviders,\n
            zoom = OpenLayers.Util.indexOf(this.serverResolutions,\n
                                           this.getServerResolution()),\n
            copyrights = "", provider, i, ii, j, jj, bbox, coverage;\n
        for (i=0,ii=providers.length; i<ii; ++i) {\n
            provider = providers[i];\n
            for (j=0,jj=provider.coverageAreas.length; j<jj; ++j) {\n
                coverage = provider.coverageAreas[j];\n
                // axis order provided is Y,X\n
                bbox = OpenLayers.Bounds.fromArray(coverage.bbox, true);\n
                if (extent.intersectsBounds(bbox) &&\n
                        zoom <= coverage.zoomMax && zoom >= coverage.zoomMin) {\n
                    copyrights += provider.attribution + " ";\n
                }\n
            }\n
        }\n
        this.attribution = OpenLayers.String.format(this.attributionTemplate, {\n
            type: this.type.toLowerCase(),\n
            logo: metadata.brandLogoUri,\n
            copyrights: copyrights\n
        });\n
        this.map && this.map.events.triggerEvent("changelayer", {\n
            layer: this,\n
            property: "attribution"\n
        });\n
    },\n
    \n
    /**\n
     * Method: setMap\n
     */\n
    setMap: function() {\n
        OpenLayers.Layer.XYZ.prototype.setMap.apply(this, arguments);\n
        this.updateAttribution();\n
        this.map.events.register("moveend", this, this.updateAttribution);\n
    },\n
    \n
    /**\n
     * APIMethod: clone\n
     * \n
     * Parameters:\n
     * obj - {Object}\n
     * \n
     * Returns:\n
     * {<OpenLayers.Layer.Bing>} An exact clone of this <OpenLayers.Layer.Bing>\n
     */\n
    clone: function(obj) {\n
        if (obj == null) {\n
            obj = new OpenLayers.Layer.Bing(this.options);\n
        }\n
        //get all additions from superclasses\n
        obj = OpenLayers.Layer.XYZ.prototype.clone.apply(this, [obj]);\n
        // copy/set any non-init, non-simple values here\n
        return obj;\n
    },\n
    \n
    /**\n
     * Method: destroy\n
     */\n
    destroy: function() {\n
        this.map &&\n
            this.map.events.unregister("moveend", this, this.updateAttribution);\n
        OpenLayers.Layer.XYZ.prototype.destroy.apply(this, arguments);\n
    },\n
    \n
    CLASS_NAME: "OpenLayers.Layer.Bing"\n
});\n
\n
/**\n
 * Function: OpenLayers.Layer.Bing.processMetadata\n
 * This function will be bound to an instance, linked to the global scope with\n
 * an id, and called by the JSONP script returned by the API.\n
 *\n
 * Parameters:\n
 * metadata - {Object} metadata as returned by the API\n
 */\n
OpenLayers.Layer.Bing.processMetadata = function(metadata) {\n
    this.metadata = metadata;\n
    this.initLayer();\n
    var script = document.getElementById(this._callbackId);\n
    script.parentNode.removeChild(script);\n
    window[this._callbackId] = undefined; // cannot delete from window in IE\n
    delete this._callbackId;\n
};\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>10513</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

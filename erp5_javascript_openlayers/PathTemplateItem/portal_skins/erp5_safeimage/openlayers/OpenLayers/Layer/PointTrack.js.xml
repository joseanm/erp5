<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.78</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>PointTrack.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Layer/Vector.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Layer.PointTrack\n
 * Vector layer to display ordered point features as a line, creating one\n
 * LineString feature for each pair of two points.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Layer.Vector> \n
 */\n
OpenLayers.Layer.PointTrack = OpenLayers.Class(OpenLayers.Layer.Vector, {\n
  \n
    /**\n
     * APIProperty: dataFrom\n
     *     {<OpenLayers.Layer.PointTrack.TARGET_NODE>} or\n
     *     {<OpenLayers.Layer.PointTrack.SOURCE_NODE>} optional. If the lines\n
     *     should get the data/attributes from one of the two points it is\n
     *     composed of, which one should it be?\n
     */\n
    dataFrom: null,\n
    \n
    /**\n
     * APIProperty: styleFrom\n
     *     {<OpenLayers.Layer.PointTrack.TARGET_NODE>} or\n
     *     {<OpenLayers.Layer.PointTrack.SOURCE_NODE>} optional. If the lines\n
     *     should get the style from one of the two points it is composed of,\n
     *     which one should it be?\n
     */\n
    styleFrom: null,\n
    \n
    /**\n
     * Constructor: OpenLayers.PointTrack\n
     * Constructor for a new OpenLayers.PointTrack instance.\n
     *\n
     * Parameters:\n
     * name     - {String} name of the layer\n
     * options  - {Object} Optional object with properties to tag onto the\n
     *            instance.\n
     */    \n
        \n
    /**\n
     * APIMethod: addNodes\n
     * Adds point features that will be used to create lines from, using point\n
     * pairs. The first point of a pair will be the source node, the second\n
     * will be the target node.\n
     * \n
     * Parameters:\n
     * pointFeatures - {Array(<OpenLayers.Feature>)}\n
     * options - {Object}\n
     * \n
     * Supported options:\n
     * silent - {Boolean} true to suppress (before)feature(s)added events\n
     */\n
    addNodes: function(pointFeatures, options) {\n
        if (pointFeatures.length < 2) {\n
            throw new Error("At least two point features have to be added to " +\n
                            "create a line from");\n
        }\n
        \n
        var lines = new Array(pointFeatures.length-1);\n
        \n
        var pointFeature, startPoint, endPoint;\n
        for(var i=0, len=pointFeatures.length; i<len; i++) {\n
            pointFeature = pointFeatures[i];\n
            endPoint = pointFeature.geometry;\n
            \n
            if (!endPoint) {\n
              var lonlat = pointFeature.lonlat;\n
              endPoint = new OpenLayers.Geometry.Point(lonlat.lon, lonlat.lat);\n
            } else if(endPoint.CLASS_NAME != "OpenLayers.Geometry.Point") {\n
                throw new TypeError("Only features with point geometries are supported.");\n
            }\n
            \n
            if(i > 0) {\n
                var attributes = (this.dataFrom != null) ?\n
                        (pointFeatures[i+this.dataFrom].data ||\n
                                pointFeatures[i+this.dataFrom].attributes) :\n
                        null;\n
                var style = (this.styleFrom != null) ?\n
                        (pointFeatures[i+this.styleFrom].style) :\n
                        null;\n
                var line = new OpenLayers.Geometry.LineString([startPoint,\n
                        endPoint]);\n
                        \n
                lines[i-1] = new OpenLayers.Feature.Vector(line, attributes,\n
                    style);\n
            }\n
            \n
            startPoint = endPoint;\n
        }\n
\n
        this.addFeatures(lines, options);\n
    },\n
    \n
    CLASS_NAME: "OpenLayers.Layer.PointTrack"\n
});\n
\n
/**\n
 * Constant: OpenLayers.Layer.PointTrack.SOURCE_NODE\n
 * {Number} value for <OpenLayers.Layer.PointTrack.dataFrom> and\n
 * <OpenLayers.Layer.PointTrack.styleFrom>\n
 */\n
OpenLayers.Layer.PointTrack.SOURCE_NODE = -1;\n
\n
/**\n
 * Constant: OpenLayers.Layer.PointTrack.TARGET_NODE\n
 * {Number} value for <OpenLayers.Layer.PointTrack.dataFrom> and\n
 * <OpenLayers.Layer.PointTrack.styleFrom>\n
 */\n
OpenLayers.Layer.PointTrack.TARGET_NODE = 0;\n
\n
/**\n
 * Constant: OpenLayers.Layer.PointTrack.dataFrom\n
 * {Object} with the following keys - *deprecated*\n
 * - SOURCE_NODE: take data/attributes from the source node of the line\n
 * - TARGET_NODE: take data/attributes from the target node of the line\n
 */\n
OpenLayers.Layer.PointTrack.dataFrom = {\'SOURCE_NODE\': -1, \'TARGET_NODE\': 0};\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4459</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

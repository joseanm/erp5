<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.78</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>TMS.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
\n
/**\n
 * @requires OpenLayers/Layer/Grid.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Layer.TMS\n
 * Create a layer for accessing tiles from services that conform with the \n
 *     Tile Map Service Specification \n
 *     (http://wiki.osgeo.org/wiki/Tile_Map_Service_Specification).\n
 *\n
 * Example:\n
 * (code)\n
 *     var layer = new OpenLayers.Layer.TMS(\n
 *         "My Layer", // name for display in LayerSwitcher\n
 *         "http://tilecache.osgeo.org/wms-c/Basic.py/", // service endpoint\n
 *         {layername: "basic", type: "png"} // required properties\n
 *     );\n
 * (end)\n
 * \n
 * Inherits from:\n
 *  - <OpenLayers.Layer.Grid>\n
 */\n
OpenLayers.Layer.TMS = OpenLayers.Class(OpenLayers.Layer.Grid, {\n
\n
    /**\n
     * APIProperty: serviceVersion\n
     * {String} Service version for tile requests.  Default is "1.0.0".\n
     */\n
    serviceVersion: "1.0.0",\n
\n
    /**\n
     * APIProperty: layername\n
     * {String} The identifier for the <TileMap> as advertised by the service.  \n
     *     For example, if the service advertises a <TileMap> with \n
     *    \'href="http://tms.osgeo.org/1.0.0/vmap0"\', the <layername> property \n
     *     would be set to "vmap0".\n
     */\n
    layername: null,\n
\n
    /**\n
     * APIProperty: type\n
     * {String} The format extension corresponding to the requested tile image\n
     *     type.  This is advertised in a <TileFormat> element as the \n
     *     "extension" attribute.  For example, if the service advertises a \n
     *     <TileMap> with <TileFormat width="256" height="256" mime-type="image/jpeg" extension="jpg" />,\n
     *     the <type> property would be set to "jpg".\n
     */\n
    type: null,\n
\n
    /**\n
     * APIProperty: isBaseLayer\n
     * {Boolean} Make this layer a base layer.  Default is true.  Set false to\n
     *     use the layer as an overlay.\n
     */\n
    isBaseLayer: true,\n
\n
    /**\n
     * APIProperty: tileOrigin\n
     * {<OpenLayers.LonLat>} Optional origin for aligning the grid of tiles.\n
     *     If provided, requests for tiles at all resolutions will be aligned\n
     *     with this location (no tiles shall overlap this location).  If\n
     *     not provided, the grid of tiles will be aligned with the bottom-left\n
     *     corner of the map\'s <maxExtent>.  Default is ``null``.\n
     *\n
     * Example:\n
     * (code)\n
     *     var layer = new OpenLayers.Layer.TMS(\n
     *         "My Layer",\n
     *         "http://tilecache.osgeo.org/wms-c/Basic.py/",\n
     *         {\n
     *             layername: "basic", \n
     *             type: "png",\n
     *             // set if different than the bottom left of map.maxExtent\n
     *             tileOrigin: new OpenLayers.LonLat(-180, -90)\n
     *         }\n
     *     );\n
     * (end)\n
     */\n
    tileOrigin: null,\n
\n
    /**\n
     * APIProperty: serverResolutions\n
     * {Array} A list of all resolutions available on the server.  Only set this\n
     *     property if the map resolutions differ from the server. This\n
     *     property serves two purposes. (a) <serverResolutions> can include\n
     *     resolutions that the server supports and that you don\'t want to\n
     *     provide with this layer; you can also look at <zoomOffset>, which is\n
     *     an alternative to <serverResolutions> for that specific purpose.\n
     *     (b) The map can work with resolutions that aren\'t supported by\n
     *     the server, i.e. that aren\'t in <serverResolutions>. When the\n
     *     map is displayed in such a resolution data for the closest\n
     *     server-supported resolution is loaded and the layer div is\n
     *     stretched as necessary.\n
     */\n
    serverResolutions: null,\n
\n
    /**\n
     * APIProperty: zoomOffset\n
     * {Number} If your cache has more zoom levels than you want to provide\n
     *     access to with this layer, supply a zoomOffset.  This zoom offset\n
     *     is added to the current map zoom level to determine the level\n
     *     for a requested tile.  For example, if you supply a zoomOffset\n
     *     of 3, when the map is at the zoom 0, tiles will be requested from\n
     *     level 3 of your cache.  Default is 0 (assumes cache level and map\n
     *     zoom are equivalent).  Using <zoomOffset> is an alternative to\n
     *     setting <serverResolutions> if you only want to expose a subset\n
     *     of the server resolutions.\n
     */\n
    zoomOffset: 0,\n
    \n
    /**\n
     * Constructor: OpenLayers.Layer.TMS\n
     * \n
     * Parameters:\n
     * name - {String} Title to be displayed in a <OpenLayers.Control.LayerSwitcher>\n
     * url - {String} Service endpoint (without the version number).  E.g.\n
     *     "http://tms.osgeo.org/".\n
     * options - {Object} Additional properties to be set on the layer.  The\n
     *     <layername> and <type> properties must be set here.\n
     */\n
    initialize: function(name, url, options) {\n
        var newArguments = [];\n
        newArguments.push(name, url, {}, options);\n
        OpenLayers.Layer.Grid.prototype.initialize.apply(this, newArguments);\n
    },    \n
\n
    /**\n
     * APIMethod: clone\n
     * Create a complete copy of this layer.\n
     *\n
     * Parameters:\n
     * obj - {Object} Should only be provided by subclasses that call this\n
     *     method.\n
     * \n
     * Returns:\n
     * {<OpenLayers.Layer.TMS>} An exact clone of this <OpenLayers.Layer.TMS>\n
     */\n
    clone: function (obj) {\n
        \n
        if (obj == null) {\n
            obj = new OpenLayers.Layer.TMS(this.name,\n
                                           this.url,\n
                                           this.getOptions());\n
        }\n
\n
        //get all additions from superclasses\n
        obj = OpenLayers.Layer.Grid.prototype.clone.apply(this, [obj]);\n
\n
        // copy/set any non-init, non-simple values here\n
\n
        return obj;\n
    },    \n
    \n
    /**\n
     * Method: getURL\n
     * \n
     * Parameters:\n
     * bounds - {<OpenLayers.Bounds>}\n
     * \n
     * Returns:\n
     * {String} A string with the layer\'s url and parameters and also the \n
     *          passed-in bounds and appropriate tile size specified as \n
     *          parameters\n
     */\n
    getURL: function (bounds) {\n
        bounds = this.adjustBounds(bounds);\n
        var res = this.getServerResolution();\n
        var x = Math.round((bounds.left - this.tileOrigin.lon) / (res * this.tileSize.w));\n
        var y = Math.round((bounds.bottom - this.tileOrigin.lat) / (res * this.tileSize.h));\n
        var z = this.getServerZoom();\n
        var path = this.serviceVersion + "/" + this.layername + "/" + z + "/" + x + "/" + y + "." + this.type; \n
        var url = this.url;\n
        if (OpenLayers.Util.isArray(url)) {\n
            url = this.selectUrl(path, url);\n
        }\n
        return url + path;\n
    },\n
\n
    /** \n
     * Method: setMap\n
     * When the layer is added to a map, then we can fetch our origin \n
     *    (if we don\'t have one.) \n
     * \n
     * Parameters:\n
     * map - {<OpenLayers.Map>}\n
     */\n
    setMap: function(map) {\n
        OpenLayers.Layer.Grid.prototype.setMap.apply(this, arguments);\n
        if (!this.tileOrigin) { \n
            this.tileOrigin = new OpenLayers.LonLat(this.map.maxExtent.left,\n
                                                this.map.maxExtent.bottom);\n
        }                                       \n
    },\n
\n
    CLASS_NAME: "OpenLayers.Layer.TMS"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>7441</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

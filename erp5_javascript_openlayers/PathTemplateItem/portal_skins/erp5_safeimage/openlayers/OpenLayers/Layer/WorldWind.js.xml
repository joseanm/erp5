<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.78</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>WorldWind.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
\n
/**\n
 * @requires OpenLayers/Layer/Grid.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Layer.WorldWind\n
 * \n
 * Inherits from:\n
 *  - <OpenLayers.Layer.Grid>\n
 */\n
OpenLayers.Layer.WorldWind = OpenLayers.Class(OpenLayers.Layer.Grid, {\n
    \n
    DEFAULT_PARAMS: {\n
    },\n
\n
    /**\n
     * APIProperty: isBaseLayer\n
     * {Boolean} WorldWind layer is a base layer by default.\n
     */\n
    isBaseLayer: true,\n
\n
    /** \n
     * APIProperty: lzd\n
     * {Float} LevelZeroTileSizeDegrees\n
     */\n
    lzd: null,\n
\n
    /**\n
     * APIProperty: zoomLevels\n
     * {Integer} Number of zoom levels.\n
     */\n
    zoomLevels: null,\n
    \n
    /**\n
     * Constructor: OpenLayers.Layer.WorldWind\n
     * \n
     * Parameters:\n
     * name - {String} Name of Layer\n
     * url - {String} Base URL  \n
     * lzd - {Float} Level zero tile size degrees \n
     * zoomLevels - {Integer} number of zoom levels\n
     * params - {Object} additional parameters\n
     * options - {Object} additional options\n
     */\n
    initialize: function(name, url, lzd, zoomLevels, params, options) {\n
        this.lzd = lzd;\n
        this.zoomLevels = zoomLevels;\n
        var newArguments = [];\n
        newArguments.push(name, url, params, options);\n
        OpenLayers.Layer.Grid.prototype.initialize.apply(this, newArguments);\n
        this.params = OpenLayers.Util.applyDefaults(\n
            this.params, this.DEFAULT_PARAMS\n
        );\n
    },\n
\n
    /**\n
     * Method: getZoom\n
     * Convert map zoom to WW zoom.\n
     */\n
    getZoom: function () {\n
        var zoom = this.map.getZoom();\n
        var extent = this.map.getMaxExtent();\n
        zoom = zoom - Math.log(this.maxResolution / (this.lzd/512))/Math.log(2);\n
        return zoom;\n
    },\n
\n
    /**\n
     * Method: getURL\n
     *\n
     * Parameters:\n
     * bounds - {<OpenLayers.Bounds>} \n
     *\n
     * Returns:\n
     * {String} A string with the layer\'s url and parameters and also the \n
     *           passed-in bounds and appropriate tile size specified as \n
     *           parameters\n
     */\n
    getURL: function (bounds) {\n
        bounds = this.adjustBounds(bounds);\n
        var zoom = this.getZoom();\n
        var extent = this.map.getMaxExtent();\n
        var deg = this.lzd/Math.pow(2,this.getZoom());\n
        var x = Math.floor((bounds.left - extent.left)/deg);\n
        var y = Math.floor((bounds.bottom - extent.bottom)/deg);\n
        if (this.map.getResolution() <= (this.lzd/512)\n
            && this.getZoom() <= this.zoomLevels) {\n
            return this.getFullRequestString(\n
              { L: zoom, \n
                X: x,\n
                Y: y\n
              });\n
        } else {\n
            return OpenLayers.Util.getImageLocation("blank.gif");\n
        }\n
\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Layer.WorldWind"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2948</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.78</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>WMS.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
\n
/**\n
 * @requires OpenLayers/Layer/Grid.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Layer.WMS\n
 * Instances of OpenLayers.Layer.WMS are used to display data from OGC Web\n
 *     Mapping Services. Create a new WMS layer with the <OpenLayers.Layer.WMS>\n
 *     constructor.\n
 * \n
 * Inherits from:\n
 *  - <OpenLayers.Layer.Grid>\n
 */\n
OpenLayers.Layer.WMS = OpenLayers.Class(OpenLayers.Layer.Grid, {\n
\n
    /**\n
     * Constant: DEFAULT_PARAMS\n
     * {Object} Hashtable of default parameter key/value pairs \n
     */\n
    DEFAULT_PARAMS: { service: "WMS",\n
                      version: "1.1.1",\n
                      request: "GetMap",\n
                      styles: "",\n
                      format: "image/jpeg"\n
                     },\n
    \n
    /**\n
     * APIProperty: isBaseLayer\n
     * {Boolean} Default is true for WMS layer\n
     */\n
    isBaseLayer: true,\n
    \n
    /**\n
     * APIProperty: encodeBBOX\n
     * {Boolean} Should the BBOX commas be encoded? The WMS spec says \'no\', \n
     * but some services want it that way. Default false.\n
     */\n
    encodeBBOX: false,\n
    \n
    /** \n
     * APIProperty: noMagic \n
     * {Boolean} If true, the image format will not be automagicaly switched \n
     *     from image/jpeg to image/png or image/gif when using \n
     *     TRANSPARENT=TRUE. Also isBaseLayer will not changed by the  \n
     *     constructor. Default false. \n
     */ \n
    noMagic: false,\n
    \n
    /**\n
     * Property: yx\n
     * {Object} Keys in this object are EPSG codes for which the axis order\n
     *     is to be reversed (yx instead of xy, LatLon instead of LonLat), with\n
     *     true as value. This is only relevant for WMS versions >= 1.3.0, and\n
     *     only if yx is not set in <OpenLayers.Projection.defaults> for the\n
     *     used projection.\n
     */\n
    yx: {},\n
    \n
    /**\n
     * Constructor: OpenLayers.Layer.WMS\n
     * Create a new WMS layer object\n
     *\n
     * Examples:\n
     *\n
     * The code below creates a simple WMS layer using the image/jpeg format.\n
     * (code)\n
     * var wms = new OpenLayers.Layer.WMS("NASA Global Mosaic",\n
     *                                    "http://wms.jpl.nasa.gov/wms.cgi", \n
     *                                    {layers: "modis,global_mosaic"});\n
     * (end)\n
     * Note the 3rd argument (params). Properties added to this object will be\n
     * added to the WMS GetMap requests used for this layer\'s tiles. The only\n
     * mandatory parameter is "layers". Other common WMS params include\n
     * "transparent", "styles" and "format". Note that the "srs" param will\n
     * always be ignored. Instead, it will be derived from the baseLayer\'s or\n
     * map\'s projection.\n
     *\n
     * The code below creates a transparent WMS layer with additional options.\n
     * (code)\n
     * var wms = new OpenLayers.Layer.WMS("NASA Global Mosaic",\n
     *                                    "http://wms.jpl.nasa.gov/wms.cgi", \n
     *                                    {\n
     *                                        layers: "modis,global_mosaic",\n
     *                                        transparent: true\n
     *                                    }, {\n
     *                                        opacity: 0.5,\n
     *                                        singleTile: true\n
     *                                    });\n
     * (end)\n
     * Note that by default, a WMS layer is configured as baseLayer. Setting\n
     * the "transparent" param to true will apply some magic (see <noMagic>).\n
     * The default image format changes from image/jpeg to image/png, and the\n
     * layer is not configured as baseLayer.\n
     *\n
     * Parameters:\n
     * name - {String} A name for the layer\n
     * url - {String} Base url for the WMS\n
     *                (e.g. http://wms.jpl.nasa.gov/wms.cgi)\n
     * params - {Object} An object with key/value pairs representing the\n
     *                   GetMap query string parameters and parameter values.\n
     * options - {Object} Hashtable of extra options to tag onto the layer.\n
     *     These options include all properties listed above, plus the ones\n
     *     inherited from superclasses.\n
     */\n
    initialize: function(name, url, params, options) {\n
        var newArguments = [];\n
        //uppercase params\n
        params = OpenLayers.Util.upperCaseObject(params);\n
        if (parseFloat(params.VERSION) >= 1.3 && !params.EXCEPTIONS) {\n
            params.EXCEPTIONS = "INIMAGE";\n
        } \n
        newArguments.push(name, url, params, options);\n
        OpenLayers.Layer.Grid.prototype.initialize.apply(this, newArguments);\n
        OpenLayers.Util.applyDefaults(\n
                       this.params, \n
                       OpenLayers.Util.upperCaseObject(this.DEFAULT_PARAMS)\n
                       );\n
\n
\n
        //layer is transparent        \n
        if (!this.noMagic && this.params.TRANSPARENT && \n
            this.params.TRANSPARENT.toString().toLowerCase() == "true") {\n
            \n
            // unless explicitly set in options, make layer an overlay\n
            if ( (options == null) || (!options.isBaseLayer) ) {\n
                this.isBaseLayer = false;\n
            } \n
            \n
            // jpegs can never be transparent, so intelligently switch the \n
            //  format, depending on the browser\'s capabilities\n
            if (this.params.FORMAT == "image/jpeg") {\n
                this.params.FORMAT = OpenLayers.Util.alphaHack() ? "image/gif"\n
                                                                 : "image/png";\n
            }\n
        }\n
\n
    },    \n
\n
    /**\n
     * Method: clone\n
     * Create a clone of this layer\n
     *\n
     * Returns:\n
     * {<OpenLayers.Layer.WMS>} An exact clone of this layer\n
     */\n
    clone: function (obj) {\n
        \n
        if (obj == null) {\n
            obj = new OpenLayers.Layer.WMS(this.name,\n
                                           this.url,\n
                                           this.params,\n
                                           this.getOptions());\n
        }\n
\n
        //get all additions from superclasses\n
        obj = OpenLayers.Layer.Grid.prototype.clone.apply(this, [obj]);\n
\n
        // copy/set any non-init, non-simple values here\n
\n
        return obj;\n
    },    \n
    \n
    /**\n
     * APIMethod: reverseAxisOrder\n
     * Returns true if the axis order is reversed for the WMS version and\n
     * projection of the layer.\n
     * \n
     * Returns:\n
     * {Boolean} true if the axis order is reversed, false otherwise.\n
     */\n
    reverseAxisOrder: function() {\n
        var projCode = this.projection.getCode();\n
        return parseFloat(this.params.VERSION) >= 1.3 && \n
            !!(this.yx[projCode] || OpenLayers.Projection.defaults[projCode].yx);\n
    },\n
    \n
    /**\n
     * Method: getURL\n
     * Return a GetMap query string for this layer\n
     *\n
     * Parameters:\n
     * bounds - {<OpenLayers.Bounds>} A bounds representing the bbox for the\n
     *                                request.\n
     *\n
     * Returns:\n
     * {String} A string with the layer\'s url and parameters and also the\n
     *          passed-in bounds and appropriate tile size specified as \n
     *          parameters.\n
     */\n
    getURL: function (bounds) {\n
        bounds = this.adjustBounds(bounds);\n
        \n
        var imageSize = this.getImageSize();\n
        var newParams = {};\n
        // WMS 1.3 introduced axis order\n
        var reverseAxisOrder = this.reverseAxisOrder();\n
        newParams.BBOX = this.encodeBBOX ?\n
            bounds.toBBOX(null, reverseAxisOrder) :\n
            bounds.toArray(reverseAxisOrder);\n
        newParams.WIDTH = imageSize.w;\n
        newParams.HEIGHT = imageSize.h;\n
        var requestString = this.getFullRequestString(newParams);\n
        return requestString;\n
    },\n
\n
    /**\n
     * APIMethod: mergeNewParams\n
     * Catch changeParams and uppercase the new params to be merged in\n
     *     before calling changeParams on the super class.\n
     * \n
     *     Once params have been changed, the tiles will be reloaded with\n
     *     the new parameters.\n
     * \n
     * Parameters:\n
     * newParams - {Object} Hashtable of new params to use\n
     */\n
    mergeNewParams:function(newParams) {\n
        var upperParams = OpenLayers.Util.upperCaseObject(newParams);\n
        var newArguments = [upperParams];\n
        return OpenLayers.Layer.Grid.prototype.mergeNewParams.apply(this, \n
                                                             newArguments);\n
    },\n
\n
    /** \n
     * APIMethod: getFullRequestString\n
     * Combine the layer\'s url with its params and these newParams. \n
     *   \n
     *     Add the SRS parameter from projection -- this is probably\n
     *     more eloquently done via a setProjection() method, but this \n
     *     works for now and always.\n
     *\n
     * Parameters:\n
     * newParams - {Object}\n
     * altUrl - {String} Use this as the url instead of the layer\'s url\n
     * \n
     * Returns:\n
     * {String} \n
     */\n
    getFullRequestString:function(newParams, altUrl) {\n
        var mapProjection = this.map.getProjectionObject();\n
        var projectionCode = this.projection && this.projection.equals(mapProjection) ?\n
            this.projection.getCode() :\n
            mapProjection.getCode();\n
        var value = (projectionCode == "none") ? null : projectionCode;\n
        if (parseFloat(this.params.VERSION) >= 1.3) {\n
            this.params.CRS = value;\n
        } else {\n
            this.params.SRS = value;\n
        }\n
        \n
        if (typeof this.params.TRANSPARENT == "boolean") {\n
            newParams.TRANSPARENT = this.params.TRANSPARENT ? "TRUE" : "FALSE";\n
        }\n
\n
        return OpenLayers.Layer.Grid.prototype.getFullRequestString.apply(\n
                                                    this, arguments);\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Layer.WMS"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>9926</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

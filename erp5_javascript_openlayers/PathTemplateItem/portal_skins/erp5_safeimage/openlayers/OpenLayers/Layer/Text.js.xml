<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.79</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Text.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
\n
/**\n
 * @requires OpenLayers/Layer/Markers.js\n
 * @requires OpenLayers/Format/Text.js\n
 * @requires OpenLayers/Request/XMLHttpRequest.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Layer.Text\n
 * This layer creates markers given data in a text file.  The <location>\n
 *     property of the layer (specified as a property of the options argument\n
 *     in the <OpenLayers.Layer.Text> constructor) points to a tab delimited\n
 *     file with data used to create markers.\n
 *\n
 * The first row of the data file should be a header line with the column names\n
 *     of the data. Each column should be delimited by a tab space. The\n
 *     possible columns are:\n
 *      - *point* lat,lon of the point where a marker is to be placed\n
 *      - *lat*  Latitude of the point where a marker is to be placed\n
 *      - *lon*  Longitude of the point where a marker is to be placed\n
 *      - *icon* or *image* URL of marker icon to use.\n
 *      - *iconSize* Size of Icon to use.\n
 *      - *iconOffset* Where the top-left corner of the icon is to be placed\n
 *            relative to the latitude and longitude of the point.\n
 *      - *title* The text of the \'title\' is placed inside an \'h2\' marker\n
 *            inside a popup, which opens when the marker is clicked.\n
 *      - *description* The text of the \'description\' is placed below the h2\n
 *            in the popup. this can be plain text or HTML.\n
 *\n
 * Example text file:\n
 * (code)\n
 * lat\tlon\ttitle\tdescription\ticonSize\ticonOffset\ticon\n
 * 10\t20\ttitle\tdescription\t21,25\t\t-10,-25\t\thttp://www.openlayers.org/dev/img/marker.png\n
 * (end)\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Layer.Markers>\n
 */\n
OpenLayers.Layer.Text = OpenLayers.Class(OpenLayers.Layer.Markers, {\n
\n
    /**\n
     * APIProperty: location \n
     * {String} URL of text file.  Must be specified in the "options" argument\n
     *   of the constructor. Can not be changed once passed in. \n
     */\n
    location:null,\n
\n
    /** \n
     * Property: features\n
     * {Array(<OpenLayers.Feature>)} \n
     */\n
    features: null,\n
    \n
    /**\n
     * APIProperty: formatOptions\n
     * {Object} Hash of options which should be passed to the format when it is\n
     * created. Must be passed in the constructor.\n
     */\n
    formatOptions: null, \n
\n
    /** \n
     * Property: selectedFeature\n
     * {<OpenLayers.Feature>}\n
     */\n
    selectedFeature: null,\n
\n
    /**\n
     * Constructor: OpenLayers.Layer.Text\n
     * Create a text layer.\n
     * \n
     * Parameters:\n
     * name - {String} \n
     * options - {Object} Object with properties to be set on the layer.\n
     *     Must include <location> property.\n
     */\n
    initialize: function(name, options) {\n
        OpenLayers.Layer.Markers.prototype.initialize.apply(this, arguments);\n
        this.features = [];\n
    },\n
\n
    /**\n
     * APIMethod: destroy \n
     */\n
    destroy: function() {\n
        // Warning: Layer.Markers.destroy() must be called prior to calling\n
        // clearFeatures() here, otherwise we leak memory. Indeed, if\n
        // Layer.Markers.destroy() is called after clearFeatures(), it won\'t be\n
        // able to remove the marker image elements from the layer\'s div since\n
        // the markers will have been destroyed by clearFeatures().\n
        OpenLayers.Layer.Markers.prototype.destroy.apply(this, arguments);\n
        this.clearFeatures();\n
        this.features = null;\n
    },\n
    \n
    /**\n
     * Method: loadText\n
     * Start the load of the Text data. Don\'t do this when we first add the layer,\n
     * since we may not be visible at any point, and it would therefore be a waste.\n
     */\n
    loadText: function() {\n
        if (!this.loaded) {\n
            if (this.location != null) {\n
\n
                var onFail = function(e) {\n
                    this.events.triggerEvent("loadend");\n
                };\n
\n
                this.events.triggerEvent("loadstart");\n
                OpenLayers.Request.GET({\n
                    url: this.location,\n
                    success: this.parseData,\n
                    failure: onFail,\n
                    scope: this\n
                });\n
                this.loaded = true;\n
            }\n
        }    \n
    },    \n
    \n
    /**\n
     * Method: moveTo\n
     * If layer is visible and Text has not been loaded, load Text. \n
     * \n
     * Parameters:\n
     * bounds - {Object} \n
     * zoomChanged - {Object} \n
     * minor - {Object} \n
     */\n
    moveTo:function(bounds, zoomChanged, minor) {\n
        OpenLayers.Layer.Markers.prototype.moveTo.apply(this, arguments);\n
        if(this.visibility && !this.loaded){\n
            this.loadText();\n
        }\n
    },\n
    \n
    /**\n
     * Method: parseData\n
     *\n
     * Parameters:\n
     * ajaxRequest - {<OpenLayers.Request.XMLHttpRequest>} \n
     */\n
    parseData: function(ajaxRequest) {\n
        var text = ajaxRequest.responseText;\n
        \n
        var options = {};\n
        \n
        OpenLayers.Util.extend(options, this.formatOptions);\n
        \n
        if (this.map && !this.projection.equals(this.map.getProjectionObject())) {\n
            options.externalProjection = this.projection;\n
            options.internalProjection = this.map.getProjectionObject();\n
        }    \n
        \n
        var parser = new OpenLayers.Format.Text(options);\n
        var features = parser.read(text);\n
        for (var i=0, len=features.length; i<len; i++) {\n
            var data = {};\n
            var feature = features[i];\n
            var location;\n
            var iconSize, iconOffset;\n
            \n
            location = new OpenLayers.LonLat(feature.geometry.x, \n
                                             feature.geometry.y);\n
            \n
            if (feature.style.graphicWidth \n
                && feature.style.graphicHeight) {\n
                iconSize = new OpenLayers.Size(\n
                    feature.style.graphicWidth,\n
                    feature.style.graphicHeight);\n
            }        \n
            \n
            // FIXME: At the moment, we only use this if we have an \n
            // externalGraphic, because icon has no setOffset API Method.\n
            /**\n
             * FIXME FIRST!!\n
             * The Text format does all sorts of parseFloating\n
             * The result of a parseFloat for a bogus string is NaN.  That\n
             * means the three possible values here are undefined, NaN, or a\n
             * number.  The previous check was an identity check for null.  This\n
             * means it was failing for all undefined or NaN.  A slightly better\n
             * check is for undefined.  An even better check is to see if the\n
             * value is a number (see #1441).\n
             */\n
            if (feature.style.graphicXOffset !== undefined\n
                && feature.style.graphicYOffset !== undefined) {\n
                iconOffset = new OpenLayers.Pixel(\n
                    feature.style.graphicXOffset, \n
                    feature.style.graphicYOffset);\n
            }\n
            \n
            if (feature.style.externalGraphic != null) {\n
                data.icon = new OpenLayers.Icon(feature.style.externalGraphic, \n
                                                iconSize, \n
                                                iconOffset);\n
            } else {\n
                data.icon = OpenLayers.Marker.defaultIcon();\n
\n
                //allows for the case where the image url is not \n
                // specified but the size is. use a default icon\n
                // but change the size\n
                if (iconSize != null) {\n
                    data.icon.setSize(iconSize);\n
                }\n
            }\n
            \n
            if ((feature.attributes.title != null) \n
                && (feature.attributes.description != null)) {\n
                data[\'popupContentHTML\'] = \n
                    \'<h2>\'+feature.attributes.title+\'</h2>\' + \n
                    \'<p>\'+feature.attributes.description+\'</p>\';\n
            }\n
            \n
            data[\'overflow\'] = feature.attributes.overflow || "auto"; \n
            \n
            var markerFeature = new OpenLayers.Feature(this, location, data);\n
            this.features.push(markerFeature);\n
            var marker = markerFeature.createMarker();\n
            if ((feature.attributes.title != null) \n
                && (feature.attributes.description != null)) {\n
              marker.events.register(\'click\', markerFeature, this.markerClick);\n
            }\n
            this.addMarker(marker);\n
        }\n
        this.events.triggerEvent("loadend");\n
    },\n
    \n
    /**\n
     * Property: markerClick\n
     * \n
     * Parameters:\n
     * evt - {Event} \n
     *\n
     * Context:\n
     * - {<OpenLayers.Feature>}\n
     */\n
    markerClick: function(evt) {\n
        var sameMarkerClicked = (this == this.layer.selectedFeature);\n
        this.layer.selectedFeature = (!sameMarkerClicked) ? this : null;\n
        for(var i=0, len=this.layer.map.popups.length; i<len; i++) {\n
            this.layer.map.removePopup(this.layer.map.popups[i]);\n
        }\n
        if (!sameMarkerClicked) {\n
            this.layer.map.addPopup(this.createPopup()); \n
        }\n
        OpenLayers.Event.stop(evt);\n
    },\n
\n
    /**\n
     * Method: clearFeatures\n
     */\n
    clearFeatures: function() {\n
        if (this.features != null) {\n
            while(this.features.length > 0) {\n
                var feature = this.features[0];\n
                OpenLayers.Util.removeItem(this.features, feature);\n
                feature.destroy();\n
            }\n
        }        \n
    },\n
\n
    CLASS_NAME: "OpenLayers.Layer.Text"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>9613</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

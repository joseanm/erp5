<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.79</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>UTFGrid.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Layer/XYZ.js\n
 * @requires OpenLayers/Tile/UTFGrid.js\n
 */\n
\n
/** \n
 * Class: OpenLayers.Layer.UTFGrid\n
 * This Layer reads from UTFGrid tiled data sources.  Since UTFGrids are \n
 * essentially JSON-based ASCII art with attached attributes, they are not \n
 * visibly rendered.  In order to use them in the map, you must add a \n
 * <OpenLayers.Control.UTFGrid> ontrol as well.\n
 *\n
 * Example:\n
 *\n
 * (start code)\n
 * var world_utfgrid = new OpenLayers.Layer.UTFGrid({\n
 *     url: "/tiles/world_utfgrid/${z}/${x}/${y}.json",\n
 *     utfgridResolution: 4,\n
 *     displayInLayerSwitcher: false\n
 * );\n
 * map.addLayer(world_utfgrid);\n
 * \n
 * var control = new OpenLayers.Control.UTFGrid({\n
 *     layers: [world_utfgrid],\n
 *     handlerMode: \'move\',\n
 *     callback: function(dataLookup) {\n
 *         // do something with returned data\n
 *     }\n
 * })\n
 * (end code)\n
 *\n
 * \n
 * Inherits from:\n
 *  - <OpenLayers.Layer.XYZ>\n
 */\n
OpenLayers.Layer.UTFGrid = OpenLayers.Class(OpenLayers.Layer.XYZ, {\n
    \n
    /**\n
     * APIProperty: isBaseLayer\n
     * Default is true, as this is designed to be a base tile source. \n
     */\n
    isBaseLayer: false,\n
    \n
    /**\n
     * APIProperty: projection\n
     * {<OpenLayers.Projection>}\n
     * Source projection for the UTFGrids.  Default is "EPSG:900913".\n
     */\n
    projection: new OpenLayers.Projection("EPSG:900913"),\n
\n
    /**\n
     * Property: useJSONP\n
     * {Boolean}\n
     * Should we use a JSONP script approach instead of a standard AJAX call?\n
     *\n
     * Set to true for using utfgrids from another server. \n
     * Avoids same-domain policy restrictions. \n
     * Note that this only works if the server accepts \n
     * the callback GET parameter and dynamically \n
     * wraps the returned json in a function call.\n
     * \n
     * Default is false\n
     */\n
    useJSONP: false,\n
    \n
    /**\n
     * APIProperty: url\n
     * {String}\n
     * URL tempate for UTFGrid tiles.  Include x, y, and z parameters.\n
     * E.g. "/tiles/${z}/${x}/${y}.json"\n
     */\n
\n
    /**\n
     * APIProperty: utfgridResolution\n
     * {Number}\n
     * Ratio of the pixel width to the width of a UTFGrid data point.  If an \n
     *     entry in the grid represents a 4x4 block of pixels, the \n
     *     utfgridResolution would be 4.  Default is 2 (specified in \n
     *     <OpenLayers.Tile.UTFGrid>).\n
     */\n
\n
    /**\n
     * Property: tileClass\n
     * {<OpenLayers.Tile>} The tile class to use for this layer.\n
     *     Defaults is <OpenLayers.Tile.UTFGrid>.\n
     */\n
    tileClass: OpenLayers.Tile.UTFGrid,\n
\n
    /**\n
     * Constructor: OpenLayers.Layer.UTFGrid\n
     * Create a new UTFGrid layer.\n
     *\n
     * Parameters:\n
     * config - {Object} Configuration properties for the layer.\n
     *\n
     * Required configuration properties:\n
     * url - {String} The url template for UTFGrid tiles.  See the <url> property.\n
     */\n
    initialize: function(options) {\n
        OpenLayers.Layer.Grid.prototype.initialize.apply(\n
            this, [options.name, options.url, {}, options]\n
        );\n
        this.tileOptions = OpenLayers.Util.extend({\n
            utfgridResolution: this.utfgridResolution\n
        }, this.tileOptions);\n
    },\n
    \n
    /**\n
     * APIMethod: clone\n
     * Create a clone of this layer\n
     *\n
     * Parameters:\n
     * obj - {Object} Only used by a subclass of this layer.\n
     * \n
     * Returns:\n
     * {<OpenLayers.Layer.UTFGrid>} An exact clone of this OpenLayers.Layer.UTFGrid\n
     */\n
    clone: function (obj) {\n
        if (obj == null) {\n
            obj = new OpenLayers.Layer.UTFGrid(this.getOptions());\n
        }\n
\n
        // get all additions from superclasses\n
        obj = OpenLayers.Layer.Grid.prototype.clone.apply(this, [obj]);\n
\n
        return obj;\n
    },\n
\n
    /**\n
     * APIProperty: getFeatureInfo\n
     * Get details about a feature associated with a map location.  The object\n
     *     returned will have id and data properties.  If the given location\n
     *     doesn\'t correspond to a feature, null will be returned.\n
     *\n
     * Parameters:\n
     * location - {<OpenLayers.LonLat>} map location\n
     *\n
     * Returns:\n
     * {Object} Object representing the feature id and UTFGrid data \n
     *     corresponding to the given map location.  Returns null if the given\n
     *     location doesn\'t hit a feature.\n
     */\n
    getFeatureInfo: function(location) {\n
        var info = null;\n
        var tileInfo = this.getTileData(location);\n
        if (tileInfo.tile) {\n
            info = tileInfo.tile.getFeatureInfo(tileInfo.i, tileInfo.j);\n
        }\n
        return info;\n
    },\n
\n
    /**\n
     * APIMethod: getFeatureId\n
     * Get the identifier for the feature associated with a map location.\n
     *\n
     * Parameters:\n
     * location - {<OpenLayers.LonLat>} map location\n
     *\n
     * Returns:\n
     * {String} The feature identifier corresponding to the given map location.\n
     *     Returns null if the location doesn\'t hit a feature.\n
     */\n
    getFeatureId: function(location) {\n
        var id = null;\n
        var info = this.getTileData(location);\n
        if (info.tile) {\n
            id = info.tile.getFeatureId(info.i, info.j);\n
        }\n
        return id;\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Layer.UTFGrid"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5425</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

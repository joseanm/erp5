<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.95</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>v1_1.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Format/WMSCapabilities/v1.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.WMSCapabilities.v1_1\n
 * Abstract class not to be instantiated directly.\n
 * \n
 * Inherits from:\n
 *  - <OpenLayers.Format.WMSCapabilities.v1>\n
 */\n
OpenLayers.Format.WMSCapabilities.v1_1 = OpenLayers.Class(\n
    OpenLayers.Format.WMSCapabilities.v1, {\n
    \n
    /**\n
     * Property: readers\n
     * Contains public functions, grouped by namespace prefix, that will\n
     *     be applied when a namespaced node is found matching the function\n
     *     name.  The function will be applied in the scope of this parser\n
     *     with two arguments: the node being read and a context object passed\n
     *     from the parent.\n
     */\n
    readers: {\n
        "wms": OpenLayers.Util.applyDefaults({\n
            "WMT_MS_Capabilities": function(node, obj) {\n
                this.readChildNodes(node, obj);\n
            },\n
            "Keyword": function(node, obj) {\n
                if (obj.keywords) {\n
                    obj.keywords.push(this.getChildValue(node));\n
                }\n
            },\n
            "DescribeLayer": function(node, obj) {\n
                obj.describelayer = {formats: []};\n
                this.readChildNodes(node, obj.describelayer);\n
            },\n
            "GetLegendGraphic": function(node, obj) {\n
                obj.getlegendgraphic = {formats: []};\n
                this.readChildNodes(node, obj.getlegendgraphic);\n
            },\n
            "GetStyles": function(node, obj) {\n
                obj.getstyles = {formats: []};\n
                this.readChildNodes(node, obj.getstyles);\n
            },\n
            "PutStyles": function(node, obj) {\n
                obj.putstyles = {formats: []};\n
                this.readChildNodes(node, obj.putstyles);\n
            },\n
            "UserDefinedSymbolization": function(node, obj) {\n
                var userSymbols = {\n
                    supportSLD: parseInt(node.getAttribute("SupportSLD")) == 1,\n
                    userLayer: parseInt(node.getAttribute("UserLayer")) == 1,\n
                    userStyle: parseInt(node.getAttribute("UserStyle")) == 1,\n
                    remoteWFS: parseInt(node.getAttribute("RemoteWFS")) == 1\n
                };\n
                obj.userSymbols = userSymbols;\n
            },\n
            "LatLonBoundingBox": function(node, obj) {\n
                obj.llbbox = [\n
                    parseFloat(node.getAttribute("minx")),\n
                    parseFloat(node.getAttribute("miny")),\n
                    parseFloat(node.getAttribute("maxx")),\n
                    parseFloat(node.getAttribute("maxy"))\n
                ];\n
            },\n
            "BoundingBox": function(node, obj) {\n
                var bbox = OpenLayers.Format.WMSCapabilities.v1.prototype.readers["wms"].BoundingBox.apply(this, [node, obj]);\n
                bbox.srs  = node.getAttribute("SRS");\n
                obj.bbox[bbox.srs] = bbox;\n
            },\n
            "ScaleHint": function(node, obj) {\n
                var min = node.getAttribute("min");\n
                var max = node.getAttribute("max");\n
                var rad2 = Math.pow(2, 0.5);\n
                var ipm = OpenLayers.INCHES_PER_UNIT["m"];\n
                obj.maxScale = parseFloat(\n
                    ((min / rad2) * ipm * \n
                        OpenLayers.DOTS_PER_INCH).toPrecision(13)\n
                );\n
                obj.minScale = parseFloat(\n
                    ((max / rad2) * ipm * \n
                        OpenLayers.DOTS_PER_INCH).toPrecision(13)\n
                );\n
            },\n
            "Dimension": function(node, obj) {\n
                var name = node.getAttribute("name").toLowerCase();\n
                var dim = {\n
                    name: name,\n
                    units: node.getAttribute("units"),\n
                    unitsymbol: node.getAttribute("unitSymbol")\n
                };\n
                obj.dimensions[dim.name] = dim;\n
            },\n
            "Extent": function(node, obj) {\n
                var name = node.getAttribute("name").toLowerCase();\n
                if (name in obj["dimensions"]) {\n
                    var extent = obj.dimensions[name];\n
                    extent.nearestVal = \n
                        node.getAttribute("nearestValue") === "1";\n
                    extent.multipleVal = \n
                        node.getAttribute("multipleValues") === "1";\n
                    extent.current = node.getAttribute("current") === "1";\n
                    extent["default"] = node.getAttribute("default") || "";\n
                    var values = this.getChildValue(node);\n
                    extent.values = values.split(",");\n
                }\n
                }\n
        }, OpenLayers.Format.WMSCapabilities.v1.prototype.readers["wms"])\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Format.WMSCapabilities.v1_1" \n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5037</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

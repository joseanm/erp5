<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.95</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>v1.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Format/WMSCapabilities.js\n
 * @requires OpenLayers/Format/OGCExceptionReport.js\n
 * @requires OpenLayers/Format/XML.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.WMSCapabilities.v1\n
 * Abstract class not to be instantiated directly. Creates\n
 * the common parts for both WMS 1.1.X and WMS 1.3.X.\n
 * \n
 * Inherits from:\n
 *  - <OpenLayers.Format.XML>\n
 */\n
OpenLayers.Format.WMSCapabilities.v1 = OpenLayers.Class(\n
    OpenLayers.Format.XML, {\n
    \n
    /**\n
     * Property: namespaces\n
     * {Object} Mapping of namespace aliases to namespace URIs.\n
     */\n
    namespaces: {\n
        wms: "http://www.opengis.net/wms",\n
        xlink: "http://www.w3.org/1999/xlink",\n
        xsi: "http://www.w3.org/2001/XMLSchema-instance"\n
    },\n
\n
    /**\n
     * Property: defaultPrefix\n
     */\n
    defaultPrefix: "wms",\n
    \n
    /**\n
     * Constructor: OpenLayers.Format.WMSCapabilities.v1\n
     * Create an instance of one of the subclasses.\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object whose properties will be set on\n
     *     this instance.\n
     */\n
\n
    /**\n
     * APIMethod: read\n
     * Read capabilities data from a string, and return a list of layers. \n
     * \n
     * Parameters: \n
     * data - {String} or {DOMElement} data to read/parse.\n
     *\n
     * Returns:\n
     * {Array} List of named layers.\n
     */\n
    read: function(data) {\n
        if(typeof data == "string") {\n
            data = OpenLayers.Format.XML.prototype.read.apply(this, [data]);\n
        }\n
        var raw = data;\n
        if(data && data.nodeType == 9) {\n
            data = data.documentElement;\n
        }\n
        var capabilities = {};\n
        this.readNode(data, capabilities);\n
        if (capabilities.service === undefined) {\n
            // an exception must have occurred, so parse it\n
            var parser = new OpenLayers.Format.OGCExceptionReport();\n
            capabilities.error = parser.read(raw);\n
        }\n
        return capabilities;\n
    },\n
\n
    /**\n
     * Property: readers\n
     * Contains public functions, grouped by namespace prefix, that will\n
     *     be applied when a namespaced node is found matching the function\n
     *     name.  The function will be applied in the scope of this parser\n
     *     with two arguments: the node being read and a context object passed\n
     *     from the parent.\n
     */\n
    readers: {\n
        "wms": {\n
            "Service": function(node, obj) {\n
                obj.service = {};\n
                this.readChildNodes(node, obj.service);\n
            },\n
            "Name": function(node, obj) {\n
                obj.name = this.getChildValue(node);\n
            },\n
            "Title": function(node, obj) {\n
                obj.title = this.getChildValue(node);\n
            },\n
            "Abstract": function(node, obj) {\n
                obj["abstract"] = this.getChildValue(node);\n
            },\n
            "BoundingBox": function(node, obj) {\n
                var bbox = {};\n
                bbox.bbox = [\n
                    parseFloat(node.getAttribute("minx")),\n
                    parseFloat(node.getAttribute("miny")),\n
                    parseFloat(node.getAttribute("maxx")),\n
                    parseFloat(node.getAttribute("maxy"))\n
                ];\n
                var res = {\n
                    x: parseFloat(node.getAttribute("resx")),\n
                    y: parseFloat(node.getAttribute("resy"))\n
                };\n
\n
                if (! (isNaN(res.x) && isNaN(res.y))) {\n
                    bbox.res = res;\n
                }\n
                // return the bbox so that descendant classes can set the\n
                // CRS and SRS and add it to the obj\n
                return bbox;\n
            },\n
            "OnlineResource": function(node, obj) {\n
                obj.href = this.getAttributeNS(node, this.namespaces.xlink, \n
                    "href");\n
            },\n
            "ContactInformation": function(node, obj) {\n
                obj.contactInformation = {};\n
                this.readChildNodes(node, obj.contactInformation);\n
            },\n
            "ContactPersonPrimary": function(node, obj) {\n
                obj.personPrimary = {};\n
                this.readChildNodes(node, obj.personPrimary);\n
            },\n
            "ContactPerson": function(node, obj) {\n
                obj.person = this.getChildValue(node);\n
            },\n
            "ContactOrganization": function(node, obj) {\n
                obj.organization = this.getChildValue(node);\n
            },\n
            "ContactPosition": function(node, obj) {\n
                obj.position = this.getChildValue(node);\n
            },\n
            "ContactAddress": function(node, obj) {\n
                obj.contactAddress = {};\n
                this.readChildNodes(node, obj.contactAddress);\n
            },\n
            "AddressType": function(node, obj) {\n
                obj.type = this.getChildValue(node);\n
            },\n
            "Address": function(node, obj) {\n
                obj.address = this.getChildValue(node);\n
            },\n
            "City": function(node, obj) {\n
                obj.city = this.getChildValue(node);\n
            },\n
            "StateOrProvince": function(node, obj) {\n
                obj.stateOrProvince = this.getChildValue(node);\n
            },\n
            "PostCode": function(node, obj) {\n
                obj.postcode = this.getChildValue(node);\n
            },\n
            "Country": function(node, obj) {\n
                obj.country = this.getChildValue(node);\n
            },\n
            "ContactVoiceTelephone": function(node, obj) {\n
                obj.phone = this.getChildValue(node);\n
            },\n
            "ContactFacsimileTelephone": function(node, obj) {\n
                obj.fax = this.getChildValue(node);\n
            },\n
            "ContactElectronicMailAddress": function(node, obj) {\n
                obj.email = this.getChildValue(node);\n
            },\n
            "Fees": function(node, obj) {\n
                var fees = this.getChildValue(node);\n
                if (fees && fees.toLowerCase() != "none") {\n
                    obj.fees = fees;\n
                }\n
            },\n
            "AccessConstraints": function(node, obj) {\n
                var constraints = this.getChildValue(node);\n
                if (constraints && constraints.toLowerCase() != "none") {\n
                    obj.accessConstraints = constraints;\n
                }\n
            },\n
            "Capability": function(node, obj) {\n
                obj.capability = {\n
                    nestedLayers: [],\n
                    layers: []\n
                };\n
                this.readChildNodes(node, obj.capability);\n
            },\n
            "Request": function(node, obj) {\n
                obj.request = {};\n
                this.readChildNodes(node, obj.request);\n
            },\n
            "GetCapabilities": function(node, obj) {\n
                obj.getcapabilities = {formats: []};\n
                this.readChildNodes(node, obj.getcapabilities);\n
            },\n
            "Format": function(node, obj) {\n
                if (OpenLayers.Util.isArray(obj.formats)) {\n
                    obj.formats.push(this.getChildValue(node));\n
                } else {\n
                    obj.format = this.getChildValue(node);\n
                }\n
            },\n
            "DCPType": function(node, obj) {\n
                this.readChildNodes(node, obj);\n
            },\n
            "HTTP": function(node, obj) {\n
                this.readChildNodes(node, obj);\n
            },\n
            "Get": function(node, obj) {\n
                obj.get = {};\n
                this.readChildNodes(node, obj.get);\n
                // backwards compatibility\n
                if (!obj.href) {\n
                    obj.href = obj.get.href;\n
                }\n
            },\n
            "Post": function(node, obj) {\n
                obj.post = {};\n
                this.readChildNodes(node, obj.post);\n
                // backwards compatibility\n
                if (!obj.href) {\n
                    obj.href = obj.get.href;\n
                }\n
            },\n
            "GetMap": function(node, obj) {\n
                obj.getmap = {formats: []};\n
                this.readChildNodes(node, obj.getmap);\n
            },\n
            "GetFeatureInfo": function(node, obj) {\n
                obj.getfeatureinfo = {formats: []};\n
                this.readChildNodes(node, obj.getfeatureinfo);\n
            },\n
            "Exception": function(node, obj) {\n
                obj.exception = {formats: []};\n
                this.readChildNodes(node, obj.exception);\n
            },\n
            "Layer": function(node, obj) {\n
                var parentLayer, capability;\n
                if (obj.capability) {\n
                    capability = obj.capability;\n
                    parentLayer = obj;\n
                } else {\n
                    capability = obj;\n
                }\n
                var attrNode = node.getAttributeNode("queryable");\n
                var queryable = (attrNode && attrNode.specified) ? \n
                    node.getAttribute("queryable") : null;\n
                attrNode = node.getAttributeNode("cascaded");\n
                var cascaded = (attrNode && attrNode.specified) ?\n
                    node.getAttribute("cascaded") : null;\n
                attrNode = node.getAttributeNode("opaque");\n
                var opaque = (attrNode && attrNode.specified) ?\n
                    node.getAttribute(\'opaque\') : null;\n
                var noSubsets = node.getAttribute(\'noSubsets\');\n
                var fixedWidth = node.getAttribute(\'fixedWidth\');\n
                var fixedHeight = node.getAttribute(\'fixedHeight\');\n
                var parent = parentLayer || {},\n
                    extend = OpenLayers.Util.extend;\n
                var layer = {\n
                    nestedLayers: [],\n
                    styles: parentLayer ? [].concat(parentLayer.styles) : [],\n
                    srs: parentLayer ? extend({}, parent.srs) : {}, \n
                    metadataURLs: [],\n
                    bbox: parentLayer ? extend({}, parent.bbox) : {},\n
                    llbbox: parent.llbbox,\n
                    dimensions: parentLayer ? extend({}, parent.dimensions) : {},\n
                    authorityURLs: parentLayer ? extend({}, parent.authorityURLs) : {},\n
                    identifiers: {},\n
                    keywords: [],\n
                    queryable: (queryable && queryable !== "") ? \n
                        (queryable === "1" || queryable === "true" ) :\n
                        (parent.queryable || false),\n
                    cascaded: (cascaded !== null) ? parseInt(cascaded) :\n
                        (parent.cascaded || 0),\n
                    opaque: opaque ? \n
                        (opaque === "1" || opaque === "true" ) :\n
                        (parent.opaque || false),\n
                    noSubsets: (noSubsets !== null) ? \n
                        (noSubsets === "1" || noSubsets === "true" ) :\n
                        (parent.noSubsets || false),\n
                    fixedWidth: (fixedWidth != null) ? \n
                        parseInt(fixedWidth) : (parent.fixedWidth || 0),\n
                    fixedHeight: (fixedHeight != null) ? \n
                        parseInt(fixedHeight) : (parent.fixedHeight || 0),\n
                    minScale: parent.minScale,\n
                    maxScale: parent.maxScale,\n
                    attribution: parent.attribution\n
                };\n
                obj.nestedLayers.push(layer);\n
                layer.capability = capability;\n
                this.readChildNodes(node, layer);\n
                delete layer.capability;\n
                if(layer.name) {\n
                    var parts = layer.name.split(":"),\n
                        request = capability.request,\n
                        gfi = request.getfeatureinfo;\n
                    if(parts.length > 0) {\n
                        layer.prefix = parts[0];\n
                    }\n
                    capability.layers.push(layer);\n
                    if (layer.formats === undefined) {\n
                        layer.formats = request.getmap.formats;\n
                    }\n
                    if (layer.infoFormats === undefined && gfi) {\n
                        layer.infoFormats = gfi.formats;\n
                    }\n
                }\n
            },\n
            "Attribution": function(node, obj) {\n
                obj.attribution = {};\n
                this.readChildNodes(node, obj.attribution);\n
            },\n
            "LogoURL": function(node, obj) {\n
                obj.logo = {\n
                    width: node.getAttribute("width"),\n
                    height: node.getAttribute("height")\n
                };\n
                this.readChildNodes(node, obj.logo);\n
            },\n
            "Style": function(node, obj) {\n
                var style = {};\n
                obj.styles.push(style);\n
                this.readChildNodes(node, style);\n
            },\n
            "LegendURL": function(node, obj) {\n
                var legend = {\n
                    width: node.getAttribute("width"),\n
                    height: node.getAttribute("height")\n
                };\n
                obj.legend = legend;\n
                this.readChildNodes(node, legend);\n
            },\n
            "MetadataURL": function(node, obj) {\n
                var metadataURL = {type: node.getAttribute("type")};\n
                obj.metadataURLs.push(metadataURL);\n
                this.readChildNodes(node, metadataURL);\n
            },\n
            "DataURL": function(node, obj) {\n
                obj.dataURL = {};\n
                this.readChildNodes(node, obj.dataURL);\n
            },\n
            "FeatureListURL": function(node, obj) {\n
                obj.featureListURL = {};\n
                this.readChildNodes(node, obj.featureListURL);\n
            },\n
            "AuthorityURL": function(node, obj) {\n
                var name = node.getAttribute("name");\n
                var authority = {};\n
                this.readChildNodes(node, authority);\n
                obj.authorityURLs[name] = authority.href;\n
            },\n
            "Identifier": function(node, obj) {\n
                var authority = node.getAttribute("authority");\n
                obj.identifiers[authority] = this.getChildValue(node);\n
            },\n
            "KeywordList": function(node, obj) {\n
                this.readChildNodes(node, obj);\n
            },\n
            "SRS": function(node, obj) {\n
                obj.srs[this.getChildValue(node)] = true;\n
            }\n
        }\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Format.WMSCapabilities.v1" \n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>14702</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

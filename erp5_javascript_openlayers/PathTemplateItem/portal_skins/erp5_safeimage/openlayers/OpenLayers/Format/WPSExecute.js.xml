<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.9</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>WPSExecute.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Format/XML.js\n
 * @requires OpenLayers/Format/OWSCommon/v1_1_0.js\n
 * @requires OpenLayers/Format/WCSGetCoverage.js\n
 * @requires OpenLayers/Format/WFST/v1_1_0.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.WPSExecute version 1.0.0\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Format.XML>\n
 */\n
OpenLayers.Format.WPSExecute = OpenLayers.Class(OpenLayers.Format.XML, {\n
    \n
    /**\n
     * Property: namespaces\n
     * {Object} Mapping of namespace aliases to namespace URIs.\n
     */\n
    namespaces: {\n
        ows: "http://www.opengis.net/ows/1.1",\n
        gml: "http://www.opengis.net/gml",\n
        wps: "http://www.opengis.net/wps/1.0.0",\n
        wfs: "http://www.opengis.net/wfs",\n
        ogc: "http://www.opengis.net/ogc",\n
        wcs: "http://www.opengis.net/wcs",\n
        xlink: "http://www.w3.org/1999/xlink",\n
        xsi: "http://www.w3.org/2001/XMLSchema-instance"\n
    },\n
\n
    /**\n
     * Property: regExes\n
     * Compiled regular expressions for manipulating strings.\n
     */\n
    regExes: {\n
        trimSpace: (/^\\s*|\\s*$/g),\n
        removeSpace: (/\\s*/g),\n
        splitSpace: (/\\s+/),\n
        trimComma: (/\\s*,\\s*/g)\n
    },\n
\n
    /**\n
     * Constant: VERSION\n
     * {String} 1.0.0\n
     */\n
    VERSION: "1.0.0",\n
\n
    /**\n
     * Property: schemaLocation\n
     * {String} Schema location\n
     */\n
    schemaLocation: "http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsAll.xsd",\n
\n
    schemaLocationAttr: function(options) {\n
        return undefined;\n
    },\n
\n
    /**\n
     * Constructor: OpenLayers.Format.WPSExecute\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object whose properties will be set on\n
     *     this instance.\n
     */\n
\n
    /**\n
     * Method: write\n
     *\n
     * Parameters:\n
     * options - {Object} Optional object.\n
     *\n
     * Returns:\n
     * {String} An WPS Execute request XML string.\n
     */\n
    write: function(options) {\n
        var doc;\n
        if (window.ActiveXObject) {\n
            doc = new ActiveXObject("Microsoft.XMLDOM");\n
            this.xmldom = doc;\n
        } else {\n
            doc = document.implementation.createDocument("", "", null);\n
        }\n
        var node = this.writeNode("wps:Execute", options, doc);\n
        this.setAttributeNS(\n
            node, this.namespaces.xsi,\n
            "xsi:schemaLocation", this.schemaLocation\n
        );\n
        return OpenLayers.Format.XML.prototype.write.apply(this, [node]);\n
    }, \n
\n
    /**\n
     * Property: writers\n
     * As a compliment to the readers property, this structure contains public\n
     *     writing functions grouped by namespace alias and named like the\n
     *     node names they produce.\n
     */\n
    writers: {\n
        "wps": {\n
            "Execute": function(options) {\n
                var node = this.createElementNSPlus("wps:Execute", {\n
                    attributes: {\n
                        version: this.VERSION,\n
                        service: \'WPS\'\n
                    } \n
                }); \n
                this.writeNode("ows:Identifier", options.identifier, node);\n
                this.writeNode("wps:DataInputs", options.dataInputs, node);\n
                this.writeNode("wps:ResponseForm", options.responseForm, node);\n
                return node; \n
            },\n
            "ResponseForm": function(responseForm) {\n
                var node = this.createElementNSPlus("wps:ResponseForm", {});\n
                if (responseForm.rawDataOutput) {\n
                    this.writeNode("wps:RawDataOutput", responseForm.rawDataOutput, node);\n
                }\n
                if (responseForm.responseDocument) {\n
                    this.writeNode("wps:ResponseDocument", responseForm.responseDocument, node);\n
                }\n
                return node;\n
            },\n
            "ResponseDocument": function(responseDocument) {\n
                var node = this.createElementNSPlus("wps:ResponseDocument", {\n
                    attributes: {\n
                        storeExecuteResponse: responseDocument.storeExecuteResponse,\n
                        lineage: responseDocument.lineage,\n
                        status: responseDocument.status\n
                    }\n
                });\n
                if (responseDocument.output) {\n
                    this.writeNode("wps:Output", responseDocument.output, node);\n
                }\n
                return node;\n
            },\n
            "Output": function(output) {\n
                var node = this.createElementNSPlus("wps:Output", {\n
                    attributes: {\n
                        asReference: output.asReference\n
                    }\n
                });\n
                this.writeNode("ows:Identifier", output.identifier, node);\n
                this.writeNode("ows:Title", output.title, node);\n
                this.writeNode("ows:Abstract", output["abstract"], node);\n
                return node;\n
            },\n
            "RawDataOutput": function(rawDataOutput) {\n
                var node = this.createElementNSPlus("wps:RawDataOutput", {\n
                    attributes: {\n
                        mimeType: rawDataOutput.mimeType\n
                    }\n
                });\n
                this.writeNode("ows:Identifier", rawDataOutput.identifier, node);\n
                return node;\n
            },\n
            "DataInputs": function(dataInputs) {\n
                var node = this.createElementNSPlus("wps:DataInputs", {});\n
                for (var i=0, ii=dataInputs.length; i<ii; ++i) {\n
                    this.writeNode("wps:Input", dataInputs[i], node);\n
                }\n
                return node;\n
            },\n
            "Input": function(input) {\n
                var node = this.createElementNSPlus("wps:Input", {});\n
                this.writeNode("ows:Identifier", input.identifier, node);\n
                if (input.title) {\n
                    this.writeNode("ows:Title", input.title, node);\n
                }\n
                if (input.data) {\n
                    this.writeNode("wps:Data", input.data, node);\n
                }\n
                if (input.reference) {\n
                    this.writeNode("wps:Reference", input.reference, node);\n
                }\n
                return node;\n
            },\n
            "Data": function(data) {\n
                var node = this.createElementNSPlus("wps:Data", {});\n
                if (data.literalData) {\n
                    this.writeNode("wps:LiteralData", data.literalData, node);\n
                } else if (data.complexData) {\n
                    this.writeNode("wps:ComplexData", data.complexData, node);\n
                }\n
                return node;\n
            },\n
            "LiteralData": function(literalData) {\n
                var node = this.createElementNSPlus("wps:LiteralData", {\n
                    attributes: {\n
                        uom: literalData.uom\n
                    },\n
                    value: literalData.value\n
                });\n
                return node;\n
            },\n
            "ComplexData": function(complexData) {\n
                var node = this.createElementNSPlus("wps:ComplexData", {\n
                    attributes: {\n
                        mimeType: complexData.mimeType,\n
                        encoding: complexData.encoding,\n
                        schema: complexData.schema\n
                    } \n
                });\n
                var data = complexData.value;\n
                if (typeof data === "string") {\n
                    node.appendChild(\n
                        this.getXMLDoc().createCDATASection(complexData.value)\n
                    );\n
                } else {\n
                    node.appendChild(data);\n
                }\n
                return node;\n
            },\n
            "Reference": function(reference) {\n
                var node = this.createElementNSPlus("wps:Reference", {\n
                    attributes: {\n
                        mimeType: reference.mimeType,\n
                        "xlink:href": reference.href,\n
                        method: reference.method,\n
                        encoding: reference.encoding,\n
                        schema: reference.schema\n
                    }\n
                });\n
                if (reference.body) {\n
                    this.writeNode("wps:Body", reference.body, node);\n
                }\n
                return node;\n
            },\n
            "Body": function(body) {\n
                var node = this.createElementNSPlus("wps:Body", {});\n
                if (body.wcs) {\n
                    this.writeNode("wcs:GetCoverage", body.wcs, node);\n
                }\n
                else if (body.wfs) {\n
                    // OpenLayers.Format.WFST expects these to be on the \n
                    // instance and not in the options\n
                    this.featureType = body.wfs.featureType;\n
                    this.version = body.wfs.version;\n
                    this.writeNode("wfs:GetFeature", body.wfs, node);\n
                } else {\n
                    this.writeNode("wps:Execute", body, node);\n
                }\n
                return node;                \n
            }\n
        },\n
        "wcs": OpenLayers.Format.WCSGetCoverage.prototype.writers.wcs,\n
        "wfs": OpenLayers.Format.WFST.v1_1_0.prototype.writers.wfs,\n
        "ogc": OpenLayers.Format.Filter.v1_1_0.prototype.writers.ogc,\n
        "ows": OpenLayers.Format.OWSCommon.v1_1_0.prototype.writers.ows\n
    },\n
    \n
    CLASS_NAME: "OpenLayers.Format.WPSExecute" \n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>9602</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.94</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>v1.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Format/XLS.js\n
 * @requires OpenLayers/Format/GML/v3.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.XLS.v1\n
 * Superclass for XLS version 1 parsers. Only supports GeocodeRequest for now.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Format.XML>\n
 */\n
OpenLayers.Format.XLS.v1 = OpenLayers.Class(OpenLayers.Format.XML, {\n
    \n
    /**\n
     * Property: namespaces\n
     * {Object} Mapping of namespace aliases to namespace URIs.\n
     */\n
    namespaces: {\n
        xls: "http://www.opengis.net/xls",\n
        gml: "http://www.opengis.net/gml",\n
        xsi: "http://www.w3.org/2001/XMLSchema-instance"\n
    },\n
\n
    /**\n
     * Property: regExes\n
     * Compiled regular expressions for manipulating strings.\n
     */\n
    regExes: {\n
        trimSpace: (/^\\s*|\\s*$/g),\n
        removeSpace: (/\\s*/g),\n
        splitSpace: (/\\s+/),\n
        trimComma: (/\\s*,\\s*/g)\n
    },\n
\n
    /**\n
     * APIProperty: xy\n
     * {Boolean} Order of the GML coordinate true:(x,y) or false:(y,x)\n
     * Changing is not recommended, a new Format should be instantiated.\n
     */\n
    xy: true,\n
    \n
    /**\n
     * Property: defaultPrefix\n
     */\n
    defaultPrefix: "xls",\n
\n
    /**\n
     * Property: schemaLocation\n
     * {String} Schema location for a particular minor version.\n
     */\n
    schemaLocation: null,\n
    \n
    /**\n
     * Constructor: OpenLayers.Format.XLS.v1\n
     * Instances of this class are not created directly.  Use the\n
     *     <OpenLayers.Format.XLS> constructor instead.\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object whose properties will be set on\n
     *     this instance.\n
     */\n
    \n
    /**\n
     * Method: read\n
     *\n
     * Parameters:\n
     * data - {DOMElement} An XLS document element.\n
     * options - {Object} Options for the reader.\n
     *\n
     * Returns:\n
     * {Object} An object representing the XLSResponse.\n
     */\n
    read: function(data, options) {\n
        options = OpenLayers.Util.applyDefaults(options, this.options);\n
        var xls = {};\n
        this.readChildNodes(data, xls);\n
        return xls;\n
    },\n
    \n
    /**\n
     * Property: readers\n
     * Contains public functions, grouped by namespace prefix, that will\n
     *     be applied when a namespaced node is found matching the function\n
     *     name.  The function will be applied in the scope of this parser\n
     *     with two arguments: the node being read and a context object passed\n
     *     from the parent.\n
     */\n
    readers: {\n
        "xls": {\n
            "XLS": function(node, xls) {\n
                xls.version = node.getAttribute("version");\n
                this.readChildNodes(node, xls);\n
            },\n
            "Response": function(node, xls) {\n
               this.readChildNodes(node, xls);\n
            },\n
            "GeocodeResponse": function(node, xls) {\n
               xls.responseLists = [];\n
               this.readChildNodes(node, xls);\n
            },\n
            "GeocodeResponseList": function(node, xls) {\n
                var responseList = {\n
                    features: [], \n
                    numberOfGeocodedAddresses: \n
                        parseInt(node.getAttribute("numberOfGeocodedAddresses"))\n
                };\n
                xls.responseLists.push(responseList);\n
                this.readChildNodes(node, responseList);\n
            },\n
            "GeocodedAddress": function(node, responseList) {\n
                var feature = new OpenLayers.Feature.Vector();\n
                responseList.features.push(feature);\n
                this.readChildNodes(node, feature);\n
                // post-process geometry\n
                feature.geometry = feature.components[0];\n
            },\n
            "GeocodeMatchCode": function(node, feature) {\n
                feature.attributes.matchCode = {\n
                    accuracy: parseFloat(node.getAttribute("accuracy")),\n
                    matchType: node.getAttribute("matchType")\n
                };\n
            },\n
            "Address": function(node, feature) {\n
                var address = {\n
                    countryCode: node.getAttribute("countryCode"),\n
                    addressee: node.getAttribute("addressee"),\n
                    street: [],\n
                    place: []\n
                };\n
                feature.attributes.address = address;\n
                this.readChildNodes(node, address);\n
            },\n
            "freeFormAddress": function(node, address) {\n
                address.freeFormAddress = this.getChildValue(node);\n
            },\n
            "StreetAddress": function(node, address) {\n
                this.readChildNodes(node, address);\n
            },\n
            "Building": function(node, address) {\n
                address.building = {\n
                    \'number\': node.getAttribute("number"),\n
                    subdivision: node.getAttribute("subdivision"),\n
                    buildingName: node.getAttribute("buildingName")\n
                };\n
            },\n
            "Street": function(node, address) {\n
                // only support the built-in primitive type for now\n
                address.street.push(this.getChildValue(node));\n
            },\n
            "Place": function(node, address) {\n
                // type is one of CountrySubdivision, \n
                // CountrySecondarySubdivision, Municipality or\n
                // MunicipalitySubdivision\n
                address.place[node.getAttribute("type")] = \n
                    this.getChildValue(node);\n
            },\n
            "PostalCode": function(node, address) {\n
                address.postalCode = this.getChildValue(node);\n
            }\n
        },\n
        "gml": OpenLayers.Format.GML.v3.prototype.readers.gml\n
    },\n
    \n
    /**\n
     * Method: write\n
     *\n
     * Parameters:\n
     * request - {Object} An object representing the geocode request.\n
     *\n
     * Returns:\n
     * {DOMElement} The root of an XLS document.\n
     */\n
    write: function(request) {\n
        return this.writers.xls.XLS.apply(this, [request]);\n
    },\n
    \n
    /**\n
     * Property: writers\n
     * As a compliment to the readers property, this structure contains public\n
     *     writing functions grouped by namespace alias and named like the\n
     *     node names they produce.\n
     */\n
    writers: {\n
        "xls": {\n
            "XLS": function(request) {\n
                var root = this.createElementNSPlus(\n
                    "xls:XLS",\n
                    {attributes: {\n
                        "version": this.VERSION,\n
                        "xsi:schemaLocation": this.schemaLocation\n
                    }}\n
                );\n
                this.writeNode("RequestHeader", request.header, root);\n
                this.writeNode("Request", request, root);\n
                return root;\n
            },\n
            "RequestHeader": function(header) {\n
                return this.createElementNSPlus("xls:RequestHeader");\n
            },\n
            "Request": function(request) {\n
                var node = this.createElementNSPlus("xls:Request", {\n
                    attributes: {\n
                        methodName: "GeocodeRequest",\n
                        requestID: request.requestID || "",\n
                        version: this.VERSION\n
                    }\n
                });\n
                this.writeNode("GeocodeRequest", request.addresses, node);\n
                return node;\n
            },\n
            "GeocodeRequest": function(addresses) {\n
                var node = this.createElementNSPlus("xls:GeocodeRequest");\n
                for (var i=0, len=addresses.length; i<len; i++) {\n
                    this.writeNode("Address", addresses[i], node);\n
                }\n
                return node;\n
            },\n
            "Address": function(address) {\n
                var node = this.createElementNSPlus("xls:Address", {\n
                    attributes: {\n
                        countryCode: address.countryCode\n
                    }\n
                });\n
                if (address.freeFormAddress) {\n
                    this.writeNode("freeFormAddress", address.freeFormAddress, node);\n
                } else {\n
                    if (address.street) {\n
                        this.writeNode("StreetAddress", address, node);\n
                    }\n
                    if (address.municipality) {\n
                        this.writeNode("Municipality", address.municipality, node);\n
                    }\n
                    if (address.countrySubdivision) {\n
                        this.writeNode("CountrySubdivision", address.countrySubdivision, node);\n
                    }\n
                    if (address.postalCode) {\n
                        this.writeNode("PostalCode", address.postalCode, node);\n
                    }\n
                }\n
                return node;\n
            },\n
            "freeFormAddress": function(freeFormAddress) {\n
                return this.createElementNSPlus("freeFormAddress", \n
                    {value: freeFormAddress});\n
            },\n
            "StreetAddress": function(address) {\n
                var node = this.createElementNSPlus("xls:StreetAddress");\n
                if (address.building) {\n
                    this.writeNode(node, "Building", address.building);\n
                }\n
                var street = address.street;\n
                if (!(OpenLayers.Util.isArray(street))) {\n
                    street = [street];\n
                }\n
                for (var i=0, len=street.length; i < len; i++) {\n
                    this.writeNode("Street", street[i], node);\n
                }\n
                return node;\n
            },\n
            "Building": function(building) {\n
                return this.createElementNSPlus("xls:Building", {\n
                    attributes: {\n
                        "number": building["number"],\n
                        "subdivision": building.subdivision,\n
                        "buildingName": building.buildingName\n
                    }\n
                });\n
            },\n
            "Street": function(street) {\n
                return this.createElementNSPlus("xls:Street", {value: street});\n
            },\n
            "Municipality": function(municipality) {\n
                return this.createElementNSPlus("xls:Place", {\n
                    attributes: {\n
                        type: "Municipality"\n
                    },\n
                    value: municipality\n
                });\n
            },\n
            "CountrySubdivision": function(countrySubdivision) {\n
                return this.createElementNSPlus("xls:Place", {\n
                    attributes: {\n
                        type: "CountrySubdivision"\n
                    },\n
                    value: countrySubdivision\n
                });\n
            },\n
            "PostalCode": function(postalCode) {\n
                return this.createElementNSPlus("xls:PostalCode", {\n
                    value: postalCode\n
                });\n
            }\n
        }\n
    },\n
    \n
    CLASS_NAME: "OpenLayers.Format.XLS.v1" \n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>11114</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

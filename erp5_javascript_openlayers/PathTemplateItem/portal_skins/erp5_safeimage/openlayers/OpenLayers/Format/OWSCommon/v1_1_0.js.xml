<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.98</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>v1_1_0.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Format/OWSCommon/v1.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.OWSCommon.v1_1_0\n
 * Parser for OWS Common version 1.1.0.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Format.OWSCommon.v1>\n
 */\n
OpenLayers.Format.OWSCommon.v1_1_0 = OpenLayers.Class(OpenLayers.Format.OWSCommon.v1, {\n
\n
    /**\n
     * Property: namespaces\n
     * {Object} Mapping of namespace aliases to namespace URIs.\n
     */\n
    namespaces: {\n
        ows: "http://www.opengis.net/ows/1.1",\n
        xlink: "http://www.w3.org/1999/xlink"\n
    },    \n
    \n
    /**\n
     * Property: readers\n
     * Contains public functions, grouped by namespace prefix, that will\n
     *     be applied when a namespaced node is found matching the function\n
     *     name.  The function will be applied in the scope of this parser\n
     *     with two arguments: the node being read and a context object passed\n
     *     from the parent.\n
     */\n
    readers: {\n
        "ows": OpenLayers.Util.applyDefaults({\n
            "ExceptionReport": function(node, obj) {\n
                obj.exceptionReport = {\n
                    version: node.getAttribute(\'version\'),\n
                    language: node.getAttribute(\'xml:lang\'),\n
                    exceptions: []\n
                };\n
                this.readChildNodes(node, obj.exceptionReport);\n
            },\n
            "AllowedValues": function(node, parameter) {\n
                parameter.allowedValues = {};\n
                this.readChildNodes(node, parameter.allowedValues);\n
            },\n
            "AnyValue": function(node, parameter) {\n
                parameter.anyValue = true;\n
            },\n
            "DataType": function(node, parameter) {\n
                parameter.dataType = this.getChildValue(node);\n
            },\n
            "Range": function(node, allowedValues) {\n
                allowedValues.range = {};\n
                this.readChildNodes(node, allowedValues.range);\n
            },\n
            "MinimumValue": function(node, range) {\n
                range.minValue = this.getChildValue(node);\n
            },\n
            "MaximumValue": function(node, range) {\n
                range.maxValue = this.getChildValue(node);\n
            },\n
            "Identifier": function(node, obj) {\n
                obj.identifier = this.getChildValue(node);\n
            },\n
            "SupportedCRS": function(node, obj) {\n
                obj.supportedCRS = this.getChildValue(node);\n
            }\n
        }, OpenLayers.Format.OWSCommon.v1.prototype.readers["ows"])\n
    },\n
\n
    /**\n
     * Property: writers\n
     * As a compliment to the readers property, this structure contains public\n
     *     writing functions grouped by namespace alias and named like the\n
     *     node names they produce.\n
     */\n
    writers: {\n
        "ows": OpenLayers.Util.applyDefaults({\n
            "Range": function(range) {\n
                var node = this.createElementNSPlus("ows:Range", {\n
                    attributes: {\n
                        \'ows:rangeClosure\': range.closure\n
                    }\n
                });\n
                this.writeNode("ows:MinimumValue", range.minValue, node);\n
                this.writeNode("ows:MaximumValue", range.maxValue, node);\n
                return node;\n
            },\n
            "MinimumValue": function(minValue) {\n
                var node = this.createElementNSPlus("ows:MinimumValue", {\n
                    value: minValue\n
                });\n
                return node;\n
            },\n
            "MaximumValue": function(maxValue) {\n
                var node = this.createElementNSPlus("ows:MaximumValue", {\n
                    value: maxValue\n
                });\n
                return node;\n
            },\n
            "Value": function(value) {\n
                var node = this.createElementNSPlus("ows:Value", {\n
                    value: value\n
                });\n
                return node;\n
            }\n
        }, OpenLayers.Format.OWSCommon.v1.prototype.writers["ows"])\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Format.OWSCommon.v1_1_0"\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4249</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

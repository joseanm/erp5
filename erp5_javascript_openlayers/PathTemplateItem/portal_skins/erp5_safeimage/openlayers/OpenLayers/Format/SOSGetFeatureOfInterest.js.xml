<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.9</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>SOSGetFeatureOfInterest.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
 \n
/**\n
 * @requires OpenLayers/Format/XML.js\n
 * @requires OpenLayers/Format/GML/v3.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.SOSGetFeatureOfInterest\n
 * Read and write SOS GetFeatureOfInterest. This is used to get to\n
 * the location of the features (stations). The stations can have 1 or more\n
 * sensors.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Format.XML>\n
 */\n
OpenLayers.Format.SOSGetFeatureOfInterest = OpenLayers.Class(\n
    OpenLayers.Format.XML, {\n
    \n
    /**\n
     * Constant: VERSION\n
     * {String} 1.0.0\n
     */\n
    VERSION: "1.0.0",\n
\n
    /**\n
     * Property: namespaces\n
     * {Object} Mapping of namespace aliases to namespace URIs.\n
     */\n
    namespaces: {\n
        sos: "http://www.opengis.net/sos/1.0",\n
        gml: "http://www.opengis.net/gml",\n
        sa: "http://www.opengis.net/sampling/1.0",\n
        xsi: "http://www.w3.org/2001/XMLSchema-instance"\n
    },\n
\n
    /**\n
     * Property: schemaLocation\n
     * {String} Schema location\n
     */\n
    schemaLocation: "http://www.opengis.net/sos/1.0 http://schemas.opengis.net/sos/1.0.0/sosAll.xsd",\n
\n
    /**\n
     * Property: defaultPrefix\n
     */\n
    defaultPrefix: "sos",\n
\n
    /**\n
     * Property: regExes\n
     * Compiled regular expressions for manipulating strings.\n
     */\n
    regExes: {\n
        trimSpace: (/^\\s*|\\s*$/g),\n
        removeSpace: (/\\s*/g),\n
        splitSpace: (/\\s+/),\n
        trimComma: (/\\s*,\\s*/g)\n
    },\n
    \n
    /**\n
     * Constructor: OpenLayers.Format.SOSGetFeatureOfInterest\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object whose properties will be set on\n
     *     this instance.\n
     */\n
\n
    /**\n
     * APIMethod: read\n
     * Parse a GetFeatureOfInterest response and return an array of features\n
     * \n
     * Parameters: \n
     * data - {String} or {DOMElement} data to read/parse.\n
     *\n
     * Returns:\n
     * {Array(<OpenLayers.Feature.Vector>)} An array of features. \n
     */\n
    read: function(data) {\n
        if(typeof data == "string") {\n
            data = OpenLayers.Format.XML.prototype.read.apply(this, [data]);\n
        }\n
        if(data && data.nodeType == 9) {\n
            data = data.documentElement;\n
        }\n
\n
        var info = {features: []};\n
        this.readNode(data, info);\n
       \n
        var features = [];\n
        for (var i=0, len=info.features.length; i<len; i++) {\n
            var container = info.features[i];\n
            // reproject features if needed\n
            if(this.internalProjection && this.externalProjection &&\n
                container.components[0]) {\n
                    container.components[0].transform(\n
                        this.externalProjection, this.internalProjection\n
                    );\n
            }             \n
            var feature = new OpenLayers.Feature.Vector(\n
                container.components[0], container.attributes);\n
            features.push(feature);\n
        }\n
        return features;\n
    },\n
\n
    /**\n
     * Property: readers\n
     * Contains public functions, grouped by namespace prefix, that will\n
     *     be applied when a namespaced node is found matching the function\n
     *     name.  The function will be applied in the scope of this parser\n
     *     with two arguments: the node being read and a context object passed\n
     *     from the parent.\n
     */\n
    readers: {\n
        "sa": {\n
            "SamplingPoint": function(node, obj) {\n
                // sampling point can also be without a featureMember if \n
                // there is only 1\n
                if (!obj.attributes) {\n
                    var feature = {attributes: {}};\n
                    obj.features.push(feature);\n
                    obj = feature;\n
                }\n
                obj.attributes.id = this.getAttributeNS(node, \n
                    this.namespaces.gml, "id");\n
                this.readChildNodes(node, obj);\n
            },\n
            "position": function (node, obj) {\n
                this.readChildNodes(node, obj);\n
            }\n
        },\n
        "gml": OpenLayers.Util.applyDefaults({\n
            "FeatureCollection": function(node, obj) {\n
                this.readChildNodes(node, obj);\n
            },\n
            "featureMember": function(node, obj) {\n
                var feature = {attributes: {}};\n
                obj.features.push(feature);\n
                this.readChildNodes(node, feature);\n
            },\n
            "name": function(node, obj) {\n
                obj.attributes.name = this.getChildValue(node);\n
            },\n
            "pos": function(node, obj) {\n
                // we need to parse the srsName to get to the \n
                // externalProjection, that\'s why we cannot use\n
                // GML v3 for this\n
                if (!this.externalProjection) {\n
                    this.externalProjection = new OpenLayers.Projection(\n
                        node.getAttribute("srsName"));\n
                }\n
             OpenLayers.Format.GML.v3.prototype.readers.gml.pos.apply(\n
                    this, [node, obj]);\n
            }\n
        }, OpenLayers.Format.GML.v3.prototype.readers.gml)\n
    },\n
    \n
    /**\n
     * Property: writers\n
     * As a compliment to the readers property, this structure contains public\n
     *     writing functions grouped by namespace alias and named like the\n
     *     node names they produce.\n
     */\n
    writers: {\n
        "sos": {\n
            "GetFeatureOfInterest": function(options) {\n
                var node = this.createElementNSPlus("GetFeatureOfInterest", {\n
                    attributes: {\n
                        version: this.VERSION,\n
                        service: \'SOS\',\n
                        "xsi:schemaLocation": this.schemaLocation\n
                    } \n
                }); \n
                for (var i=0, len=options.fois.length; i<len; i++) {\n
                    this.writeNode("FeatureOfInterestId", {foi: options.fois[i]}, node);\n
                }\n
                return node; \n
            },\n
            "FeatureOfInterestId": function(options) {\n
                var node = this.createElementNSPlus("FeatureOfInterestId", {value: options.foi});\n
                return node;\n
            }\n
        }\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Format.SOSGetFeatureOfInterest" \n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6397</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.91</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>SOSGetObservation.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Format/XML.js\n
 * @requires OpenLayers/Format/SOSGetFeatureOfInterest.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.SOSGetObservation\n
 * Read and write SOS GetObersation (to get the actual values from a sensor) \n
 *     version 1.0.0\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Format.XML>\n
 */\n
OpenLayers.Format.SOSGetObservation = OpenLayers.Class(OpenLayers.Format.XML, {\n
    \n
    /**\n
     * Property: namespaces\n
     * {Object} Mapping of namespace aliases to namespace URIs.\n
     */\n
    namespaces: {\n
        ows: "http://www.opengis.net/ows",\n
        gml: "http://www.opengis.net/gml",\n
        sos: "http://www.opengis.net/sos/1.0",\n
        ogc: "http://www.opengis.net/ogc",\n
        om: "http://www.opengis.net/om/1.0",\n
        sa: "http://www.opengis.net/sampling/1.0",\n
        xlink: "http://www.w3.org/1999/xlink",\n
        xsi: "http://www.w3.org/2001/XMLSchema-instance"\n
    },\n
\n
    /**\n
     * Property: regExes\n
     * Compiled regular expressions for manipulating strings.\n
     */\n
    regExes: {\n
        trimSpace: (/^\\s*|\\s*$/g),\n
        removeSpace: (/\\s*/g),\n
        splitSpace: (/\\s+/),\n
        trimComma: (/\\s*,\\s*/g)\n
    },\n
\n
    /**\n
     * Constant: VERSION\n
     * {String} 1.0.0\n
     */\n
    VERSION: "1.0.0",\n
\n
    /**\n
     * Property: schemaLocation\n
     * {String} Schema location\n
     */\n
    schemaLocation: "http://www.opengis.net/sos/1.0 http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd",\n
\n
    /**\n
     * Property: defaultPrefix\n
     */\n
    defaultPrefix: "sos",\n
\n
    /**\n
     * Constructor: OpenLayers.Format.SOSGetObservation\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object whose properties will be set on\n
     *     this instance.\n
     */\n
\n
    /**\n
     * Method: read\n
     * \n
     * Parameters: \n
     * data - {String} or {DOMElement} data to read/parse.\n
     *\n
     * Returns:\n
     * {Object} An object containing the measurements\n
     */\n
    read: function(data) {\n
        if(typeof data == "string") {\n
            data = OpenLayers.Format.XML.prototype.read.apply(this, [data]);\n
        }\n
        if(data && data.nodeType == 9) {\n
            data = data.documentElement;\n
        }\n
        var info = {measurements: [], observations: []};\n
        this.readNode(data, info);\n
        return info;\n
    },\n
\n
    /**\n
     * Method: write\n
     *\n
     * Parameters:\n
     * options - {Object} Optional object.\n
     *\n
     * Returns:\n
     * {String} An SOS GetObservation request XML string.\n
     */\n
    write: function(options) {\n
        var node = this.writeNode("sos:GetObservation", options);\n
        node.setAttribute("xmlns:om", this.namespaces.om);\n
        node.setAttribute("xmlns:ogc", this.namespaces.ogc);\n
        this.setAttributeNS(\n
            node, this.namespaces.xsi,\n
            "xsi:schemaLocation", this.schemaLocation\n
        );\n
        return OpenLayers.Format.XML.prototype.write.apply(this, [node]);\n
    }, \n
\n
    /**\n
     * Property: readers\n
     * Contains public functions, grouped by namespace prefix, that will\n
     *     be applied when a namespaced node is found matching the function\n
     *     name.  The function will be applied in the scope of this parser\n
     *     with two arguments: the node being read and a context object passed\n
     *     from the parent.\n
     */\n
    readers: {\n
        "om": {\n
            "ObservationCollection": function(node, obj) {\n
                obj.id = this.getAttributeNS(node, this.namespaces.gml, "id");\n
                this.readChildNodes(node, obj);\n
            },\n
            "member": function(node, observationCollection) {\n
                this.readChildNodes(node, observationCollection);\n
            },\n
            "Measurement": function(node, observationCollection) {\n
                var measurement = {};\n
                observationCollection.measurements.push(measurement);\n
                this.readChildNodes(node, measurement);\n
            },\n
            "Observation": function(node, observationCollection) {\n
                var observation = {};\n
                observationCollection.observations.push(observation);\n
                this.readChildNodes(node, observation);\n
            },\n
            "samplingTime": function(node, measurement) {\n
                var samplingTime = {};\n
                measurement.samplingTime = samplingTime;\n
                this.readChildNodes(node, samplingTime);\n
            },\n
            "observedProperty": function(node, measurement) {\n
                measurement.observedProperty = \n
                    this.getAttributeNS(node, this.namespaces.xlink, "href");\n
                this.readChildNodes(node, measurement);\n
            },\n
            "procedure": function(node, measurement) {\n
                measurement.procedure = \n
                    this.getAttributeNS(node, this.namespaces.xlink, "href");\n
                this.readChildNodes(node, measurement);\n
            },\n
            "featureOfInterest": function(node, observation) {\n
                var foi = {features: []};\n
                observation.fois = [];\n
                observation.fois.push(foi);\n
                this.readChildNodes(node, foi);\n
                // postprocessing to get actual features\n
                var features = [];\n
                for (var i=0, len=foi.features.length; i<len; i++) {\n
                    var feature = foi.features[i];\n
                    features.push(new OpenLayers.Feature.Vector(\n
                        feature.components[0], feature.attributes));\n
                }\n
                foi.features = features;\n
            },\n
            "result": function(node, measurement) {\n
                var result = {};\n
                measurement.result = result;\n
                if (this.getChildValue(node) !== \'\') {\n
                    result.value = this.getChildValue(node);\n
                    result.uom = node.getAttribute("uom");\n
                } else {\n
                    this.readChildNodes(node, result);\n
                }\n
            }\n
        },\n
        "sa": OpenLayers.Format.SOSGetFeatureOfInterest.prototype.readers.sa,\n
        "gml": OpenLayers.Util.applyDefaults({\n
            "TimeInstant": function(node, samplingTime) {\n
               var timeInstant = {};\n
                samplingTime.timeInstant = timeInstant;\n
                this.readChildNodes(node, timeInstant);\n
            },\n
            "timePosition": function(node, timeInstant) {\n
                timeInstant.timePosition = this.getChildValue(node);\n
            }\n
        }, OpenLayers.Format.SOSGetFeatureOfInterest.prototype.readers.gml)\n
    },\n
\n
    /**\n
     * Property: writers\n
     * As a compliment to the readers property, this structure contains public\n
     *     writing functions grouped by namespace alias and named like the\n
     *     node names they produce.\n
     */\n
    writers: {\n
        "sos": {\n
            "GetObservation": function(options) {\n
                var node = this.createElementNSPlus("GetObservation", {\n
                    attributes: {\n
                        version: this.VERSION,\n
                        service: \'SOS\'\n
                    } \n
                }); \n
                this.writeNode("offering", options, node);\n
                if (options.eventTime) {\n
                    this.writeNode("eventTime", options, node);\n
                }\n
                for (var procedure in options.procedures) {\n
                    this.writeNode("procedure", options.procedures[procedure], node);\n
                }\n
                for (var observedProperty in options.observedProperties) {\n
                    this.writeNode("observedProperty", options.observedProperties[observedProperty], node);\n
                }\n
                if (options.foi) {\n
                    this.writeNode("featureOfInterest", options.foi, node);\n
                }\n
                this.writeNode("responseFormat", options, node);\n
                if (options.resultModel) {\n
                    this.writeNode("resultModel", options, node);\n
                }\n
                if (options.responseMode) {\n
                    this.writeNode("responseMode", options, node);\n
                }\n
                return node; \n
            },\n
            "featureOfInterest": function(foi) {\n
                var node = this.createElementNSPlus("featureOfInterest");\n
                this.writeNode("ObjectID", foi.objectId, node);\n
                return node;\n
            },\n
            "ObjectID": function(options) {\n
                return this.createElementNSPlus("ObjectID",\n
                    {value: options});\n
            },\n
            "responseFormat": function(options) {\n
                return this.createElementNSPlus("responseFormat", \n
                    {value: options.responseFormat});\n
            },\n
            "procedure": function(procedure) {\n
                return this.createElementNSPlus("procedure", \n
                    {value: procedure});\n
            },\n
            "offering": function(options) {\n
                return this.createElementNSPlus("offering", {value: \n
                    options.offering});\n
            },\n
            "observedProperty": function(observedProperty) {\n
                return this.createElementNSPlus("observedProperty", \n
                    {value: observedProperty});\n
            },\n
            "eventTime": function(options) {\n
                var node = this.createElementNSPlus("eventTime");\n
                if (options.eventTime === \'latest\') {\n
                    this.writeNode("ogc:TM_Equals", options, node);\n
                }\n
                return node;\n
            },\n
            "resultModel": function(options) {\n
                return this.createElementNSPlus("resultModel", {value: \n
                    options.resultModel});\n
            },\n
            "responseMode": function(options) {\n
                return this.createElementNSPlus("responseMode", {value: \n
                    options.responseMode});\n
            }\n
        },\n
        "ogc": {\n
            "TM_Equals": function(options) {\n
                var node = this.createElementNSPlus("ogc:TM_Equals");\n
                this.writeNode("ogc:PropertyName", {property: \n
                    "urn:ogc:data:time:iso8601"}, node);\n
                if (options.eventTime === \'latest\') {\n
                    this.writeNode("gml:TimeInstant", {value: \'latest\'}, node);\n
                }\n
                return node;\n
            },\n
            "PropertyName": function(options) {\n
                return this.createElementNSPlus("ogc:PropertyName", \n
                    {value: options.property});\n
            }\n
        },\n
        "gml": {\n
            "TimeInstant": function(options) {\n
                var node = this.createElementNSPlus("gml:TimeInstant");\n
                this.writeNode("gml:timePosition", options, node);\n
                return node;\n
            },\n
            "timePosition": function(options) {\n
                var node = this.createElementNSPlus("gml:timePosition", \n
                    {value: options.value});\n
                return node;\n
            }\n
        }\n
    },\n
    \n
    CLASS_NAME: "OpenLayers.Format.SOSGetObservation" \n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>11307</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.91</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>QueryStringFilter.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Console.js\n
 * @requires OpenLayers/Format.js\n
 * @requires OpenLayers/Filter/Spatial.js\n
 * @requires OpenLayers/Filter/Comparison.js\n
 * @requires OpenLayers/Filter/Logical.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.QueryStringFilter\n
 * Parser for reading a query string and creating a simple filter.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Format>\n
 */\n
OpenLayers.Format.QueryStringFilter = (function() {\n
\n
    /** \n
     * Map the OpenLayers.Filter.Comparison types to the operation strings of \n
     * the protocol.\n
     */\n
    var cmpToStr = {};\n
    cmpToStr[OpenLayers.Filter.Comparison.EQUAL_TO] = "eq";\n
    cmpToStr[OpenLayers.Filter.Comparison.NOT_EQUAL_TO] = "ne";\n
    cmpToStr[OpenLayers.Filter.Comparison.LESS_THAN] = "lt";\n
    cmpToStr[OpenLayers.Filter.Comparison.LESS_THAN_OR_EQUAL_TO] = "lte";\n
    cmpToStr[OpenLayers.Filter.Comparison.GREATER_THAN] = "gt";\n
    cmpToStr[OpenLayers.Filter.Comparison.GREATER_THAN_OR_EQUAL_TO] = "gte";\n
    cmpToStr[OpenLayers.Filter.Comparison.LIKE] = "ilike";\n
\n
    /**\n
     * Function: regex2value\n
     * Convert the value from a regular expression string to a LIKE/ILIKE\n
     * string known to the web service.\n
     *\n
     * Parameters:\n
     * value - {String} The regex string.\n
     *\n
     * Returns:\n
     * {String} The converted string.\n
     */\n
    function regex2value(value) {\n
\n
        // highly sensitive!! Do not change this without running the\n
        // Protocol/HTTP.html unit tests\n
\n
        // convert % to \\%\n
        value = value.replace(/%/g, "\\\\%");\n
\n
        // convert \\\\. to \\\\_ (\\\\.* occurences converted later)\n
        value = value.replace(/\\\\\\\\\\.(\\*)?/g, function($0, $1) {\n
            return $1 ? $0 : "\\\\\\\\_";\n
        });\n
\n
        // convert \\\\.* to \\\\%\n
        value = value.replace(/\\\\\\\\\\.\\*/g, "\\\\\\\\%");\n
\n
        // convert . to _ (\\. and .* occurences converted later)\n
        value = value.replace(/(\\\\)?\\.(\\*)?/g, function($0, $1, $2) {\n
            return $1 || $2 ? $0 : "_";\n
        });\n
\n
        // convert .* to % (\\.* occurnces converted later)\n
        value = value.replace(/(\\\\)?\\.\\*/g, function($0, $1) {\n
            return $1 ? $0 : "%";\n
        });\n
\n
        // convert \\. to .\n
        value = value.replace(/\\\\\\./g, ".");\n
\n
        // replace \\* with * (watching out for \\\\*)\n
        value = value.replace(/(\\\\)?\\\\\\*/g, function($0, $1) {\n
            return $1 ? $0 : "*";\n
        });\n
\n
        return value;\n
    }\n
    \n
    return OpenLayers.Class(OpenLayers.Format, {\n
        \n
        /**\n
         * Property: wildcarded.\n
         * {Boolean} If true percent signs are added around values\n
         *     read from LIKE filters, for example if the protocol\n
         *     read method is passed a LIKE filter whose property\n
         *     is "foo" and whose value is "bar" the string\n
         *     "foo__ilike=%bar%" will be sent in the query string;\n
         *     defaults to false.\n
         */\n
        wildcarded: false,\n
\n
        /**\n
         * APIProperty: srsInBBOX\n
         * {Boolean} Include the SRS identifier in BBOX query string parameter.  \n
         *     Default is false.  If true and the layer has a projection object set,\n
         *     any BBOX filter will be serialized with a fifth item identifying the\n
         *     projection.  E.g. bbox=-1000,-1000,1000,1000,EPSG:900913\n
         */\n
        srsInBBOX: false,\n
\n
        /**\n
         * APIMethod: write\n
         * Serialize an <OpenLayers.Filter> objects using the "simple" filter syntax for \n
         *     query string parameters.  This function must be called as a method of\n
         *     a protocol instance.\n
         *\n
         * Parameters:\n
         * filter - {<OpenLayers.Filter>} filter to convert.\n
         * params - {Object} The parameters object.\n
         *\n
         * Returns:\n
         * {Object} The resulting parameters object.\n
         */\n
        write: function(filter, params) {\n
            params = params || {};\n
            var className = filter.CLASS_NAME;\n
            var filterType = className.substring(className.lastIndexOf(".") + 1);\n
            switch (filterType) {\n
                case "Spatial":\n
                    switch (filter.type) {\n
                        case OpenLayers.Filter.Spatial.BBOX:\n
                            params.bbox = filter.value.toArray();\n
                            if (this.srsInBBOX && filter.projection) {\n
                                params.bbox.push(filter.projection.getCode());\n
                            }\n
                            break;\n
                        case OpenLayers.Filter.Spatial.DWITHIN:\n
                            params.tolerance = filter.distance;\n
                            // no break here\n
                        case OpenLayers.Filter.Spatial.WITHIN:\n
                            params.lon = filter.value.x;\n
                            params.lat = filter.value.y;\n
                            break;\n
                        default:\n
                            OpenLayers.Console.warn(\n
                                "Unknown spatial filter type " + filter.type);\n
                    }\n
                    break;\n
                case "Comparison":\n
                    var op = cmpToStr[filter.type];\n
                    if (op !== undefined) {\n
                        var value = filter.value;\n
                        if (filter.type == OpenLayers.Filter.Comparison.LIKE) {\n
                            value = regex2value(value);\n
                            if (this.wildcarded) {\n
                                value = "%" + value + "%";\n
                            }\n
                        }\n
                        params[filter.property + "__" + op] = value;\n
                        params.queryable = params.queryable || [];\n
                        params.queryable.push(filter.property);\n
                    } else {\n
                        OpenLayers.Console.warn(\n
                            "Unknown comparison filter type " + filter.type);\n
                    }\n
                    break;\n
                case "Logical":\n
                    if (filter.type === OpenLayers.Filter.Logical.AND) {\n
                        for (var i=0,len=filter.filters.length; i<len; i++) {\n
                            params = this.write(filter.filters[i], params);\n
                        }\n
                    } else {\n
                        OpenLayers.Console.warn(\n
                            "Unsupported logical filter type " + filter.type);\n
                    }\n
                    break;\n
                default:\n
                    OpenLayers.Console.warn("Unknown filter type " + filterType);\n
            }\n
            return params;\n
        },\n
        \n
        CLASS_NAME: "OpenLayers.Format.QueryStringFilter"\n
        \n
    });\n
\n
\n
})();\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6971</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

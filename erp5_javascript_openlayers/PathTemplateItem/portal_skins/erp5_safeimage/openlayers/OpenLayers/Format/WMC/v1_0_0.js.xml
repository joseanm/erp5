<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.99</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>v1_0_0.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Format/WMC/v1.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.WMC.v1_0_0\n
 * Read and write WMC version 1.0.0.\n
 * \n
 * Inherits from:\n
 *  - <OpenLayers.Format.WMC.v1>\n
 */\n
OpenLayers.Format.WMC.v1_0_0 = OpenLayers.Class(\n
    OpenLayers.Format.WMC.v1, {\n
    \n
    /**\n
     * Constant: VERSION\n
     * {String} 1.0.0\n
     */\n
    VERSION: "1.0.0",\n
    \n
    /**\n
     * Property: schemaLocation\n
     * {String} http://www.opengis.net/context\n
     *     http://schemas.opengis.net/context/1.0.0/context.xsd\n
     */\n
    schemaLocation: "http://www.opengis.net/context http://schemas.opengis.net/context/1.0.0/context.xsd",\n
\n
    /**\n
     * Constructor: OpenLayers.Format.WMC.v1_0_0\n
     * Instances of this class are not created directly.  Use the\n
     *     <OpenLayers.Format.WMC> constructor instead.\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object whose properties will be set on\n
     *     this instance.\n
     */\n
    initialize: function(options) {\n
        OpenLayers.Format.WMC.v1.prototype.initialize.apply(\n
            this, [options]\n
        );\n
    },\n
\n
    /**\n
     * Method: read_wmc_SRS\n
     */\n
    read_wmc_SRS: function(layerContext, node) {\n
        var srs    = this.getChildValue(node);\n
        if (typeof layerContext.projections != "object") {\n
            layerContext.projections = {};\n
        }\n
        var values = srs.split(/ +/);\n
        for (var i=0, len=values.length; i<len; i++) {\n
            layerContext.projections[values[i]] = true;\n
        }\n
    },\n
\n
    /**\n
     * Method: write_wmc_Layer\n
     * Create a Layer node given a layer context object. This method adds\n
     *     elements specific to version 1.0.0.\n
     *\n
     * Parameters:\n
     * context - {Object} A layer context object.}\n
     *\n
     * Returns:\n
     * {Element} A WMC Layer element node.\n
     */\n
    write_wmc_Layer: function(context) {\n
        var node = OpenLayers.Format.WMC.v1.prototype.write_wmc_Layer.apply(\n
            this, [context]\n
        );\n
    \n
        // optional SRS element(s)\n
        if (context.srs) {\n
            var projections = [];\n
            for(var name in context.srs) {\n
                projections.push(name);\n
            }\n
            node.appendChild(this.createElementDefaultNS("SRS", projections.join(" ")));\n
        }\n
\n
        // optional FormatList element\n
        node.appendChild(this.write_wmc_FormatList(context));\n
\n
        // optional StyleList element\n
        node.appendChild(this.write_wmc_StyleList(context));\n
        \n
        // optional DimensionList element\n
        if (context.dimensions) {\n
            node.appendChild(this.write_wmc_DimensionList(context));\n
        }\n
\n
        // OpenLayers specific properties go in an Extension element\n
        node.appendChild(this.write_wmc_LayerExtension(context));\n
    },    \n
\n
    CLASS_NAME: "OpenLayers.Format.WMC.v1_0_0" \n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3097</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

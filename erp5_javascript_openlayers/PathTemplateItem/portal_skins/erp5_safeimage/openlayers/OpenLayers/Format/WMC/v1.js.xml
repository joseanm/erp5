<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.99</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>v1.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Format/WMC.js\n
 * @requires OpenLayers/Format/XML.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.WMC.v1\n
 * Superclass for WMC version 1 parsers.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Format.XML>\n
 */\n
OpenLayers.Format.WMC.v1 = OpenLayers.Class(OpenLayers.Format.XML, {\n
    \n
    /**\n
     * Property: namespaces\n
     * {Object} Mapping of namespace aliases to namespace URIs.\n
     */\n
    namespaces: {\n
        ol: "http://openlayers.org/context",\n
        wmc: "http://www.opengis.net/context",\n
        sld: "http://www.opengis.net/sld",\n
        xlink: "http://www.w3.org/1999/xlink",\n
        xsi: "http://www.w3.org/2001/XMLSchema-instance"\n
    },\n
    \n
    /**\n
     * Property: schemaLocation\n
     * {String} Schema location for a particular minor version.\n
     */\n
    schemaLocation: "",\n
\n
    /**\n
     * Method: getNamespacePrefix\n
     * Get the namespace prefix for a given uri from the <namespaces> object.\n
     *\n
     * Returns:\n
     * {String} A namespace prefix or null if none found.\n
     */\n
    getNamespacePrefix: function(uri) {\n
        var prefix = null;\n
        if(uri == null) {\n
            prefix = this.namespaces[this.defaultPrefix];\n
        } else {\n
            for(prefix in this.namespaces) {\n
                if(this.namespaces[prefix] == uri) {\n
                    break;\n
                }\n
            }\n
        }\n
        return prefix;\n
    },\n
    \n
    /**\n
     * Property: defaultPrefix\n
     */\n
    defaultPrefix: "wmc",\n
\n
    /**\n
     * Property: rootPrefix\n
     * {String} Prefix on the root node that maps to the context namespace URI.\n
     */\n
    rootPrefix: null,\n
    \n
    /**\n
     * Property: defaultStyleName\n
     * {String} Style name used if layer has no style param.  Default is "".\n
     */\n
    defaultStyleName: "",\n
    \n
    /**\n
     * Property: defaultStyleTitle\n
     * {String} Default style title.  Default is "Default".\n
     */\n
    defaultStyleTitle: "Default",\n
    \n
    /**\n
     * Constructor: OpenLayers.Format.WMC.v1\n
     * Instances of this class are not created directly.  Use the\n
     *     <OpenLayers.Format.WMC> constructor instead.\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object whose properties will be set on\n
     *     this instance.\n
     */\n
    initialize: function(options) {\n
        OpenLayers.Format.XML.prototype.initialize.apply(this, [options]);\n
    },\n
\n
    /**\n
     * Method: read\n
     * Read capabilities data from a string, and return a list of layers. \n
     * \n
     * Parameters: \n
     * data - {String} or {DOMElement} data to read/parse.\n
     *\n
     * Returns:\n
     * {Array} List of named layers.\n
     */\n
    read: function(data) {\n
        if(typeof data == "string") {\n
            data = OpenLayers.Format.XML.prototype.read.apply(this, [data]);\n
        }\n
        var root = data.documentElement;\n
        this.rootPrefix = root.prefix;\n
        var context = {\n
            version: root.getAttribute("version")\n
        };\n
        this.runChildNodes(context, root);\n
        return context;\n
    },\n
    \n
    /**\n
     * Method: runChildNodes\n
     */\n
    runChildNodes: function(obj, node) {\n
        var children = node.childNodes;\n
        var childNode, processor, prefix, local;\n
        for(var i=0, len=children.length; i<len; ++i) {\n
            childNode = children[i];\n
            if(childNode.nodeType == 1) {\n
                prefix = this.getNamespacePrefix(childNode.namespaceURI);\n
                local = childNode.nodeName.split(":").pop();\n
                processor = this["read_" + prefix + "_" + local];\n
                if(processor) {\n
                    processor.apply(this, [obj, childNode]);\n
                }\n
            }\n
        }\n
    },\n
    \n
    /**\n
     * Method: read_wmc_General\n
     */\n
    read_wmc_General: function(context, node) {\n
        this.runChildNodes(context, node);\n
    },\n
    \n
    /**\n
     * Method: read_wmc_BoundingBox\n
     */\n
    read_wmc_BoundingBox: function(context, node) {\n
        context.projection = node.getAttribute("SRS");\n
        context.bounds = new OpenLayers.Bounds(\n
            node.getAttribute("minx"), node.getAttribute("miny"),\n
            node.getAttribute("maxx"), node.getAttribute("maxy")\n
        );\n
    },\n
    \n
    /**\n
     * Method: read_wmc_LayerList\n
     */\n
    read_wmc_LayerList: function(context, node) {\n
        // layersContext is an array containing info for each layer\n
        context.layersContext = [];\n
        this.runChildNodes(context, node);\n
    },\n
    \n
    /**\n
     * Method: read_wmc_Layer\n
     */\n
    read_wmc_Layer: function(context, node) {\n
        var layerContext = {\n
            visibility: (node.getAttribute("hidden") != "1"),\n
            queryable: (node.getAttribute("queryable") == "1"),\n
            formats: [],\n
             styles: [],\n
             metadata: {}\n
        };\n
\n
        this.runChildNodes(layerContext, node);\n
        // set properties common to multiple objects on layer options/params\n
        context.layersContext.push(layerContext);\n
    },\n
    \n
    /**\n
     * Method: read_wmc_Extension\n
     */\n
    read_wmc_Extension: function(obj, node) {\n
        this.runChildNodes(obj, node);\n
    },\n
\n
    /**\n
     * Method: read_ol_units\n
     */\n
    read_ol_units: function(layerContext, node) {\n
        layerContext.units = this.getChildValue(node);\n
    },\n
    \n
    /**\n
     * Method: read_ol_maxExtent\n
     */\n
    read_ol_maxExtent: function(obj, node) {\n
        var bounds = new OpenLayers.Bounds(\n
            node.getAttribute("minx"), node.getAttribute("miny"),\n
            node.getAttribute("maxx"), node.getAttribute("maxy")\n
        );\n
        obj.maxExtent = bounds;\n
    },\n
    \n
    /**\n
     * Method: read_ol_transparent\n
     */\n
    read_ol_transparent: function(layerContext, node) {\n
        layerContext.transparent = this.getChildValue(node);\n
    },\n
\n
    /**\n
     * Method: read_ol_numZoomLevels\n
     */\n
    read_ol_numZoomLevels: function(layerContext, node) {\n
        layerContext.numZoomLevels = parseInt(this.getChildValue(node));\n
    },\n
\n
    /**\n
     * Method: read_ol_opacity\n
     */\n
    read_ol_opacity: function(layerContext, node) {\n
        layerContext.opacity = parseFloat(this.getChildValue(node));\n
    },\n
\n
    /**\n
     * Method: read_ol_singleTile\n
     */\n
    read_ol_singleTile: function(layerContext, node) {\n
        layerContext.singleTile = (this.getChildValue(node) == "true");\n
    },\n
\n
    /**\n
     * Method: read_ol_tileSize\n
     */\n
    read_ol_tileSize: function(layerContext, node) {\n
        var obj = {"width": node.getAttribute("width"), "height": node.getAttribute("height")};\n
        layerContext.tileSize = obj;\n
    },\n
    \n
    /**\n
     * Method: read_ol_isBaseLayer\n
     */\n
    read_ol_isBaseLayer: function(layerContext, node) {\n
        layerContext.isBaseLayer = (this.getChildValue(node) == "true");\n
    },\n
\n
    /**\n
     * Method: read_ol_displayInLayerSwitcher\n
     */\n
    read_ol_displayInLayerSwitcher: function(layerContext, node) {\n
        layerContext.displayInLayerSwitcher = (this.getChildValue(node) == "true");\n
    },\n
\n
    /**\n
     * Method: read_wmc_Server\n
     */\n
    read_wmc_Server: function(layerContext, node) {\n
        layerContext.version = node.getAttribute("version");\n
         layerContext.url = this.getOnlineResource_href(node);\n
         layerContext.metadata.servertitle = node.getAttribute("title");\n
    },\n
\n
    /**\n
     * Method: read_wmc_FormatList\n
     */\n
    read_wmc_FormatList: function(layerContext, node) {\n
        this.runChildNodes(layerContext, node);\n
    },\n
\n
    /**\n
     * Method: read_wmc_Format\n
     */\n
    read_wmc_Format: function(layerContext, node) {\n
        var format = {\n
            value: this.getChildValue(node)\n
        };\n
        if(node.getAttribute("current") == "1") {\n
            format.current = true;\n
        }\n
        layerContext.formats.push(format);\n
    },\n
    \n
    /**\n
     * Method: read_wmc_StyleList\n
     */\n
    read_wmc_StyleList: function(layerContext, node) {\n
        this.runChildNodes(layerContext, node);\n
    },\n
\n
    /**\n
     * Method: read_wmc_Style\n
     */\n
    read_wmc_Style: function(layerContext, node) {\n
        var style = {};\n
        this.runChildNodes(style, node);\n
        if(node.getAttribute("current") == "1") {\n
            style.current = true;\n
        }\n
        layerContext.styles.push(style);\n
    },\n
    \n
    /**\n
     * Method: read_wmc_SLD\n
     */\n
    read_wmc_SLD: function(style, node) {\n
        this.runChildNodes(style, node);\n
        // style either comes back with an href or a body property\n
    },\n
    \n
    /**\n
     * Method: read_sld_StyledLayerDescriptor\n
     */\n
    read_sld_StyledLayerDescriptor: function(sld, node) {\n
        var xml = OpenLayers.Format.XML.prototype.write.apply(this, [node]);\n
        sld.body = xml;\n
    },\n
\n
    /**\n
      * Method: read_sld_FeatureTypeStyle\n
      */\n
     read_sld_FeatureTypeStyle: function(sld, node) {\n
         var xml = OpenLayers.Format.XML.prototype.write.apply(this, [node]);\n
         sld.body = xml;\n
     },\n
\n
     /**\n
     * Method: read_wmc_OnlineResource\n
     */\n
    read_wmc_OnlineResource: function(obj, node) {\n
        obj.href = this.getAttributeNS(\n
            node, this.namespaces.xlink, "href"\n
        );\n
    },\n
    \n
    /**\n
     * Method: read_wmc_Name\n
     */\n
    read_wmc_Name: function(obj, node) {\n
        var name = this.getChildValue(node);\n
        if(name) {\n
            obj.name = name;\n
        }\n
    },\n
\n
    /**\n
     * Method: read_wmc_Title\n
     */\n
    read_wmc_Title: function(obj, node) {\n
        var title = this.getChildValue(node);\n
        if(title) {\n
            obj.title = title;\n
        }\n
    },\n
\n
    /**\n
     * Method: read_wmc_MetadataURL\n
     */\n
    read_wmc_MetadataURL: function(layerContext, node) {\n
         layerContext.metadataURL = this.getOnlineResource_href(node);\n
     },\n
\n
     /**\n
      * Method: read_wmc_KeywordList\n
      */\n
     read_wmc_KeywordList: function(context, node) {\n
         context.keywords = [];\n
         this.runChildNodes(context.keywords, node);\n
    },\n
\n
    /**\n
      * Method: read_wmc_Keyword\n
      */\n
     read_wmc_Keyword: function(keywords, node) {\n
         keywords.push(this.getChildValue(node));\n
     },\n
\n
     /**\n
     * Method: read_wmc_Abstract\n
     */\n
    read_wmc_Abstract: function(obj, node) {\n
        var abst = this.getChildValue(node);\n
        if(abst) {\n
            obj["abstract"] = abst;\n
        }\n
    },\n
    \n
    /**\n
      * Method: read_wmc_LogoURL\n
      */\n
     read_wmc_LogoURL: function(context, node) {\n
         context.logo = {\n
             width:  node.getAttribute("width"),\n
             height: node.getAttribute("height"),\n
             format: node.getAttribute("format"),\n
             href:   this.getOnlineResource_href(node)\n
         };\n
     },\n
\n
     /**\n
      * Method: read_wmc_DescriptionURL\n
      */\n
     read_wmc_DescriptionURL: function(context, node) {\n
         context.descriptionURL = this.getOnlineResource_href(node);\n
     },\n
\n
     /**\n
      * Method: read_wmc_ContactInformation\n
     */\n
     read_wmc_ContactInformation: function(obj, node) {\n
         var contact = {};\n
         this.runChildNodes(contact, node);\n
         obj.contactInformation = contact;\n
     },\n
\n
     /**\n
      * Method: read_wmc_ContactPersonPrimary\n
      */\n
     read_wmc_ContactPersonPrimary: function(contact, node) {\n
         var personPrimary = {};\n
         this.runChildNodes(personPrimary, node);\n
         contact.personPrimary = personPrimary;\n
     },\n
\n
     /**\n
      * Method: read_wmc_ContactPerson\n
      */\n
     read_wmc_ContactPerson: function(primaryPerson, node) {\n
         var person = this.getChildValue(node);\n
         if (person) {\n
             primaryPerson.person = person;\n
         }\n
     },\n
\n
     /**\n
      * Method: read_wmc_ContactOrganization\n
      */\n
     read_wmc_ContactOrganization: function(primaryPerson, node) {\n
         var organization = this.getChildValue(node);\n
         if (organization) {\n
             primaryPerson.organization = organization;\n
         }\n
     },\n
\n
     /**\n
      * Method: read_wmc_ContactPosition\n
      */\n
     read_wmc_ContactPosition: function(contact, node) {\n
         var position = this.getChildValue(node);\n
         if (position) {\n
             contact.position = position;\n
         }\n
     },\n
\n
     /**\n
      * Method: read_wmc_ContactAddress\n
      */\n
     read_wmc_ContactAddress: function(contact, node) {\n
         var contactAddress = {};\n
         this.runChildNodes(contactAddress, node);\n
         contact.contactAddress = contactAddress;\n
     },\n
\n
     /**\n
      * Method: read_wmc_AddressType\n
      */\n
     read_wmc_AddressType: function(contactAddress, node) {\n
         var type = this.getChildValue(node);\n
         if (type) {\n
             contactAddress.type = type;\n
         }\n
     },\n
\n
     /**\n
      * Method: read_wmc_Address\n
      */\n
     read_wmc_Address: function(contactAddress, node) {\n
         var address = this.getChildValue(node);\n
         if (address) {\n
             contactAddress.address = address;\n
         }\n
     },\n
\n
     /**\n
      * Method: read_wmc_City\n
      */\n
     read_wmc_City: function(contactAddress, node) {\n
         var city = this.getChildValue(node);\n
         if (city) {\n
             contactAddress.city = city;\n
         }\n
     },\n
\n
     /**\n
      * Method: read_wmc_StateOrProvince\n
      */\n
     read_wmc_StateOrProvince: function(contactAddress, node) {\n
         var stateOrProvince = this.getChildValue(node);\n
         if (stateOrProvince) {\n
             contactAddress.stateOrProvince = stateOrProvince;\n
         }\n
     },\n
\n
     /**\n
      * Method: read_wmc_PostCode\n
      */\n
     read_wmc_PostCode: function(contactAddress, node) {\n
         var postcode = this.getChildValue(node);\n
         if (postcode) {\n
             contactAddress.postcode = postcode;\n
         }\n
     },\n
\n
     /**\n
      * Method: read_wmc_Country\n
      */\n
     read_wmc_Country: function(contactAddress, node) {\n
         var country = this.getChildValue(node);\n
         if (country) {\n
             contactAddress.country = country;\n
         }\n
     },\n
\n
     /**\n
      * Method: read_wmc_ContactVoiceTelephone\n
      */\n
     read_wmc_ContactVoiceTelephone: function(contact, node) {\n
         var phone = this.getChildValue(node);\n
         if (phone) {\n
             contact.phone = phone;\n
         }\n
     },\n
\n
     /**\n
      * Method: read_wmc_ContactFacsimileTelephone\n
      */\n
     read_wmc_ContactFacsimileTelephone: function(contact, node) {\n
         var fax = this.getChildValue(node);\n
         if (fax) {\n
             contact.fax = fax;\n
         }\n
     },\n
\n
     /**\n
      * Method: read_wmc_ContactElectronicMailAddress\n
      */\n
     read_wmc_ContactElectronicMailAddress: function(contact, node) {\n
         var email = this.getChildValue(node);\n
         if (email) {\n
             contact.email = email;\n
         }\n
     },\n
\n
     /**\n
      * Method: read_wmc_DataURL\n
      */\n
     read_wmc_DataURL: function(layerContext, node) {\n
         layerContext.dataURL = this.getOnlineResource_href(node);\n
     },\n
\n
     /**\n
     * Method: read_wmc_LegendURL\n
     */\n
    read_wmc_LegendURL: function(style, node) {\n
        var legend = {\n
            width: node.getAttribute(\'width\'),\n
             height: node.getAttribute(\'height\'),\n
             format: node.getAttribute(\'format\'),\n
             href:   this.getOnlineResource_href(node)\n
        };\n
        style.legend = legend;\n
    },\n
    \n
    /**\n
      * Method: read_wmc_DimensionList\n
      */\n
     read_wmc_DimensionList: function(layerContext, node) {\n
         layerContext.dimensions = {};\n
         this.runChildNodes(layerContext.dimensions, node);\n
     },\n
     /**\n
      * Method: read_wmc_Dimension\n
      */\n
     read_wmc_Dimension: function(dimensions, node) {\n
         var name = node.getAttribute("name").toLowerCase();\n
\n
         var dim = {\n
             name:           name,\n
             units:          node.getAttribute("units")          ||  "",\n
             unitSymbol:     node.getAttribute("unitSymbol")     ||  "",\n
             userValue:      node.getAttribute("userValue")      ||  "",\n
             nearestValue:   node.getAttribute("nearestValue")   === "1",\n
             multipleValues: node.getAttribute("multipleValues") === "1",\n
             current:        node.getAttribute("current")        === "1",\n
             "default":      node.getAttribute("default")        ||  ""\n
         };\n
         var values = this.getChildValue(node);\n
         dim.values = values.split(",");\n
\n
         dimensions[dim.name] = dim;\n
     },\n
\n
     /**\n
     * Method: write\n
     *\n
     * Parameters:\n
     * context - {Object} An object representing the map context.\n
     * options - {Object} Optional object.\n
     *\n
     * Returns:\n
     * {String} A WMC document string.\n
     */\n
    write: function(context, options) {\n
        var root = this.createElementDefaultNS("ViewContext");\n
        this.setAttributes(root, {\n
            version: this.VERSION,\n
            id: (options && typeof options.id == "string") ?\n
                    options.id :\n
                    OpenLayers.Util.createUniqueID("OpenLayers_Context_")\n
        });\n
        \n
        // add schemaLocation attribute\n
        this.setAttributeNS(\n
            root, this.namespaces.xsi,\n
            "xsi:schemaLocation", this.schemaLocation\n
        );\n
        \n
        // required General element\n
        root.appendChild(this.write_wmc_General(context));\n
\n
        // required LayerList element\n
        root.appendChild(this.write_wmc_LayerList(context));\n
\n
        return OpenLayers.Format.XML.prototype.write.apply(this, [root]);\n
    },\n
    \n
    /**\n
     * Method: createElementDefaultNS\n
     * Shorthand for createElementNS with namespace from <defaultPrefix>.\n
     *     Can optionally be used to set attributes and a text child value.\n
     *\n
     * Parameters:\n
     * name - {String} The qualified node name.\n
     * childValue - {String} Optional value for text child node.\n
     * attributes - {Object} Optional object representing attributes.\n
     *\n
     * Returns:\n
     * {Element} An element node.\n
     */\n
    createElementDefaultNS: function(name, childValue, attributes) {\n
        var node = this.createElementNS(\n
            this.namespaces[this.defaultPrefix],\n
            name\n
        );\n
        if(childValue) {\n
            node.appendChild(this.createTextNode(childValue));\n
        }\n
        if(attributes) {\n
            this.setAttributes(node, attributes);\n
        }\n
        return node;\n
    },\n
    \n
    /**\n
     * Method: setAttributes\n
     * Set multiple attributes given key value pairs from an object.\n
     *\n
     * Parameters:\n
     * node - {Element} An element node.\n
     * obj - {Object} An object whose properties represent attribute names and\n
     *     values represent attribute values.\n
     */\n
    setAttributes: function(node, obj) {\n
        var value;\n
        for(var name in obj) {\n
            value = obj[name].toString();\n
            if(value.match(/[A-Z]/)) {\n
                // safari lowercases attributes with setAttribute\n
                this.setAttributeNS(node, null, name, value);\n
            } else {\n
                node.setAttribute(name, value);\n
            }\n
        }\n
    },\n
\n
    /**\n
     * Method: write_wmc_General\n
     * Create a General node given an context object.\n
     *\n
     * Parameters:\n
     * context - {Object} Context object.\n
     *\n
     * Returns:\n
     * {Element} A WMC General element node.\n
     */\n
    write_wmc_General: function(context) {\n
        var node = this.createElementDefaultNS("General");\n
\n
        // optional Window element\n
        if(context.size) {\n
            node.appendChild(this.createElementDefaultNS(\n
                "Window", null,\n
                {\n
                    width: context.size.w,\n
                    height: context.size.h\n
                }\n
            ));\n
        }\n
        \n
        // required BoundingBox element\n
        var bounds = context.bounds;\n
        node.appendChild(this.createElementDefaultNS(\n
            "BoundingBox", null,\n
            {\n
                minx: bounds.left.toPrecision(18),\n
                miny: bounds.bottom.toPrecision(18),\n
                maxx: bounds.right.toPrecision(18),\n
                maxy: bounds.top.toPrecision(18),\n
                SRS: context.projection\n
            }\n
        ));\n
\n
        // required Title element\n
        node.appendChild(this.createElementDefaultNS(\n
            "Title", context.title\n
        ));\n
        \n
         // optional KeywordList element\n
         if (context.keywords) {\n
             node.appendChild(this.write_wmc_KeywordList(context.keywords));\n
         }\n
\n
         // optional Abstract element\n
         if (context["abstract"]) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "Abstract", context["abstract"]\n
             ));\n
         }\n
\n
         // Optional LogoURL element\n
         if (context.logo) {\n
             node.appendChild(this.write_wmc_URLType("LogoURL", context.logo.href, context.logo));\n
         }\n
\n
         // Optional DescriptionURL element\n
         if (context.descriptionURL) {\n
             node.appendChild(this.write_wmc_URLType("DescriptionURL", context.descriptionURL));\n
         }\n
\n
         // Optional ContactInformation element\n
         if (context.contactInformation) {\n
             node.appendChild(this.write_wmc_ContactInformation(context.contactInformation));\n
         }\n
\n
        // OpenLayers specific map properties\n
        node.appendChild(this.write_ol_MapExtension(context));\n
        \n
        return node;\n
    },\n
    \n
    /**\n
      * Method: write_wmc_KeywordList\n
      */\n
     write_wmc_KeywordList: function(keywords) {\n
         var node = this.createElementDefaultNS("KeywordList");\n
\n
         for (var i=0, len=keywords.length; i<len; i++) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "Keyword", keywords[i]\n
             ));\n
         }\n
         return node;\n
     },\n
     /**\n
      * Method: write_wmc_ContactInformation\n
      */\n
     write_wmc_ContactInformation: function(contact) {\n
         var node = this.createElementDefaultNS("ContactInformation");\n
\n
         if (contact.personPrimary) {\n
             node.appendChild(this.write_wmc_ContactPersonPrimary(contact.personPrimary));\n
         }\n
         if (contact.position) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "ContactPosition", contact.position\n
             ));\n
         }\n
         if (contact.contactAddress) {\n
             node.appendChild(this.write_wmc_ContactAddress(contact.contactAddress));\n
         }\n
         if (contact.phone) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "ContactVoiceTelephone", contact.phone\n
             ));\n
         }\n
         if (contact.fax) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "ContactFacsimileTelephone", contact.fax\n
             ));\n
         }\n
         if (contact.email) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "ContactElectronicMailAddress", contact.email\n
             ));\n
         }\n
         return node;\n
     },\n
\n
     /**\n
      * Method: write_wmc_ContactPersonPrimary\n
      */\n
     write_wmc_ContactPersonPrimary: function(personPrimary) {\n
         var node = this.createElementDefaultNS("ContactPersonPrimary");\n
         if (personPrimary.person) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "ContactPerson", personPrimary.person\n
             ));\n
         }\n
         if (personPrimary.organization) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "ContactOrganization", personPrimary.organization\n
             ));\n
         }\n
         return node;\n
     },\n
\n
     /**\n
      * Method: write_wmc_ContactAddress\n
      */\n
     write_wmc_ContactAddress: function(contactAddress) {\n
         var node = this.createElementDefaultNS("ContactAddress");\n
         if (contactAddress.type) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "AddressType", contactAddress.type\n
             ));\n
         }\n
         if (contactAddress.address) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "Address", contactAddress.address\n
             ));\n
         }\n
         if (contactAddress.city) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "City", contactAddress.city\n
             ));\n
         }\n
         if (contactAddress.stateOrProvince) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "StateOrProvince", contactAddress.stateOrProvince\n
             ));\n
         }\n
         if (contactAddress.postcode) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "PostCode", contactAddress.postcode\n
             ));\n
         }\n
         if (contactAddress.country) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "Country", contactAddress.country\n
             ));\n
         }\n
         return node;\n
     },\n
\n
     /**\n
     * Method: write_ol_MapExtension\n
     */\n
    write_ol_MapExtension: function(context) {\n
        var node = this.createElementDefaultNS("Extension");\n
        \n
        var bounds = context.maxExtent;\n
        if(bounds) {\n
            var maxExtent = this.createElementNS(\n
                this.namespaces.ol, "ol:maxExtent"\n
            );\n
            this.setAttributes(maxExtent, {\n
                minx: bounds.left.toPrecision(18),\n
                miny: bounds.bottom.toPrecision(18),\n
                maxx: bounds.right.toPrecision(18),\n
                maxy: bounds.top.toPrecision(18)\n
            });\n
            node.appendChild(maxExtent);\n
        }\n
        \n
        return node;\n
    },\n
    \n
    /**\n
     * Method: write_wmc_LayerList\n
     * Create a LayerList node given an context object.\n
     *\n
     * Parameters:\n
     * context - {Object} Context object.\n
     *\n
     * Returns:\n
     * {Element} A WMC LayerList element node.\n
     */\n
    write_wmc_LayerList: function(context) {\n
        var list = this.createElementDefaultNS("LayerList");\n
        \n
        for(var i=0, len=context.layersContext.length; i<len; ++i) {\n
            list.appendChild(this.write_wmc_Layer(context.layersContext[i]));\n
        }\n
        \n
        return list;\n
    },\n
\n
    /**\n
     * Method: write_wmc_Layer\n
     * Create a Layer node given a layer context object.\n
     *\n
     * Parameters:\n
     * context - {Object} A layer context object.}\n
     *\n
     * Returns:\n
     * {Element} A WMC Layer element node.\n
     */\n
    write_wmc_Layer: function(context) {\n
        var node = this.createElementDefaultNS(\n
            "Layer", null, {\n
                queryable: context.queryable ? "1" : "0",\n
                hidden: context.visibility ? "0" : "1"\n
            }\n
        );\n
        \n
        // required Server element\n
        node.appendChild(this.write_wmc_Server(context));\n
\n
        // required Name element\n
        node.appendChild(this.createElementDefaultNS(\n
            "Name", context.name\n
        ));\n
        \n
        // required Title element\n
        node.appendChild(this.createElementDefaultNS(\n
            "Title", context.title\n
        ));\n
\n
         // optional Abstract element\n
         if (context["abstract"]) {\n
             node.appendChild(this.createElementDefaultNS(\n
                 "Abstract", context["abstract"]\n
             ));\n
         }\n
\n
         // optional DataURL element\n
         if (context.dataURL) {\n
             node.appendChild(this.write_wmc_URLType("DataURL", context.dataURL));\n
         }\n
\n
        // optional MetadataURL element\n
        if (context.metadataURL) {\n
             node.appendChild(this.write_wmc_URLType("MetadataURL", context.metadataURL));\n
        }\n
        \n
        return node;\n
    },\n
    \n
    /**\n
     * Method: write_wmc_LayerExtension\n
     * Add OpenLayers specific layer parameters to an Extension element.\n
     *\n
     * Parameters:\n
     * context - {Object} A layer context object.\n
     *\n
     * Returns:\n
     * {Element} A WMC Extension element (for a layer).\n
     */\n
    write_wmc_LayerExtension: function(context) {\n
        var node = this.createElementDefaultNS("Extension");\n
        \n
        var bounds = context.maxExtent;\n
        var maxExtent = this.createElementNS(\n
            this.namespaces.ol, "ol:maxExtent"\n
        );\n
        this.setAttributes(maxExtent, {\n
            minx: bounds.left.toPrecision(18),\n
            miny: bounds.bottom.toPrecision(18),\n
            maxx: bounds.right.toPrecision(18),\n
            maxy: bounds.top.toPrecision(18)\n
        });\n
        node.appendChild(maxExtent);\n
        \n
        if (context.tileSize && !context.singleTile) {\n
            var size = this.createElementNS(\n
                this.namespaces.ol, "ol:tileSize"\n
            );\n
            this.setAttributes(size, context.tileSize);\n
            node.appendChild(size);\n
        }\n
        \n
        var properties = [\n
            "transparent", "numZoomLevels", "units", "isBaseLayer",\n
            "opacity", "displayInLayerSwitcher", "singleTile"\n
        ];\n
        var child;\n
        for(var i=0, len=properties.length; i<len; ++i) {\n
            child = this.createOLPropertyNode(context, properties[i]);\n
            if(child) {\n
                node.appendChild(child);\n
            }\n
        }\n
\n
        return node;\n
    },\n
    \n
    /**\n
     * Method: createOLPropertyNode\n
     * Create a node representing an OpenLayers property.  If the property is\n
     *     null or undefined, null will be returned.\n
     *\n
     * Parameters:\n
     * obj - {Object} An object.\n
     * prop - {String} A property.\n
     *\n
     * Returns:\n
     * {Element} A property node.\n
     */\n
    createOLPropertyNode: function(obj, prop) {\n
        var node = null;\n
        if(obj[prop] != null) {\n
            node = this.createElementNS(this.namespaces.ol, "ol:" + prop);\n
            node.appendChild(this.createTextNode(obj[prop].toString()));\n
        }\n
        return node;\n
    },\n
\n
    /**\n
     * Method: write_wmc_Server\n
     * Create a Server node given a layer context object.\n
     *\n
     * Parameters:\n
     * context - {Object} Layer context object.\n
     *\n
     * Returns:\n
     * {Element} A WMC Server element node.\n
     */\n
    write_wmc_Server: function(context) {\n
         var server = context.server;\n
        var node = this.createElementDefaultNS("Server");\n
         var attributes = {\n
            service: "OGC:WMS",\n
             version: server.version\n
         };\n
         if (server.title) {\n
             attributes.title = server.title;\n
         }\n
         this.setAttributes(node, attributes);\n
        \n
        // required OnlineResource element\n
         node.appendChild(this.write_wmc_OnlineResource(server.url));\n
        \n
        return node;\n
    },\n
\n
    /**\n
     * Method: write_wmc_URLType\n
     * Create a LogoURL/DescriptionURL/MetadataURL/DataURL/LegendURL node given a object and elementName.\n
     *\n
     * Parameters:\n
     * elName - {String} Name of element (LogoURL/DescriptionURL/MetadataURL/LegendURL)\n
     * url - {String} URL string value\n
     * attr - {Object} Optional attributes (width, height, format)\n
     *\n
     * Returns:\n
     * {Element} A WMC element node.\n
     */\n
     write_wmc_URLType: function(elName, url, attr) {\n
         var node = this.createElementDefaultNS(elName);\n
         node.appendChild(this.write_wmc_OnlineResource(url));\n
         if (attr) {\n
             var optionalAttributes = ["width", "height", "format"];\n
             for (var i=0; i<optionalAttributes.length; i++) {\n
                 if (optionalAttributes[i] in attr) {\n
                     node.setAttribute(optionalAttributes[i], attr[optionalAttributes[i]]);\n
                 }\n
             }\n
         }\n
         return node;\n
     },\n
\n
     /**\n
      * Method: write_wmc_DimensionList\n
      */\n
     write_wmc_DimensionList: function(context) {\n
         var node = this.createElementDefaultNS("DimensionList");\n
         var required_attributes = {\n
             name: true,\n
             units: true,\n
             unitSymbol: true,\n
             userValue: true\n
         };\n
         for (var dim in context.dimensions) {\n
             var attributes = {};\n
             var dimension = context.dimensions[dim];\n
             for (var name in dimension) {\n
                 if (typeof dimension[name] == "boolean") {\n
                     attributes[name] = Number(dimension[name]);\n
                 } else {\n
                     attributes[name] = dimension[name];\n
                 }\n
             }\n
             var values = "";\n
             if (attributes.values) {\n
                 values = attributes.values.join(",");\n
                 delete attributes.values;\n
             }\n
\n
             node.appendChild(this.createElementDefaultNS(\n
                 "Dimension", values, attributes\n
             ));\n
         }\n
        return node;\n
    },\n
\n
    /**\n
     * Method: write_wmc_FormatList\n
     * Create a FormatList node given a layer context.\n
     *\n
     * Parameters:\n
     * context - {Object} Layer context object.\n
     *\n
     * Returns:\n
     * {Element} A WMC FormatList element node.\n
     */\n
    write_wmc_FormatList: function(context) {\n
        var node = this.createElementDefaultNS("FormatList");\n
        for (var i=0, len=context.formats.length; i<len; i++) {\n
            var format = context.formats[i];\n
            node.appendChild(this.createElementDefaultNS(\n
                "Format",\n
                format.value,\n
                (format.current && format.current == true) ?\n
                    {current: "1"} : null\n
            ));\n
        }\n
\n
        return node;\n
    },\n
\n
    /**\n
     * Method: write_wmc_StyleList\n
     * Create a StyleList node given a layer context.\n
     *\n
     * Parameters:\n
     * layer - {Object} Layer context object.\n
     *\n
     * Returns:\n
     * {Element} A WMC StyleList element node.\n
     */\n
    write_wmc_StyleList: function(layer) {\n
        var node = this.createElementDefaultNS("StyleList");\n
\n
        var styles = layer.styles;\n
        if (styles && OpenLayers.Util.isArray(styles)) {\n
            var sld;\n
            for (var i=0, len=styles.length; i<len; i++) {\n
                var s = styles[i];\n
                // three style types to consider\n
                // [1] linked SLD\n
                // [2] inline SLD\n
                // [3] named style\n
                // running child nodes always gets name, optionally gets href or body\n
                var style = this.createElementDefaultNS(\n
                    "Style",\n
                    null,\n
                    (s.current && s.current == true) ?\n
                    {current: "1"} : null\n
                );\n
                if(s.href) { // [1]\n
                    sld = this.createElementDefaultNS("SLD");\n
                     // Name is optional.\n
                     if (s.name) {\n
                    sld.appendChild(this.createElementDefaultNS("Name", s.name));\n
                     }\n
                    // Title is optional.\n
                    if (s.title) {\n
                        sld.appendChild(this.createElementDefaultNS("Title", s.title));\n
                    }\n
                     // LegendURL is optional\n
                     if (s.legend) {\n
                         sld.appendChild(this.write_wmc_URLType("LegendURL", s.legend.href, s.legend));\n
                     }\n
\n
                     var link = this.write_wmc_OnlineResource(s.href);\n
                     sld.appendChild(link);\n
                    style.appendChild(sld);\n
                } else if(s.body) { // [2]\n
                    sld = this.createElementDefaultNS("SLD");\n
                     // Name is optional.\n
                     if (s.name) {\n
                         sld.appendChild(this.createElementDefaultNS("Name", s.name));\n
                     }\n
                     // Title is optional.\n
                     if (s.title) {\n
                         sld.appendChild(this.createElementDefaultNS("Title", s.title));\n
                     }\n
                     // LegendURL is optional\n
                     if (s.legend) {\n
                         sld.appendChild(this.write_wmc_URLType("LegendURL", s.legend.href, s.legend));\n
                     }\n
\n
                    // read in body as xml doc - assume proper namespace declarations\n
                    var doc = OpenLayers.Format.XML.prototype.read.apply(this, [s.body]);\n
                    // append to StyledLayerDescriptor node\n
                    var imported = doc.documentElement;\n
                    if(sld.ownerDocument && sld.ownerDocument.importNode) {\n
                        imported = sld.ownerDocument.importNode(imported, true);\n
                    }\n
                    sld.appendChild(imported);\n
                    style.appendChild(sld);            \n
                } else { // [3]\n
                    // both Name and Title are required.\n
                    style.appendChild(this.createElementDefaultNS("Name", s.name));\n
                    style.appendChild(this.createElementDefaultNS("Title", s.title));\n
                    // Abstract is optional\n
                    if (s[\'abstract\']) { // abstract is a js keyword\n
                        style.appendChild(this.createElementDefaultNS(\n
                            "Abstract", s[\'abstract\']\n
                        ));\n
                    }\n
                     // LegendURL is optional\n
                     if (s.legend) {\n
                         style.appendChild(this.write_wmc_URLType("LegendURL", s.legend.href, s.legend));\n
                }\n
                 }\n
                node.appendChild(style);\n
            }\n
        }\n
\n
        return node;\n
    },\n
\n
    /**\n
     * Method: write_wmc_OnlineResource\n
     * Create an OnlineResource node given a URL.\n
     *\n
     * Parameters:\n
     * href - {String} URL for the resource.\n
     *\n
     * Returns:\n
     * {Element} A WMC OnlineResource element node.\n
     */\n
    write_wmc_OnlineResource: function(href) {\n
        var node = this.createElementDefaultNS("OnlineResource");\n
        this.setAttributeNS(node, this.namespaces.xlink, "xlink:type", "simple");\n
        this.setAttributeNS(node, this.namespaces.xlink, "xlink:href", href);\n
        return node;\n
    },\n
\n
     /**\n
      * Method: getOnlineResource_href\n
      */\n
     getOnlineResource_href: function(node) {\n
         var object = {};\n
         var links = node.getElementsByTagName("OnlineResource");\n
         if(links.length > 0) {\n
             this.read_wmc_OnlineResource(object, links[0]);\n
         }\n
         return object.href;\n
     },\n
\n
\n
    CLASS_NAME: "OpenLayers.Format.WMC.v1" \n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>38512</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

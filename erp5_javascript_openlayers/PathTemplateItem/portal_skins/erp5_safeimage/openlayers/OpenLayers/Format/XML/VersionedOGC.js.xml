<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684101.0</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>VersionedOGC.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Format/XML.js\n
 * @requires OpenLayers/Format/OGCExceptionReport.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.XML.VersionedOGC\n
 * Base class for versioned formats, i.e. a format which supports multiple\n
 * versions.\n
 * \n
 * Inherits from:\n
 *  - <OpenLayers.Format.XML>\n
 */\n
OpenLayers.Format.XML.VersionedOGC = OpenLayers.Class(OpenLayers.Format.XML, {\n
    \n
    /**\n
     * APIProperty: defaultVersion\n
     * {String} Version number to assume if none found.\n
     */\n
    defaultVersion: null,\n
    \n
    /**\n
     * APIProperty: version\n
     * {String} Specify a version string if one is known.\n
     */\n
    version: null,\n
\n
    /**\n
     * APIProperty: profile\n
     * {String} If provided, use a custom profile.\n
     */\n
    profile: null,\n
\n
    /**\n
     * APIProperty: errorProperty\n
     * {String} Which property of the returned object to check for in order to\n
     * determine whether or not parsing has failed. In the case that the\n
     * errorProperty is undefined on the returned object, the document will be\n
     * run through an OGCExceptionReport parser.\n
     */\n
    errorProperty: null,\n
\n
    /**\n
     * Property: name\n
     * {String} The name of this parser, this is the part of the CLASS_NAME\n
     * except for "OpenLayers.Format."\n
     */\n
    name: null,\n
\n
    /**\n
     * APIProperty: stringifyOutput\n
     * {Boolean} If true, write will return a string otherwise a DOMElement.\n
     * Default is false.\n
     */\n
    stringifyOutput: false,\n
\n
    /**\n
     * Property: parser\n
     * {Object} Instance of the versioned parser.  Cached for multiple read and\n
     *     write calls of the same version.\n
     */\n
    parser: null,\n
\n
    /**\n
     * Constructor: OpenLayers.Format.XML.VersionedOGC.\n
     * Constructor.\n
     *\n
     * Parameters:\n
     * options - {Object} Optional object whose properties will be set on\n
     *     the object.\n
     */\n
    initialize: function(options) {\n
        OpenLayers.Format.XML.prototype.initialize.apply(this, [options]);\n
        var className = this.CLASS_NAME;\n
        this.name = className.substring(className.lastIndexOf(".")+1);\n
    },\n
\n
    /**\n
     * Method: getVersion\n
     * Returns the version to use. Subclasses can override this function\n
     * if a different version detection is needed.\n
     *\n
     * Parameters:\n
     * root - {DOMElement}\n
     * options - {Object} Optional configuration object.\n
     *\n
     * Returns:\n
     * {String} The version to use.\n
     */\n
    getVersion: function(root, options) {\n
        var version;\n
        // read\n
        if (root) {\n
            version = this.version;\n
            if(!version) {\n
                version = root.getAttribute("version");\n
                if(!version) {\n
                    version = this.defaultVersion;\n
                }\n
            }\n
        } else { // write\n
            version = (options && options.version) || \n
                this.version || this.defaultVersion;\n
        }\n
        return version;\n
    },\n
\n
    /**\n
     * Method: getParser\n
     * Get an instance of the cached parser if available, otherwise create one.\n
     *\n
     * Parameters:\n
     * version - {String}\n
     *\n
     * Returns:\n
     * {<OpenLayers.Format>}\n
     */\n
    getParser: function(version) {\n
        version = version || this.defaultVersion;\n
        var profile = this.profile ? "_" + this.profile : "";\n
        if(!this.parser || this.parser.VERSION != version) {\n
            var format = OpenLayers.Format[this.name][\n
                "v" + version.replace(/\\./g, "_") + profile\n
            ];\n
            if(!format) {\n
                throw "Can\'t find a " + this.name + " parser for version " +\n
                      version + profile;\n
            }\n
            this.parser = new format(this.options);\n
        }\n
        return this.parser;\n
    },\n
\n
    /**\n
     * APIMethod: write\n
     * Write a document.\n
     *\n
     * Parameters:\n
     * obj - {Object} An object representing the document.\n
     * options - {Object} Optional configuration object.\n
     *\n
     * Returns:\n
     * {String} The document as a string\n
     */\n
    write: function(obj, options) {\n
        var version = this.getVersion(null, options);\n
        this.parser = this.getParser(version);\n
        var root = this.parser.write(obj, options);\n
        if (this.stringifyOutput === false) {\n
            return root;\n
        } else {\n
            return OpenLayers.Format.XML.prototype.write.apply(this, [root]);\n
        }\n
    },\n
\n
    /**\n
     * APIMethod: read\n
     * Read a doc and return an object representing the document.\n
     *\n
     * Parameters:\n
     * data - {String | DOMElement} Data to read.\n
     * options - {Object} Options for the reader.\n
     *\n
     * Returns:\n
     * {Object} An object representing the document.\n
     */\n
    read: function(data, options) {\n
        if(typeof data == "string") {\n
            data = OpenLayers.Format.XML.prototype.read.apply(this, [data]);\n
        }\n
        var root = data.documentElement;\n
        var version = this.getVersion(root);\n
        this.parser = this.getParser(version);\n
        var obj = this.parser.read(data, options);\n
        if (this.errorProperty !== null && obj[this.errorProperty] === undefined) {\n
            // an error must have happened, so parse it and report back\n
            var format = new OpenLayers.Format.OGCExceptionReport();\n
            obj.error = format.read(data);\n
        }\n
        obj.version = version;\n
        return obj;\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Format.XML.VersionedOGC"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5696</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

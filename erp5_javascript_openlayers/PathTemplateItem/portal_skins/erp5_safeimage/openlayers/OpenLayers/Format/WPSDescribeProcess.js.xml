<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.9</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>WPSDescribeProcess.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
 \n
/**\n
 * @requires OpenLayers/Format/XML.js\n
 * @requires OpenLayers/Format/OWSCommon/v1_1_0.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.WPSDescribeProcess\n
 * Read WPS DescribeProcess responses. \n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Format.XML>\n
 */\n
OpenLayers.Format.WPSDescribeProcess = OpenLayers.Class(\n
    OpenLayers.Format.XML, {\n
    \n
    /**\n
     * Constant: VERSION\n
     * {String} 1.0.0\n
     */\n
    VERSION: "1.0.0",\n
\n
    /**\n
     * Property: namespaces\n
     * {Object} Mapping of namespace aliases to namespace URIs.\n
     */\n
    namespaces: {\n
        wps: "http://www.opengis.net/wps/1.0.0",\n
        ows: "http://www.opengis.net/ows/1.1",\n
        xsi: "http://www.w3.org/2001/XMLSchema-instance"\n
    },\n
\n
    /**\n
     * Property: schemaLocation\n
     * {String} Schema location\n
     */\n
    schemaLocation: "http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsAll.xsd",\n
\n
    /**\n
     * Property: defaultPrefix\n
     */\n
    defaultPrefix: "wps",\n
\n
    /**\n
     * Property: regExes\n
     * Compiled regular expressions for manipulating strings.\n
     */\n
    regExes: {\n
        trimSpace: (/^\\s*|\\s*$/g),\n
        removeSpace: (/\\s*/g),\n
        splitSpace: (/\\s+/),\n
        trimComma: (/\\s*,\\s*/g)\n
    },\n
    \n
    /**\n
     * Constructor: OpenLayers.Format.WPSDescribeProcess\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object whose properties will be set on\n
     *     this instance.\n
     */\n
\n
    /**\n
     * APIMethod: read\n
     * Parse a WPS DescribeProcess and return an object with its information.\n
     * \n
     * Parameters: \n
     * data - {String} or {DOMElement} data to read/parse.\n
     *\n
     * Returns:\n
     * {Object}\n
     */\n
    read: function(data) {\n
        if(typeof data == "string") {\n
            data = OpenLayers.Format.XML.prototype.read.apply(this, [data]);\n
        }\n
        if(data && data.nodeType == 9) {\n
            data = data.documentElement;\n
        }\n
        var info = {};\n
        this.readNode(data, info);\n
        return info;\n
    },\n
\n
    /**\n
     * Property: readers\n
     * Contains public functions, grouped by namespace prefix, that will\n
     *     be applied when a namespaced node is found matching the function\n
     *     name.  The function will be applied in the scope of this parser\n
     *     with two arguments: the node being read and a context object passed\n
     *     from the parent.\n
     */\n
    readers: {\n
        "wps": {\n
            "ProcessDescriptions": function(node, obj) {\n
                obj.processDescriptions = {};\n
                this.readChildNodes(node, obj.processDescriptions);\n
            },\n
            "ProcessDescription": function(node, processDescriptions) {\n
                var processVersion = this.getAttributeNS(node, this.namespaces.wps, "processVersion");\n
                var processDescription = {\n
                    processVersion: processVersion,\n
                    statusSupported: (node.getAttribute("statusSupported") === "true"),\n
                    storeSupported: (node.getAttribute("storeSupported") === "true")\n
                };\n
                this.readChildNodes(node, processDescription);\n
                processDescriptions[processDescription.identifier] = processDescription;\n
            },\n
            "DataInputs": function(node, processDescription) {\n
                processDescription.dataInputs = [];\n
                this.readChildNodes(node, processDescription.dataInputs);\n
            },\n
            "ProcessOutputs": function(node, processDescription) {\n
                processDescription.processOutputs = [];\n
                this.readChildNodes(node, processDescription.processOutputs);\n
            },\n
            "Output": function(node, processOutputs) {\n
                var output = {};\n
                this.readChildNodes(node, output);\n
                processOutputs.push(output);\n
            },\n
            "ComplexOutput": function(node, output) {\n
                output.complexOutput = {};\n
                this.readChildNodes(node, output.complexOutput);\n
            },\n
            "Input": function(node, dataInputs) {\n
                var input = {\n
                    maxOccurs: parseInt(node.getAttribute("maxOccurs")),\n
                    minOccurs: parseInt(node.getAttribute("minOccurs"))\n
                };\n
                this.readChildNodes(node, input);\n
                dataInputs.push(input);\n
            },\n
            "BoundingBoxData": function(node, input) {\n
                input.boundingBoxData = {};\n
                this.readChildNodes(node, input.boundingBoxData);\n
            },\n
            "CRS": function(node, obj) {\n
                if (!obj.CRSs) {\n
                    obj.CRSs = {};\n
                }\n
                obj.CRSs[this.getChildValue(node)] = true;\n
            },\n
            "LiteralData": function(node, input) {\n
                input.literalData = {};\n
                this.readChildNodes(node, input.literalData);\n
            },\n
            "ComplexData": function(node, input) {\n
                input.complexData = {};\n
                this.readChildNodes(node,  input.complexData);\n
            },\n
            "Default": function(node, complexData) {\n
                complexData["default"] = {};\n
                this.readChildNodes(node,  complexData["default"]);\n
            },\n
            "Supported": function(node, complexData) {\n
                complexData["supported"] = {};\n
                this.readChildNodes(node,  complexData["supported"]);\n
            },\n
            "Format": function(node, obj) {\n
                var format = {};\n
                this.readChildNodes(node, format);\n
                if (!obj.formats) {\n
                    obj.formats = {};\n
                }\n
                obj.formats[format.mimeType] = true;\n
            },\n
            "MimeType": function(node, format) {\n
                format.mimeType = this.getChildValue(node);\n
            }\n
        },\n
        "ows": OpenLayers.Format.OWSCommon.v1_1_0.prototype.readers["ows"]\n
    },\n
    \n
    CLASS_NAME: "OpenLayers.Format.WPSDescribeProcess" \n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6276</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.92</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>OWSCommon.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Format/XML/VersionedOGC.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.OWSCommon\n
 * Read OWSCommon. Create a new instance with the <OpenLayers.Format.OWSCommon>\n
 *     constructor.\n
 * \n
 * Inherits from:\n
 *  - <OpenLayers.Format.XML.VersionedOGC>\n
 */\n
OpenLayers.Format.OWSCommon = OpenLayers.Class(OpenLayers.Format.XML.VersionedOGC, {\n
    \n
    /**\n
     * APIProperty: defaultVersion\n
     * {String} Version number to assume if none found.  Default is "1.0.0".\n
     */\n
    defaultVersion: "1.0.0",\n
    \n
    /**\n
     * Constructor: OpenLayers.Format.OWSCommon\n
     * Create a new parser for OWSCommon.\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object whose properties will be set on\n
     *     this instance.\n
     */\n
\n
    /**\n
     * Method: getVersion\n
     * Returns the version to use. Subclasses can override this function\n
     * if a different version detection is needed.\n
     *\n
     * Parameters:\n
     * root - {DOMElement}\n
     * options - {Object} Optional configuration object.\n
     *\n
     * Returns:\n
     * {String} The version to use.\n
     */\n
    getVersion: function(root, options) {\n
        var version = this.version;\n
        if(!version) {\n
            // remember version does not correspond to the OWS version\n
            // it corresponds to the WMS/WFS/WCS etc. request version\n
            var uri = root.getAttribute("xmlns:ows");\n
            // the above will fail if the namespace prefix is different than\n
            // ows and if the namespace is declared on a different element\n
            if (uri && uri.substring(uri.lastIndexOf("/")+1) === "1.1") {\n
                version ="1.1.0";\n
            } \n
            if(!version) {\n
                version = this.defaultVersion;\n
            }\n
        }\n
        return version;\n
    },\n
\n
    /**\n
     * APIMethod: read\n
     * Read an OWSCommon document and return an object.\n
     *\n
     * Parameters:\n
     * data - {String | DOMElement} Data to read.\n
     * options - {Object} Options for the reader.\n
     *\n
     * Returns:\n
     * {Object} An object representing the structure of the document.\n
     */\n
\n
    CLASS_NAME: "OpenLayers.Format.OWSCommon" \n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2415</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.9</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>OGCExceptionReport.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Format/XML.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.OGCExceptionReport\n
 * Class to read exception reports for various OGC services and versions.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Format.XML>\n
 */\n
OpenLayers.Format.OGCExceptionReport = OpenLayers.Class(OpenLayers.Format.XML, {\n
\n
    /**\n
     * Property: namespaces\n
     * {Object} Mapping of namespace aliases to namespace URIs.\n
     */\n
    namespaces: {\n
        ogc: "http://www.opengis.net/ogc"\n
    },\n
\n
    /**\n
     * Property: regExes\n
     * Compiled regular expressions for manipulating strings.\n
     */\n
    regExes: {\n
        trimSpace: (/^\\s*|\\s*$/g),\n
        removeSpace: (/\\s*/g),\n
        splitSpace: (/\\s+/),\n
        trimComma: (/\\s*,\\s*/g)\n
    },\n
\n
    /**\n
     * Property: defaultPrefix\n
     */\n
    defaultPrefix: "ogc",\n
\n
    /**\n
     * Constructor: OpenLayers.Format.OGCExceptionReport\n
     * Create a new parser for OGC exception reports.\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object whose properties will be set on\n
     *     this instance.\n
     */\n
\n
    /**\n
     * APIMethod: read\n
     * Read OGC exception report data from a string, and return an object with\n
     * information about the exceptions.\n
     *\n
     * Parameters:\n
     * data - {String} or {DOMElement} data to read/parse.\n
     *\n
     * Returns:\n
     * {Object} Information about the exceptions that occurred.\n
     */\n
    read: function(data) {\n
        var result;\n
        if(typeof data == "string") {\n
            data = OpenLayers.Format.XML.prototype.read.apply(this, [data]);\n
        }\n
        var root = data.documentElement;\n
        var exceptionInfo = {exceptionReport: null}; \n
        if (root) {\n
            this.readChildNodes(data, exceptionInfo);\n
            if (exceptionInfo.exceptionReport === null) {\n
                // fall-back to OWSCommon since this is a common output format for exceptions\n
                // we cannot easily use the ows readers directly since they differ for 1.0 and 1.1\n
                exceptionInfo = new OpenLayers.Format.OWSCommon().read(data);\n
            }\n
        }\n
        return exceptionInfo;\n
    },\n
\n
    /**\n
     * Property: readers\n
     * Contains public functions, grouped by namespace prefix, that will\n
     *     be applied when a namespaced node is found matching the function\n
     *     name.  The function will be applied in the scope of this parser\n
     *     with two arguments: the node being read and a context object passed\n
     *     from the parent.\n
     */\n
    readers: {\n
        "ogc": {\n
            "ServiceExceptionReport": function(node, obj) {\n
                obj.exceptionReport = {exceptions: []};\n
                this.readChildNodes(node, obj.exceptionReport);\n
            },\n
            "ServiceException": function(node, exceptionReport) {\n
                var exception = {\n
                    code: node.getAttribute("code"),\n
                    locator: node.getAttribute("locator"),\n
                    text: this.getChildValue(node)\n
                };\n
                exceptionReport.exceptions.push(exception);\n
            }\n
        }\n
    },\n
    \n
    CLASS_NAME: "OpenLayers.Format.OGCExceptionReport"\n
    \n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3427</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

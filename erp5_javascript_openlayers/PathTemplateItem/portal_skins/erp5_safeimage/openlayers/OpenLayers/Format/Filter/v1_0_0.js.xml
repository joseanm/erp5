<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.99</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>v1_0_0.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Format/GML/v2.js\n
 * @requires OpenLayers/Format/Filter/v1.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format.Filter.v1_0_0\n
 * Write ogc:Filter version 1.0.0.\n
 * \n
 * Inherits from:\n
 *  - <OpenLayers.Format.GML.v2>\n
 *  - <OpenLayers.Format.Filter.v1>\n
 */\n
OpenLayers.Format.Filter.v1_0_0 = OpenLayers.Class(\n
    OpenLayers.Format.GML.v2, OpenLayers.Format.Filter.v1, {\n
    \n
    /**\n
     * Constant: VERSION\n
     * {String} 1.0.0\n
     */\n
    VERSION: "1.0.0",\n
    \n
    /**\n
     * Property: schemaLocation\n
     * {String} http://www.opengis.net/ogc/filter/1.0.0/filter.xsd\n
     */\n
    schemaLocation: "http://www.opengis.net/ogc/filter/1.0.0/filter.xsd",\n
\n
    /**\n
     * Constructor: OpenLayers.Format.Filter.v1_0_0\n
     * Instances of this class are not created directly.  Use the\n
     *     <OpenLayers.Format.Filter> constructor instead.\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object whose properties will be set on\n
     *     this instance.\n
     */\n
    initialize: function(options) {\n
        OpenLayers.Format.GML.v2.prototype.initialize.apply(\n
            this, [options]\n
        );\n
    },\n
\n
    /**\n
     * Property: readers\n
     * Contains public functions, grouped by namespace prefix, that will\n
     *     be applied when a namespaced node is found matching the function\n
     *     name.  The function will be applied in the scope of this parser\n
     *     with two arguments: the node being read and a context object passed\n
     *     from the parent.\n
     */\n
    readers: {\n
        "ogc": OpenLayers.Util.applyDefaults({\n
            "PropertyIsEqualTo": function(node, obj) {\n
                var filter = new OpenLayers.Filter.Comparison({\n
                    type: OpenLayers.Filter.Comparison.EQUAL_TO\n
                });\n
                this.readChildNodes(node, filter);\n
                obj.filters.push(filter);\n
            },\n
            "PropertyIsNotEqualTo": function(node, obj) {\n
                var filter = new OpenLayers.Filter.Comparison({\n
                    type: OpenLayers.Filter.Comparison.NOT_EQUAL_TO\n
                });\n
                this.readChildNodes(node, filter);\n
                obj.filters.push(filter);\n
            },\n
            "PropertyIsLike": function(node, obj) {\n
                var filter = new OpenLayers.Filter.Comparison({\n
                    type: OpenLayers.Filter.Comparison.LIKE\n
                });\n
                this.readChildNodes(node, filter);\n
                var wildCard = node.getAttribute("wildCard");\n
                var singleChar = node.getAttribute("singleChar");\n
                var esc = node.getAttribute("escape");\n
                filter.value2regex(wildCard, singleChar, esc);\n
                obj.filters.push(filter);\n
            }\n
        }, OpenLayers.Format.Filter.v1.prototype.readers["ogc"]),\n
        "gml": OpenLayers.Format.GML.v2.prototype.readers["gml"],\n
        "feature": OpenLayers.Format.GML.v2.prototype.readers["feature"]        \n
    },\n
\n
    /**\n
     * Property: writers\n
     * As a compliment to the readers property, this structure contains public\n
     *     writing functions grouped by namespace alias and named like the\n
     *     node names they produce.\n
     */\n
    writers: {\n
        "ogc": OpenLayers.Util.applyDefaults({\n
            "PropertyIsEqualTo": function(filter) {\n
                var node = this.createElementNSPlus("ogc:PropertyIsEqualTo");\n
                // no ogc:expression handling for PropertyName for now\n
                this.writeNode("PropertyName", filter, node);\n
                // handle Literals or Functions for now\n
                this.writeOgcExpression(filter.value, node);\n
                return node;\n
            },\n
            "PropertyIsNotEqualTo": function(filter) {\n
                var node = this.createElementNSPlus("ogc:PropertyIsNotEqualTo");\n
                // no ogc:expression handling for PropertyName for now\n
                this.writeNode("PropertyName", filter, node);\n
                // handle Literals or Functions for now\n
                this.writeOgcExpression(filter.value, node);\n
                return node;\n
            },\n
            "PropertyIsLike": function(filter) {\n
                var node = this.createElementNSPlus("ogc:PropertyIsLike", {\n
                    attributes: {\n
                        wildCard: "*", singleChar: ".", escape: "!"\n
                    }\n
                });\n
                // no ogc:expression handling for now\n
                this.writeNode("PropertyName", filter, node);\n
                // convert regex string to ogc string\n
                this.writeNode("Literal", filter.regex2value(), node);\n
                return node;\n
            },\n
            "BBOX": function(filter) {\n
                var node = this.createElementNSPlus("ogc:BBOX");\n
                // PropertyName is mandatory in 1.0.0, but e.g. GeoServer also\n
                // accepts filters without it. When this is used with\n
                // OpenLayers.Protocol.WFS, OpenLayers.Format.WFST will set a\n
                // missing filter.property to the geometryName that is\n
                // configured with the protocol, which defaults to "the_geom".\n
                // So the only way to omit this mandatory property is to not\n
                // set the property on the filter and to set the geometryName\n
                // on the WFS protocol to null. The latter also happens when\n
                // the protocol is configured without a geometryName and a\n
                // featureNS.\n
                filter.property && this.writeNode("PropertyName", filter, node);\n
                var box = this.writeNode("gml:Box", filter.value, node);\n
                if(filter.projection) {\n
                    box.setAttribute("srsName", filter.projection);\n
                }\n
                return node;\n
            }\n
        }, OpenLayers.Format.Filter.v1.prototype.writers["ogc"]),\n
        "gml": OpenLayers.Format.GML.v2.prototype.writers["gml"],\n
        "feature": OpenLayers.Format.GML.v2.prototype.writers["feature"]\n
    },\n
\n
    /**\n
     * Method: writeSpatial\n
     *\n
     * Read a {<OpenLayers.Filter.Spatial>} filter and converts it into XML.\n
     *\n
     * Parameters:\n
     * filter - {<OpenLayers.Filter.Spatial>} The filter.\n
     * name - {String} Name of the generated XML element.\n
     *\n
     * Returns:\n
     * {DOMElement} The created XML element.\n
     */\n
    writeSpatial: function(filter, name) {\n
        var node = this.createElementNSPlus("ogc:"+name);\n
        this.writeNode("PropertyName", filter, node);\n
        if(filter.value instanceof OpenLayers.Filter.Function) {\n
            this.writeNode("Function", filter.value, node);\n
        } else {\n
        var child;\n
        if(filter.value instanceof OpenLayers.Geometry) {\n
            child = this.writeNode("feature:_geometry", filter.value).firstChild;\n
        } else {\n
            child = this.writeNode("gml:Box", filter.value);\n
        }\n
        if(filter.projection) {\n
            child.setAttribute("srsName", filter.projection);\n
        }\n
        node.appendChild(child);\n
        }\n
        return node;\n
    },\n
\n
\n
    CLASS_NAME: "OpenLayers.Format.Filter.v1_0_0" \n
\n
});

]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>7390</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.87</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>UTFGrid.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
\n
/**\n
 * @requires OpenLayers/Tile.js\n
 * @requires OpenLayers/Format/JSON.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Tile.UTFGrid\n
 * Instances of OpenLayers.Tile.UTFGrid are used to manage \n
 * UTFGrids. This is an unusual tile type in that it doesn\'t have a\n
 * rendered image; only a \'hit grid\' that can be used to \n
 * look up feature attributes.\n
 *\n
 * See the <OpenLayers.Tile.UTFGrid> constructor for details on constructing a\n
 * new instance.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Tile>\n
 */\n
OpenLayers.Tile.UTFGrid = OpenLayers.Class(OpenLayers.Tile, {\n
\n
    /** \n
     * Property: url\n
     * {String}\n
     * The URL of the UTFGrid file being requested. Provided by the <getURL>\n
     *     method. \n
     */\n
    url: null,\n
    \n
    /**\n
     * Property: utfgridResolution\n
     * {Number}\n
     * Ratio of the pixel width to the width of a UTFGrid data point.  If an \n
     *     entry in the grid represents a 4x4 block of pixels, the \n
     *     utfgridResolution would be 4.  Default is 2.\n
     */\n
    utfgridResolution: 2,\n
    \n
    /** \n
     * Property: json\n
     * {Object}\n
     * Stores the parsed JSON tile data structure. \n
     */\n
    json: null,\n
    \n
    /** \n
     * Property: format\n
     * {OpenLayers.Format.JSON}\n
     * Parser instance used to parse JSON for cross browser support.  The native\n
     *     JSON.parse method will be used where available (all except IE<8).\n
     */\n
    format: null,\n
\n
    /** \n
     * Constructor: OpenLayers.Tile.UTFGrid\n
     * Constructor for a new <OpenLayers.Tile.UTFGrid> instance.\n
     * \n
     * Parameters:\n
     * layer - {<OpenLayers.Layer>} layer that the tile will go in.\n
     * position - {<OpenLayers.Pixel>}\n
     * bounds - {<OpenLayers.Bounds>}\n
     * url - {<String>} Deprecated. Remove me in 3.0.\n
     * size - {<OpenLayers.Size>}\n
     * options - {Object}\n
     */\n
\n
    /** \n
     * APIMethod: destroy\n
     * Clean up.\n
     */\n
    destroy: function() {\n
        this.clear();\n
        OpenLayers.Tile.prototype.destroy.apply(this, arguments);\n
    },\n
    \n
    /**\n
     * Method: draw\n
     * Check that a tile should be drawn, and draw it.\n
     * In the case of UTFGrids, "drawing" it means fetching and\n
     * parsing the json. \n
     * \n
     * Returns:\n
     * {Boolean} Was a tile drawn?\n
     */\n
    draw: function() {\n
        var drawn = OpenLayers.Tile.prototype.draw.apply(this, arguments);\n
        if (drawn) {\n
            if (this.isLoading) {\n
                this.abortLoading();\n
                //if we\'re already loading, send \'reload\' instead of \'loadstart\'.\n
                this.events.triggerEvent("reload"); \n
            } else {\n
                this.isLoading = true;\n
                this.events.triggerEvent("loadstart");\n
            }\n
            this.url = this.layer.getURL(this.bounds);\n
\n
            if (this.layer.useJSONP) {\n
                // Use JSONP method to avoid xbrowser policy\n
                var ols = new OpenLayers.Protocol.Script({\n
                    url: this.url,\n
                    callback: function(response) {\n
                        this.isLoading = false;\n
                        this.events.triggerEvent("loadend");\n
                        this.json = response.data;\n
                    },\n
                    scope: this\n
                });\n
                ols.read();\n
                this.request = ols;\n
            } else {\n
                // Use standard XHR\n
                this.request = OpenLayers.Request.GET({\n
                    url: this.url,\n
                    callback: function(response) {\n
                        this.isLoading = false;\n
                        this.events.triggerEvent("loadend");\n
                        if (response.status === 200) {\n
                            this.parseData(response.responseText);\n
                        }\n
                    },\n
                    scope: this\n
                });\n
            }\n
        } else {\n
            this.unload();\n
        }\n
        return drawn;\n
    },\n
    \n
    /**\n
     * Method: abortLoading\n
     * Cancel a pending request.\n
     */\n
    abortLoading: function() {\n
        if (this.request) {\n
            this.request.abort();\n
            delete this.request;\n
        }\n
        this.isLoading = false;\n
    },\n
    \n
    /**\n
     * Method: getFeatureInfo\n
     * Get feature information associated with a pixel offset.  If the pixel\n
     *     offset corresponds to a feature, the returned object will have id\n
     *     and data properties.  Otherwise, null will be returned.\n
     *     \n
     *\n
     * Parameters:\n
     * i - {Number} X-axis pixel offset (from top left of tile)\n
     * j - {Number} Y-axis pixel offset (from top left of tile)\n
     *\n
     * Returns:\n
     * {Object} Object with feature id and data properties corresponding to the \n
     *     given pixel offset.\n
     */\n
    getFeatureInfo: function(i, j) {\n
        var info = null;\n
        if (this.json) {\n
            var id = this.getFeatureId(i, j);\n
            if (id !== null) {\n
                info = {id: id, data: this.json.data[id]};\n
            }\n
        }\n
        return info;\n
    },\n
    \n
    /**\n
     * Method: getFeatureId\n
     * Get the identifier for the feature associated with a pixel offset.\n
     *\n
     * Parameters:\n
     * i - {Number} X-axis pixel offset (from top left of tile)\n
     * j - {Number} Y-axis pixel offset (from top left of tile)\n
     *\n
     * Returns:\n
     * {Object} The feature identifier corresponding to the given pixel offset.\n
     *     Returns null if pixel doesn\'t correspond to a feature.\n
     */\n
    getFeatureId: function(i, j) {\n
        var id = null;\n
        if (this.json) {\n
            var resolution = this.utfgridResolution;\n
            var row = Math.floor(j / resolution);\n
            var col = Math.floor(i / resolution);\n
            var charCode = this.json.grid[row].charCodeAt(col);\n
            var index = this.indexFromCharCode(charCode);\n
            var keys = this.json.keys;\n
            if (!isNaN(index) && (index in keys)) {\n
                id = keys[index];\n
            }\n
        }\n
        return id;\n
    },\n
    \n
    /**\n
     * Method: indexFromCharCode\n
     * Given a character code for one of the UTFGrid "grid" characters, \n
     *     resolve the integer index for the feature id in the UTFGrid "keys"\n
     *     array.\n
     *\n
     * Parameters:\n
     * charCode - {Integer}\n
     *\n
     * Returns:\n
     * {Integer} Index for the feature id from the keys array.\n
     */\n
    indexFromCharCode: function(charCode) {\n
        if (charCode >= 93) {\n
            charCode--;\n
        }\n
        if (charCode >= 35) {\n
            charCode --;\n
        }\n
        return charCode - 32;\n
    },\n
    \n
    /**\n
     * Method: parseData\n
     * Parse the JSON from a request\n
     *\n
     * Parameters:\n
     * str - {String} UTFGrid as a JSON string. \n
     * \n
     * Returns:\n
     * {Object} parsed javascript data\n
     */\n
    parseData: function(str) {\n
        if (!this.format) {\n
            this.format = new OpenLayers.Format.JSON();\n
        }\n
        this.json = this.format.read(str);\n
    },\n
    \n
    /** \n
     * Method: clear\n
     * Delete data stored with this tile.\n
     */\n
    clear: function() {\n
        this.json = null;\n
    },\n
    \n
    CLASS_NAME: "OpenLayers.Tile.UTFGrid"\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>7418</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

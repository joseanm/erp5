<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.77</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Filter.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
\n
/**\n
 * @requires OpenLayers/BaseTypes/Class.js\n
 * @requires OpenLayers/Util.js\n
 * @requires OpenLayers/Style.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Filter\n
 * This class represents an OGC Filter.\n
 */\n
OpenLayers.Filter = OpenLayers.Class({\n
    \n
    /** \n
     * Constructor: OpenLayers.Filter\n
     * This class represents a generic filter.\n
     *\n
     * Parameters:\n
     * options - {Object} Optional object whose properties will be set on the\n
     *     instance.\n
     * \n
     * Returns:\n
     * {<OpenLayers.Filter>}\n
     */\n
    initialize: function(options) {\n
        OpenLayers.Util.extend(this, options);\n
    },\n
\n
    /** \n
     * APIMethod: destroy\n
     * Remove reference to anything added.\n
     */\n
    destroy: function() {\n
    },\n
\n
    /**\n
     * APIMethod: evaluate\n
     * Evaluates this filter in a specific context.  Instances or subclasses\n
     * are supposed to override this method.\n
     * \n
     * Parameters:\n
     * context - {Object} Context to use in evaluating the filter.  If a vector\n
     *     feature is provided, the feature.attributes will be used as context.\n
     * \n
     * Returns:\n
     * {Boolean} The filter applies.\n
     */\n
    evaluate: function(context) {\n
        return true;\n
    },\n
    \n
    /**\n
     * APIMethod: clone\n
     * Clones this filter. Should be implemented by subclasses.\n
     * \n
     * Returns:\n
     * {<OpenLayers.Filter>} Clone of this filter.\n
     */\n
    clone: function() {\n
        return null;\n
    },\n
    \n
    /**\n
     * APIMethod: toString\n
     *\n
     * Returns:\n
     * {String} Include <OpenLayers.Format.CQL> in your build to get a CQL\n
     *     representation of the filter returned. Otherwise "[Object object]"\n
     *     will be returned.\n
     */\n
    toString: function() {\n
        var string;\n
        if (OpenLayers.Format && OpenLayers.Format.CQL) {\n
            string = OpenLayers.Format.CQL.prototype.write(this);\n
        } else {\n
            string = Object.prototype.toString.call(this);\n
        }\n
        return string;\n
    },\n
    \n
    CLASS_NAME: "OpenLayers.Filter"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2279</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

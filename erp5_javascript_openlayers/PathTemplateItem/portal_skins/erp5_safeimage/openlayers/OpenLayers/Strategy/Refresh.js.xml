<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.88</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Refresh.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Strategy.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Strategy.Refresh\n
 * A strategy that refreshes the layer. By default the strategy waits for a\n
 *     call to <refresh> before refreshing.  By configuring the strategy with \n
 *     the <interval> option, refreshing can take place automatically.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Strategy>\n
 */\n
OpenLayers.Strategy.Refresh = OpenLayers.Class(OpenLayers.Strategy, {\n
    \n
    /**\n
     * Property: force\n
     * {Boolean} Force a refresh on the layer. Default is false.\n
     */\n
    force: false,\n
\n
    /**\n
     * Property: interval\n
     * {Number} Auto-refresh. Default is 0.  If > 0, layer will be refreshed \n
     *     every N milliseconds.\n
     */\n
    interval: 0,\n
    \n
    /**\n
     * Property: timer\n
     * {Number} The id of the timer.\n
     */\n
    timer: null,\n
\n
    /**\n
     * Constructor: OpenLayers.Strategy.Refresh\n
     * Create a new Refresh strategy.\n
     *\n
     * Parameters:\n
     * options - {Object} Optional object whose properties will be set on the\n
     *     instance.\n
     */\n
   \n
    /**\n
     * APIMethod: activate\n
     * Activate the strategy. Register any listeners, do appropriate setup.\n
     * \n
     * Returns:\n
     * {Boolean} True if the strategy was successfully activated.\n
     */\n
    activate: function() {\n
        var activated = OpenLayers.Strategy.prototype.activate.call(this);\n
        if(activated) {\n
            if(this.layer.visibility === true) {\n
                this.start();\n
            } \n
            this.layer.events.on({\n
                "visibilitychanged": this.reset,\n
                scope: this\n
            });\n
        }\n
        return activated;\n
    },\n
    \n
    /**\n
     * APIMethod: deactivate\n
     * Deactivate the strategy. Unregister any listeners, do appropriate\n
     *     tear-down.\n
     * \n
     * Returns:\n
     * {Boolean} True if the strategy was successfully deactivated.\n
     */\n
    deactivate: function() {\n
        var deactivated = OpenLayers.Strategy.prototype.deactivate.call(this);\n
        if(deactivated) {\n
            this.stop();\n
        }\n
        return deactivated;\n
    },\n
    \n
    /**\n
     * Method: reset\n
     * Start or cancel the refresh interval depending on the visibility of \n
     *     the layer.\n
     */\n
    reset: function() {\n
        if(this.layer.visibility === true) {\n
            this.start();\n
        } else {\n
            this.stop();\n
        }\n
    },\n
    \n
    /**\n
     * Method: start\n
     * Start the refresh interval. \n
     */\n
    start: function() {\n
        if(this.interval && typeof this.interval === "number" && \n
            this.interval > 0) {\n
\n
            this.timer = window.setInterval(\n
                OpenLayers.Function.bind(this.refresh, this),\n
                this.interval);\n
        }\n
    },\n
    \n
    /**\n
     * APIMethod: refresh\n
     * Tell the strategy to refresh which will refresh the layer.\n
     */\n
    refresh: function() {\n
        if (this.layer && this.layer.refresh && \n
            typeof this.layer.refresh == "function") {\n
\n
            this.layer.refresh({force: this.force});\n
        }\n
    },\n
   \n
    /**\n
     * Method: stop\n
     * Cancels the refresh interval. \n
     */\n
    stop: function() {\n
        if(this.timer !== null) {\n
            window.clearInterval(this.timer);\n
            this.timer = null;\n
        }\n
    },\n
    \n
    CLASS_NAME: "OpenLayers.Strategy.Refresh" \n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3610</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

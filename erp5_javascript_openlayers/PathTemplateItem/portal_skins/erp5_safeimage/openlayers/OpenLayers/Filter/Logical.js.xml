<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.82</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Logical.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
\n
/**\n
 * @requires OpenLayers/Filter.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Filter.Logical\n
 * This class represents ogc:And, ogc:Or and ogc:Not rules.\n
 * \n
 * Inherits from:\n
 * - <OpenLayers.Filter>\n
 */\n
OpenLayers.Filter.Logical = OpenLayers.Class(OpenLayers.Filter, {\n
\n
    /**\n
     * APIProperty: filters\n
     * {Array(<OpenLayers.Filter>)} Child filters for this filter.\n
     */\n
    filters: null, \n
     \n
    /**\n
     * APIProperty: type\n
     * {String} type of logical operator. Available types are:\n
     * - OpenLayers.Filter.Logical.AND = "&&";\n
     * - OpenLayers.Filter.Logical.OR  = "||";\n
     * - OpenLayers.Filter.Logical.NOT = "!";\n
     */\n
    type: null,\n
\n
    /** \n
     * Constructor: OpenLayers.Filter.Logical\n
     * Creates a logical filter (And, Or, Not).\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object with properties to set on the\n
     *     filter.\n
     * \n
     * Returns:\n
     * {<OpenLayers.Filter.Logical>}\n
     */\n
    initialize: function(options) {\n
        this.filters = [];\n
        OpenLayers.Filter.prototype.initialize.apply(this, [options]);\n
    },\n
    \n
    /** \n
     * APIMethod: destroy\n
     * Remove reference to child filters.\n
     */\n
    destroy: function() {\n
        this.filters = null;\n
        OpenLayers.Filter.prototype.destroy.apply(this);\n
    },\n
\n
    /**\n
     * APIMethod: evaluate\n
     * Evaluates this filter in a specific context.\n
     * \n
     * Parameters:\n
     * context - {Object} Context to use in evaluating the filter.  A vector\n
     *     feature may also be provided to evaluate feature attributes in \n
     *     comparison filters or geometries in spatial filters.\n
     * \n
     * Returns:\n
     * {Boolean} The filter applies.\n
     */\n
    evaluate: function(context) {\n
        var i, len;\n
        switch(this.type) {\n
            case OpenLayers.Filter.Logical.AND:\n
                for (i=0, len=this.filters.length; i<len; i++) {\n
                    if (this.filters[i].evaluate(context) == false) {\n
                        return false;\n
                    }\n
                }\n
                return true;\n
                \n
            case OpenLayers.Filter.Logical.OR:\n
                for (i=0, len=this.filters.length; i<len; i++) {\n
                    if (this.filters[i].evaluate(context) == true) {\n
                        return true;\n
                    }\n
                }\n
                return false;\n
            \n
            case OpenLayers.Filter.Logical.NOT:\n
                return (!this.filters[0].evaluate(context));\n
        }\n
        return undefined;\n
    },\n
    \n
    /**\n
     * APIMethod: clone\n
     * Clones this filter.\n
     * \n
     * Returns:\n
     * {<OpenLayers.Filter.Logical>} Clone of this filter.\n
     */\n
    clone: function() {\n
        var filters = [];        \n
        for(var i=0, len=this.filters.length; i<len; ++i) {\n
            filters.push(this.filters[i].clone());\n
        }\n
        return new OpenLayers.Filter.Logical({\n
            type: this.type,\n
            filters: filters\n
        });\n
    },\n
    \n
    CLASS_NAME: "OpenLayers.Filter.Logical"\n
});\n
\n
\n
OpenLayers.Filter.Logical.AND = "&&";\n
OpenLayers.Filter.Logical.OR  = "||";\n
OpenLayers.Filter.Logical.NOT = "!";\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3424</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

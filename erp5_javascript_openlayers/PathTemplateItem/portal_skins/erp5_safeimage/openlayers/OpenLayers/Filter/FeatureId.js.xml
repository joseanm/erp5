<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.82</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>FeatureId.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
\n
/**\n
 * @requires OpenLayers/Filter.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Filter.FeatureId\n
 * This class represents a ogc:FeatureId Filter, as being used for rule-based SLD\n
 * styling\n
 * \n
 * Inherits from:\n
 * - <OpenLayers.Filter>\n
 */\n
OpenLayers.Filter.FeatureId = OpenLayers.Class(OpenLayers.Filter, {\n
\n
    /** \n
     * APIProperty: fids\n
     * {Array(String)} Feature Ids to evaluate this rule against. \n
     *     To be passed inside the params object.\n
     */\n
    fids: null,\n
    \n
    /** \n
     * Property: type\n
     * {String} Type to identify this filter.\n
     */\n
    type: "FID",\n
    \n
    /** \n
     * Constructor: OpenLayers.Filter.FeatureId\n
     * Creates an ogc:FeatureId rule.\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object with properties to set on the\n
     *           rule\n
     * \n
     * Returns:\n
     * {<OpenLayers.Filter.FeatureId>}\n
     */\n
    initialize: function(options) {\n
        this.fids = [];\n
        OpenLayers.Filter.prototype.initialize.apply(this, [options]);\n
    },\n
\n
    /**\n
     * APIMethod: evaluate\n
     * evaluates this rule for a specific feature\n
     * \n
     * Parameters:\n
     * feature - {<OpenLayers.Feature>} feature to apply the rule to.\n
     *           For vector features, the check is run against the fid,\n
     *           for plain features against the id.\n
     * \n
     * Returns:\n
     * {Boolean} true if the rule applies, false if it does not\n
     */\n
    evaluate: function(feature) {\n
        for (var i=0, len=this.fids.length; i<len; i++) {\n
            var fid = feature.fid || feature.id;\n
            if (fid == this.fids[i]) {\n
                return true;\n
            }\n
        }\n
        return false;\n
    },\n
    \n
    /**\n
     * APIMethod: clone\n
     * Clones this filter.\n
     * \n
     * Returns:\n
     * {<OpenLayers.Filter.FeatureId>} Clone of this filter.\n
     */\n
    clone: function() {\n
        var filter = new OpenLayers.Filter.FeatureId();\n
        OpenLayers.Util.extend(filter, this);\n
        filter.fids = this.fids.slice();\n
        return filter;\n
    },\n
    \n
    CLASS_NAME: "OpenLayers.Filter.FeatureId"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2341</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

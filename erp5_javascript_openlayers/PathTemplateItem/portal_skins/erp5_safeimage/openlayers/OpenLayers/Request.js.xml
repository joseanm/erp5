<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.77</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Request.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Events.js\n
 */\n
\n
/**\n
 * TODO: deprecate me\n
 * Use OpenLayers.Request.proxy instead.\n
 */\n
OpenLayers.ProxyHost = "";\n
\n
/**\n
 * Namespace: OpenLayers.Request\n
 * The OpenLayers.Request namespace contains convenience methods for working\n
 *     with XMLHttpRequests.  These methods work with a cross-browser\n
 *     W3C compliant <OpenLayers.Request.XMLHttpRequest> class.\n
 */\n
OpenLayers.Request = {\n
    \n
    /**\n
     * Constant: DEFAULT_CONFIG\n
     * {Object} Default configuration for all requests.\n
     */\n
    DEFAULT_CONFIG: {\n
        method: "GET",\n
        url: window.location.href,\n
        async: true,\n
        user: undefined,\n
        password: undefined,\n
        params: null,\n
        proxy: OpenLayers.ProxyHost,\n
        headers: {},\n
        data: null,\n
        callback: function() {},\n
        success: null,\n
        failure: null,\n
        scope: null\n
    },\n
    \n
    /**\n
     * Constant: URL_SPLIT_REGEX\n
     */\n
    URL_SPLIT_REGEX: /([^:]*:)\\/\\/([^:]*:?[^@]*@)?([^:\\/\\?]*):?([^\\/\\?]*)/,\n
    \n
    /**\n
     * APIProperty: events\n
     * {<OpenLayers.Events>} An events object that handles all \n
     *     events on the {<OpenLayers.Request>} object.\n
     *\n
     * All event listeners will receive an event object with three properties:\n
     * request - {<OpenLayers.Request.XMLHttpRequest>} The request object.\n
     * config - {Object} The config object sent to the specific request method.\n
     * requestUrl - {String} The request url.\n
     * \n
     * Supported event types:\n
     * complete - Triggered when we have a response from the request, if a\n
     *     listener returns false, no further response processing will take\n
     *     place.\n
     * success - Triggered when the HTTP response has a success code (200-299).\n
     * failure - Triggered when the HTTP response does not have a success code.\n
     */\n
    events: new OpenLayers.Events(this),\n
    \n
    /**\n
     * Method: makeSameOrigin\n
     * Using the specified proxy, returns a same origin url of the provided url.\n
     *\n
     * Parameters:\n
     * url - {String} An arbitrary url\n
     * proxy {String|Function} The proxy to use to make the provided url a\n
     *     same origin url.\n
     *\n
     * Returns\n
     * {String} the same origin url. If no proxy is provided, the returned url\n
     *     will be the same as the provided url.\n
     */\n
    makeSameOrigin: function(url, proxy) {\n
        var sameOrigin = url.indexOf("http") !== 0;\n
        var urlParts = !sameOrigin && url.match(this.URL_SPLIT_REGEX);\n
        if (urlParts) {\n
            var location = window.location;\n
            sameOrigin =\n
                urlParts[1] == location.protocol &&\n
                urlParts[3] == location.hostname;\n
            var uPort = urlParts[4], lPort = location.port;\n
            if (uPort != 80 && uPort != "" || lPort != "80" && lPort != "") {\n
                sameOrigin = sameOrigin && uPort == lPort;\n
            }\n
        }\n
        if (!sameOrigin) {\n
            if (proxy) {\n
                if (typeof proxy == "function") {\n
                    url = proxy(url);\n
                } else {\n
                    url = proxy + encodeURIComponent(url);\n
                }\n
            } else {\n
                OpenLayers.Console.warn(\n
                    OpenLayers.i18n("proxyNeeded"), {url: url});\n
            }\n
        }\n
        return url;\n
    },\n
\n
    /**\n
     * APIMethod: issue\n
     * Create a new XMLHttpRequest object, open it, set any headers, bind\n
     *     a callback to done state, and send any data.  It is recommended that\n
     *     you use one <GET>, <POST>, <PUT>, <DELETE>, <OPTIONS>, or <HEAD>.\n
     *     This method is only documented to provide detail on the configuration\n
     *     options available to all request methods.\n
     *\n
     * Parameters:\n
     * config - {Object} Object containing properties for configuring the\n
     *     request.  Allowed configuration properties are described below.\n
     *     This object is modified and should not be reused.\n
     *\n
     * Allowed config properties:\n
     * method - {String} One of GET, POST, PUT, DELETE, HEAD, or\n
     *     OPTIONS.  Default is GET.\n
     * url - {String} URL for the request.\n
     * async - {Boolean} Open an asynchronous request.  Default is true.\n
     * user - {String} User for relevant authentication scheme.  Set\n
     *     to null to clear current user.\n
     * password - {String} Password for relevant authentication scheme.\n
     *     Set to null to clear current password.\n
     * proxy - {String} Optional proxy.  Defaults to\n
     *     <OpenLayers.ProxyHost>.\n
     * params - {Object} Any key:value pairs to be appended to the\n
     *     url as a query string.  Assumes url doesn\'t already include a query\n
     *     string or hash.  Typically, this is only appropriate for <GET>\n
     *     requests where the query string will be appended to the url.\n
     *     Parameter values that are arrays will be\n
     *     concatenated with a comma (note that this goes against form-encoding)\n
     *     as is done with <OpenLayers.Util.getParameterString>.\n
     * headers - {Object} Object with header:value pairs to be set on\n
     *     the request.\n
     * data - {String | Document} Optional data to send with the request.\n
     *     Typically, this is only used with <POST> and <PUT> requests.\n
     *     Make sure to provide the appropriate "Content-Type" header for your\n
     *     data.  For <POST> and <PUT> requests, the content type defaults to\n
     *     "application-xml".  If your data is a different content type, or\n
     *     if you are using a different HTTP method, set the "Content-Type"\n
     *     header to match your data type.\n
     * callback - {Function} Function to call when request is done.\n
     *     To determine if the request failed, check request.status (200\n
     *     indicates success).\n
     * success - {Function} Optional function to call if request status is in\n
     *     the 200s.  This will be called in addition to callback above and\n
     *     would typically only be used as an alternative.\n
     * failure - {Function} Optional function to call if request status is not\n
     *     in the 200s.  This will be called in addition to callback above and\n
     *     would typically only be used as an alternative.\n
     * scope - {Object} If callback is a public method on some object,\n
     *     set the scope to that object.\n
     *\n
     * Returns:\n
     * {XMLHttpRequest} Request object.  To abort the request before a response\n
     *     is received, call abort() on the request object.\n
     */\n
    issue: function(config) {        \n
        // apply default config - proxy host may have changed\n
        var defaultConfig = OpenLayers.Util.extend(\n
            this.DEFAULT_CONFIG,\n
            {proxy: OpenLayers.ProxyHost}\n
        );\n
        config = OpenLayers.Util.applyDefaults(config, defaultConfig);\n
        \n
        // Always set the "X-Requested-With" header to signal that this request\n
        // was issued through the XHR-object. Since header keys are case \n
        // insensitive and we want to allow overriding of the "X-Requested-With"\n
        // header through the user we cannot use applyDefaults, but have to \n
        // check manually whether we were called with a "X-Requested-With"\n
        // header.\n
        var customRequestedWithHeader = false,\n
            headerKey;\n
        for(headerKey in config.headers) {\n
            if (config.headers.hasOwnProperty( headerKey )) {\n
                if (headerKey.toLowerCase() === \'x-requested-with\') {\n
                    customRequestedWithHeader = true;\n
                }\n
            }\n
        }\n
        if (customRequestedWithHeader === false) {\n
            // we did not have a custom "X-Requested-With" header\n
            config.headers[\'X-Requested-With\'] = \'XMLHttpRequest\';\n
        }\n
\n
        // create request, open, and set headers\n
        var request = new OpenLayers.Request.XMLHttpRequest();\n
        var url = OpenLayers.Util.urlAppend(config.url, \n
            OpenLayers.Util.getParameterString(config.params || {}));\n
        url = OpenLayers.Request.makeSameOrigin(url, config.proxy);\n
        request.open(\n
            config.method, url, config.async, config.user, config.password\n
        );\n
        for(var header in config.headers) {\n
            request.setRequestHeader(header, config.headers[header]);\n
        }\n
\n
        var events = this.events;\n
\n
        // we want to execute runCallbacks with "this" as the\n
        // execution scope\n
        var self = this;\n
        \n
        request.onreadystatechange = function() {\n
            if(request.readyState == OpenLayers.Request.XMLHttpRequest.DONE) {\n
                var proceed = events.triggerEvent(\n
                    "complete",\n
                    {request: request, config: config, requestUrl: url}\n
                );\n
                if(proceed !== false) {\n
                    self.runCallbacks(\n
                        {request: request, config: config, requestUrl: url}\n
                    );\n
                }\n
            }\n
        };\n
        \n
        // send request (optionally with data) and return\n
        // call in a timeout for asynchronous requests so the return is\n
        // available before readyState == 4 for cached docs\n
        if(config.async === false) {\n
            request.send(config.data);\n
        } else {\n
            window.setTimeout(function(){\n
                if (request.readyState !== 0) { // W3C: 0-UNSENT\n
                    request.send(config.data);\n
                }\n
            }, 0);\n
        }\n
        return request;\n
    },\n
    \n
    /**\n
     * Method: runCallbacks\n
     * Calls the complete, success and failure callbacks. Application\n
     *    can listen to the "complete" event, have the listener \n
     *    display a confirm window and always return false, and\n
     *    execute OpenLayers.Request.runCallbacks if the user\n
     *    hits "yes" in the confirm window.\n
     *\n
     * Parameters:\n
     * options - {Object} Hash containing request, config and requestUrl keys\n
     */\n
    runCallbacks: function(options) {\n
        var request = options.request;\n
        var config = options.config;\n
        \n
        // bind callbacks to readyState 4 (done)\n
        var complete = (config.scope) ?\n
            OpenLayers.Function.bind(config.callback, config.scope) :\n
            config.callback;\n
        \n
        // optional success callback\n
        var success;\n
        if(config.success) {\n
            success = (config.scope) ?\n
                OpenLayers.Function.bind(config.success, config.scope) :\n
                config.success;\n
        }\n
\n
        // optional failure callback\n
        var failure;\n
        if(config.failure) {\n
            failure = (config.scope) ?\n
                OpenLayers.Function.bind(config.failure, config.scope) :\n
                config.failure;\n
        }\n
\n
        if (OpenLayers.Util.createUrlObject(config.url).protocol == "file:" &&\n
                                                        request.responseText) {\n
            request.status = 200;\n
        }\n
        complete(request);\n
\n
        if (!request.status || (request.status >= 200 && request.status < 300)) {\n
            this.events.triggerEvent("success", options);\n
            if(success) {\n
                success(request);\n
            }\n
        }\n
        if(request.status && (request.status < 200 || request.status >= 300)) {                    \n
            this.events.triggerEvent("failure", options);\n
            if(failure) {\n
                failure(request);\n
            }\n
        }\n
    },\n
    \n
    /**\n
     * APIMethod: GET\n
     * Send an HTTP GET request.  Additional configuration properties are\n
     *     documented in the <issue> method, with the method property set\n
     *     to GET.\n
     *\n
     * Parameters:\n
     * config - {Object} Object with properties for configuring the request.\n
     *     See the <issue> method for documentation of allowed properties.\n
     *     This object is modified and should not be reused.\n
     * \n
     * Returns:\n
     * {XMLHttpRequest} Request object.\n
     */\n
    GET: function(config) {\n
        config = OpenLayers.Util.extend(config, {method: "GET"});\n
        return OpenLayers.Request.issue(config);\n
    },\n
    \n
    /**\n
     * APIMethod: POST\n
     * Send a POST request.  Additional configuration properties are\n
     *     documented in the <issue> method, with the method property set\n
     *     to POST and "Content-Type" header set to "application/xml".\n
     *\n
     * Parameters:\n
     * config - {Object} Object with properties for configuring the request.\n
     *     See the <issue> method for documentation of allowed properties.  The\n
     *     default "Content-Type" header will be set to "application-xml" if\n
     *     none is provided.  This object is modified and should not be reused.\n
     * \n
     * Returns:\n
     * {XMLHttpRequest} Request object.\n
     */\n
    POST: function(config) {\n
        config = OpenLayers.Util.extend(config, {method: "POST"});\n
        // set content type to application/xml if it isn\'t already set\n
        config.headers = config.headers ? config.headers : {};\n
        if(!("CONTENT-TYPE" in OpenLayers.Util.upperCaseObject(config.headers))) {\n
            config.headers["Content-Type"] = "application/xml";\n
        }\n
        return OpenLayers.Request.issue(config);\n
    },\n
    \n
    /**\n
     * APIMethod: PUT\n
     * Send an HTTP PUT request.  Additional configuration properties are\n
     *     documented in the <issue> method, with the method property set\n
     *     to PUT and "Content-Type" header set to "application/xml".\n
     *\n
     * Parameters:\n
     * config - {Object} Object with properties for configuring the request.\n
     *     See the <issue> method for documentation of allowed properties.  The\n
     *     default "Content-Type" header will be set to "application-xml" if\n
     *     none is provided.  This object is modified and should not be reused.\n
     * \n
     * Returns:\n
     * {XMLHttpRequest} Request object.\n
     */\n
    PUT: function(config) {\n
        config = OpenLayers.Util.extend(config, {method: "PUT"});\n
        // set content type to application/xml if it isn\'t already set\n
        config.headers = config.headers ? config.headers : {};\n
        if(!("CONTENT-TYPE" in OpenLayers.Util.upperCaseObject(config.headers))) {\n
            config.headers["Content-Type"] = "application/xml";\n
        }\n
        return OpenLayers.Request.issue(config);\n
    },\n
    \n
    /**\n
     * APIMethod: DELETE\n
     * Send an HTTP DELETE request.  Additional configuration properties are\n
     *     documented in the <issue> method, with the method property set\n
     *     to DELETE.\n
     *\n
     * Parameters:\n
     * config - {Object} Object with properties for configuring the request.\n
     *     See the <issue> method for documentation of allowed properties.\n
     *     This object is modified and should not be reused.\n
     * \n
     * Returns:\n
     * {XMLHttpRequest} Request object.\n
     */\n
    DELETE: function(config) {\n
        config = OpenLayers.Util.extend(config, {method: "DELETE"});\n
        return OpenLayers.Request.issue(config);\n
    },\n
  \n
    /**\n
     * APIMethod: HEAD\n
     * Send an HTTP HEAD request.  Additional configuration properties are\n
     *     documented in the <issue> method, with the method property set\n
     *     to HEAD.\n
     *\n
     * Parameters:\n
     * config - {Object} Object with properties for configuring the request.\n
     *     See the <issue> method for documentation of allowed properties.\n
     *     This object is modified and should not be reused.\n
     * \n
     * Returns:\n
     * {XMLHttpRequest} Request object.\n
     */\n
    HEAD: function(config) {\n
        config = OpenLayers.Util.extend(config, {method: "HEAD"});\n
        return OpenLayers.Request.issue(config);\n
    },\n
    \n
    /**\n
     * APIMethod: OPTIONS\n
     * Send an HTTP OPTIONS request.  Additional configuration properties are\n
     *     documented in the <issue> method, with the method property set\n
     *     to OPTIONS.\n
     *\n
     * Parameters:\n
     * config - {Object} Object with properties for configuring the request.\n
     *     See the <issue> method for documentation of allowed properties.\n
     *     This object is modified and should not be reused.\n
     * \n
     * Returns:\n
     * {XMLHttpRequest} Request object.\n
     */\n
    OPTIONS: function(config) {\n
        config = OpenLayers.Util.extend(config, {method: "OPTIONS"});\n
        return OpenLayers.Request.issue(config);\n
    }\n
\n
};\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>16643</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

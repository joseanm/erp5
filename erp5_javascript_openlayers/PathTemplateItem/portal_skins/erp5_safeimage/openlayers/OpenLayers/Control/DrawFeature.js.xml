<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.8</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>DrawFeature.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
\n
/**\n
 * @requires OpenLayers/Control.js\n
 * @requires OpenLayers/Feature/Vector.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Control.DrawFeature\n
 * The DrawFeature control draws point, line or polygon features on a vector\n
 * layer when active.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Control>\n
 */\n
OpenLayers.Control.DrawFeature = OpenLayers.Class(OpenLayers.Control, {\n
    \n
    /**\n
     * Property: layer\n
     * {<OpenLayers.Layer.Vector>}\n
     */\n
    layer: null,\n
\n
    /**\n
     * Property: callbacks\n
     * {Object} The functions that are sent to the handler for callback\n
     */\n
    callbacks: null,\n
    \n
    /** \n
     * APIProperty: events\n
     * {<OpenLayers.Events>} Events instance for listeners and triggering\n
     *     control specific events.\n
     *\n
     * Register a listener for a particular event with the following syntax:\n
     * (code)\n
     * control.events.register(type, obj, listener);\n
     * (end)\n
     *\n
     * Supported event types (in addition to those from <OpenLayers.Control.events>):\n
     * featureadded - Triggered when a feature is added\n
     */\n
    \n
    /**\n
     * APIProperty: multi\n
     * {Boolean} Cast features to multi-part geometries before passing to the\n
     *     layer.  Default is false.\n
     */\n
    multi: false,\n
\n
    /**\n
     * APIProperty: featureAdded\n
     * {Function} Called after each feature is added\n
     */\n
    featureAdded: function() {},\n
\n
    /**\n
     * APIProperty: handlerOptions\n
     * {Object} Used to set non-default properties on the control\'s handler\n
     */\n
    handlerOptions: null,\n
    \n
    /**\n
     * Constructor: OpenLayers.Control.DrawFeature\n
     * \n
     * Parameters:\n
     * layer - {<OpenLayers.Layer.Vector>} \n
     * handler - {<OpenLayers.Handler>} \n
     * options - {Object} \n
     */\n
    initialize: function(layer, handler, options) {\n
        OpenLayers.Control.prototype.initialize.apply(this, [options]);\n
        this.callbacks = OpenLayers.Util.extend(\n
            {\n
                done: this.drawFeature,\n
                modify: function(vertex, feature) {\n
                    this.layer.events.triggerEvent(\n
                        "sketchmodified", {vertex: vertex, feature: feature}\n
                    );\n
                },\n
                create: function(vertex, feature) {\n
                    this.layer.events.triggerEvent(\n
                        "sketchstarted", {vertex: vertex, feature: feature}\n
                    );\n
                }\n
            },\n
            this.callbacks\n
        );\n
        this.layer = layer;\n
        this.handlerOptions = this.handlerOptions || {};\n
        this.handlerOptions.layerOptions = OpenLayers.Util.applyDefaults(\n
            this.handlerOptions.layerOptions, {\n
                renderers: layer.renderers, rendererOptions: layer.rendererOptions\n
            }\n
        );\n
        if (!("multi" in this.handlerOptions)) {\n
            this.handlerOptions.multi = this.multi;\n
        }\n
        var sketchStyle = this.layer.styleMap && this.layer.styleMap.styles.temporary;\n
        if(sketchStyle) {\n
            this.handlerOptions.layerOptions = OpenLayers.Util.applyDefaults(\n
                this.handlerOptions.layerOptions,\n
                {styleMap: new OpenLayers.StyleMap({"default": sketchStyle})}\n
            );\n
        }\n
        this.handler = new handler(this, this.callbacks, this.handlerOptions);\n
    },\n
\n
    /**\n
     * Method: drawFeature\n
     */\n
    drawFeature: function(geometry) {\n
        var feature = new OpenLayers.Feature.Vector(geometry);\n
        var proceed = this.layer.events.triggerEvent(\n
            "sketchcomplete", {feature: feature}\n
        );\n
        if(proceed !== false) {\n
            feature.state = OpenLayers.State.INSERT;\n
            this.layer.addFeatures([feature]);\n
            this.featureAdded(feature);\n
            this.events.triggerEvent("featureadded",{feature : feature});\n
        }\n
    },\n
    \n
    /**\n
     * APIMethod: insertXY\n
     * Insert a point in the current sketch given x & y coordinates.\n
     *\n
     * Parameters:\n
     * x - {Number} The x-coordinate of the point.\n
     * y - {Number} The y-coordinate of the point.\n
     */\n
    insertXY: function(x, y) {\n
        if (this.handler && this.handler.line) {\n
            this.handler.insertXY(x, y);\n
        }\n
    },\n
\n
    /**\n
     * APIMethod: insertDeltaXY\n
     * Insert a point given offsets from the previously inserted point.\n
     *\n
     * Parameters:\n
     * dx - {Number} The x-coordinate offset of the point.\n
     * dy - {Number} The y-coordinate offset of the point.\n
     */\n
    insertDeltaXY: function(dx, dy) {\n
        if (this.handler && this.handler.line) {\n
            this.handler.insertDeltaXY(dx, dy);\n
        }\n
    },\n
\n
    /**\n
     * APIMethod: insertDirectionLength\n
     * Insert a point in the current sketch given a direction and a length.\n
     *\n
     * Parameters:\n
     * direction - {Number} Degrees clockwise from the positive x-axis.\n
     * length - {Number} Distance from the previously drawn point.\n
     */\n
    insertDirectionLength: function(direction, length) {\n
        if (this.handler && this.handler.line) {\n
            this.handler.insertDirectionLength(direction, length);\n
        }\n
    },\n
\n
    /**\n
     * APIMethod: insertDeflectionLength\n
     * Insert a point in the current sketch given a deflection and a length.\n
     *     The deflection should be degrees clockwise from the previously \n
     *     digitized segment.\n
     *\n
     * Parameters:\n
     * deflection - {Number} Degrees clockwise from the previous segment.\n
     * length - {Number} Distance from the previously drawn point.\n
     */\n
    insertDeflectionLength: function(deflection, length) {\n
        if (this.handler && this.handler.line) {\n
            this.handler.insertDeflectionLength(deflection, length);\n
        }\n
    },\n
    \n
    /**\n
     * APIMethod: undo\n
     * Remove the most recently added point in the current sketch geometry.\n
     *\n
     * Returns: \n
     * {Boolean} An edit was undone.\n
     */\n
    undo: function() {\n
        return this.handler.undo && this.handler.undo();\n
    },\n
    \n
    /**\n
     * APIMethod: redo\n
     * Reinsert the most recently removed point resulting from an <undo> call.\n
     *     The undo stack is deleted whenever a point is added by other means.\n
     *\n
     * Returns: \n
     * {Boolean} An edit was redone.\n
     */\n
    redo: function() {\n
        return this.handler.redo && this.handler.redo();\n
    },\n
    \n
    /**\n
     * APIMethod: finishSketch\n
     * Finishes the sketch without including the currently drawn point.\n
     *     This method can be called to terminate drawing programmatically\n
     *     instead of waiting for the user to end the sketch.\n
     */\n
    finishSketch: function() {\n
        this.handler.finishGeometry();\n
    },\n
\n
    /**\n
     * APIMethod: cancel\n
     * Cancel the current sketch.  This removes the current sketch and keeps\n
     *     the drawing control active.\n
     */\n
    cancel: function() {\n
        this.handler.cancel();\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Control.DrawFeature"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>7217</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

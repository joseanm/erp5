<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.8</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Navigation.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Control/ZoomBox.js\n
 * @requires OpenLayers/Control/DragPan.js\n
 * @requires OpenLayers/Handler/MouseWheel.js\n
 * @requires OpenLayers/Handler/Click.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Control.Navigation\n
 * The navigation control handles map browsing with mouse events (dragging,\n
 *     double-clicking, and scrolling the wheel).  Create a new navigation \n
 *     control with the <OpenLayers.Control.Navigation> control.  \n
 * \n
 *     Note that this control is added to the map by default (if no controls \n
 *     array is sent in the options object to the <OpenLayers.Map> \n
 *     constructor).\n
 * \n
 * Inherits:\n
 *  - <OpenLayers.Control>\n
 */\n
OpenLayers.Control.Navigation = OpenLayers.Class(OpenLayers.Control, {\n
\n
    /** \n
     * Property: dragPan\n
     * {<OpenLayers.Control.DragPan>} \n
     */\n
    dragPan: null,\n
\n
    /**\n
     * APIProperty: dragPanOptions\n
     * {Object} Options passed to the DragPan control.\n
     */\n
    dragPanOptions: null,\n
\n
    /**\n
     * Property: pinchZoom\n
     * {<OpenLayers.Control.PinchZoom>}\n
     */\n
    pinchZoom: null,\n
\n
    /**\n
     * APIProperty: pinchZoomOptions\n
     * {Object} Options passed to the PinchZoom control.\n
     */\n
    pinchZoomOptions: null,\n
\n
    /**\n
     * APIProperty: documentDrag\n
     * {Boolean} Allow panning of the map by dragging outside map viewport.\n
     *     Default is false.\n
     */\n
    documentDrag: false,\n
\n
    /** \n
     * Property: zoomBox\n
     * {<OpenLayers.Control.ZoomBox>}\n
     */\n
    zoomBox: null,\n
\n
    /**\n
     * APIProperty: zoomBoxEnabled\n
     * {Boolean} Whether the user can draw a box to zoom\n
     */\n
    zoomBoxEnabled: true, \n
\n
    /**\n
     * APIProperty: zoomWheelEnabled\n
     * {Boolean} Whether the mousewheel should zoom the map\n
     */\n
    zoomWheelEnabled: true,\n
    \n
    /**\n
     * Property: mouseWheelOptions\n
     * {Object} Options passed to the MouseWheel control (only useful if\n
     *     <zoomWheelEnabled> is set to true)\n
     */\n
    mouseWheelOptions: null,\n
\n
    /**\n
     * APIProperty: handleRightClicks\n
     * {Boolean} Whether or not to handle right clicks. Default is false.\n
     */\n
    handleRightClicks: false,\n
\n
    /**\n
     * APIProperty: zoomBoxKeyMask\n
     * {Integer} <OpenLayers.Handler> key code of the key, which has to be\n
     *    pressed, while drawing the zoom box with the mouse on the screen. \n
     *    You should probably set handleRightClicks to true if you use this\n
     *    with MOD_CTRL, to disable the context menu for machines which use\n
     *    CTRL-Click as a right click.\n
     * Default: <OpenLayers.Handler.MOD_SHIFT>\n
     */\n
    zoomBoxKeyMask: OpenLayers.Handler.MOD_SHIFT,\n
    \n
    /**\n
     * APIProperty: autoActivate\n
     * {Boolean} Activate the control when it is added to a map.  Default is\n
     *     true.\n
     */\n
    autoActivate: true,\n
\n
    /**\n
     * Constructor: OpenLayers.Control.Navigation\n
     * Create a new navigation control\n
     * \n
     * Parameters:\n
     * options - {Object} An optional object whose properties will be set on\n
     *                    the control\n
     */\n
    initialize: function(options) {\n
        this.handlers = {};\n
        OpenLayers.Control.prototype.initialize.apply(this, arguments);\n
    },\n
\n
    /**\n
     * Method: destroy\n
     * The destroy method is used to perform any clean up before the control\n
     * is dereferenced.  Typically this is where event listeners are removed\n
     * to prevent memory leaks.\n
     */\n
    destroy: function() {\n
        this.deactivate();\n
\n
        if (this.dragPan) {\n
            this.dragPan.destroy();\n
        }\n
        this.dragPan = null;\n
\n
        if (this.zoomBox) {\n
            this.zoomBox.destroy();\n
        }\n
        this.zoomBox = null;\n
\n
        if (this.pinchZoom) {\n
            this.pinchZoom.destroy();\n
        }\n
        this.pinchZoom = null;\n
\n
        OpenLayers.Control.prototype.destroy.apply(this,arguments);\n
    },\n
    \n
    /**\n
     * Method: activate\n
     */\n
    activate: function() {\n
        this.dragPan.activate();\n
        if (this.zoomWheelEnabled) {\n
            this.handlers.wheel.activate();\n
        }    \n
        this.handlers.click.activate();\n
        if (this.zoomBoxEnabled) {\n
            this.zoomBox.activate();\n
        }\n
        if (this.pinchZoom) {\n
            this.pinchZoom.activate();\n
        }\n
        return OpenLayers.Control.prototype.activate.apply(this,arguments);\n
    },\n
\n
    /**\n
     * Method: deactivate\n
     */\n
    deactivate: function() {\n
        if (this.pinchZoom) {\n
            this.pinchZoom.deactivate();\n
        }\n
        this.zoomBox.deactivate();\n
        this.dragPan.deactivate();\n
        this.handlers.click.deactivate();\n
        this.handlers.wheel.deactivate();\n
        return OpenLayers.Control.prototype.deactivate.apply(this,arguments);\n
    },\n
    \n
    /**\n
     * Method: draw\n
     */\n
    draw: function() {\n
        // disable right mouse context menu for support of right click events\n
        if (this.handleRightClicks) {\n
            this.map.viewPortDiv.oncontextmenu = OpenLayers.Function.False;\n
        }\n
\n
        var clickCallbacks = { \n
            \'click\': this.defaultClick,\n
            \'dblclick\': this.defaultDblClick, \n
            \'dblrightclick\': this.defaultDblRightClick \n
        };\n
        var clickOptions = {\n
            \'double\': true, \n
            \'stopDouble\': true\n
        };\n
        this.handlers.click = new OpenLayers.Handler.Click(\n
            this, clickCallbacks, clickOptions\n
        );\n
        this.dragPan = new OpenLayers.Control.DragPan(\n
            OpenLayers.Util.extend({\n
                map: this.map,\n
                documentDrag: this.documentDrag\n
            }, this.dragPanOptions)\n
        );\n
        this.zoomBox = new OpenLayers.Control.ZoomBox(\n
                    {map: this.map, keyMask: this.zoomBoxKeyMask});\n
        this.dragPan.draw();\n
        this.zoomBox.draw();\n
        this.handlers.wheel = new OpenLayers.Handler.MouseWheel(\n
                                    this, {"up"  : this.wheelUp,\n
                                           "down": this.wheelDown},\n
                                    this.mouseWheelOptions );\n
        if (OpenLayers.Control.PinchZoom) {\n
            this.pinchZoom = new OpenLayers.Control.PinchZoom(\n
                OpenLayers.Util.extend(\n
                    {map: this.map}, this.pinchZoomOptions));\n
        }\n
    },\n
\n
    /**\n
     * Method: defaultClick\n
     *\n
     * Parameters:\n
     * evt - {Event}\n
     */\n
    defaultClick: function (evt) {\n
        if (evt.lastTouches && evt.lastTouches.length == 2) {\n
            this.map.zoomOut();\n
        }\n
    },\n
\n
    /**\n
     * Method: defaultDblClick \n
     * \n
     * Parameters:\n
     * evt - {Event} \n
     */\n
    defaultDblClick: function (evt) {\n
        var newCenter = this.map.getLonLatFromViewPortPx( evt.xy ); \n
        this.map.setCenter(newCenter, this.map.zoom + 1);\n
    },\n
\n
    /**\n
     * Method: defaultDblRightClick \n
     * \n
     * Parameters:\n
     * evt - {Event} \n
     */\n
    defaultDblRightClick: function (evt) {\n
        var newCenter = this.map.getLonLatFromViewPortPx( evt.xy ); \n
        this.map.setCenter(newCenter, this.map.zoom - 1);\n
    },\n
    \n
    /**\n
     * Method: wheelChange  \n
     *\n
     * Parameters:\n
     * evt - {Event}\n
     * deltaZ - {Integer}\n
     */\n
    wheelChange: function(evt, deltaZ) {\n
        var currentZoom = this.map.getZoom();\n
        var newZoom = this.map.getZoom() + Math.round(deltaZ);\n
        newZoom = Math.max(newZoom, 0);\n
        newZoom = Math.min(newZoom, this.map.getNumZoomLevels());\n
        if (newZoom === currentZoom) {\n
            return;\n
        }\n
        var size    = this.map.getSize();\n
        var deltaX  = size.w/2 - evt.xy.x;\n
        var deltaY  = evt.xy.y - size.h/2;\n
        var newRes  = this.map.baseLayer.getResolutionForZoom(newZoom);\n
        var zoomPoint = this.map.getLonLatFromPixel(evt.xy);\n
        var newCenter = new OpenLayers.LonLat(\n
                            zoomPoint.lon + deltaX * newRes,\n
                            zoomPoint.lat + deltaY * newRes );\n
        this.map.setCenter( newCenter, newZoom );\n
    },\n
\n
    /** \n
     * Method: wheelUp\n
     * User spun scroll wheel up\n
     * \n
     * Parameters:\n
     * evt - {Event}\n
     * delta - {Integer}\n
     */\n
    wheelUp: function(evt, delta) {\n
        this.wheelChange(evt, delta || 1);\n
    },\n
\n
    /** \n
     * Method: wheelDown\n
     * User spun scroll wheel down\n
     * \n
     * Parameters:\n
     * evt - {Event}\n
     * delta - {Integer}\n
     */\n
    wheelDown: function(evt, delta) {\n
        this.wheelChange(evt, delta || -1);\n
    },\n
    \n
    /**\n
     * Method: disableZoomBox\n
     */\n
    disableZoomBox : function() {\n
        this.zoomBoxEnabled = false;\n
        this.zoomBox.deactivate();       \n
    },\n
    \n
    /**\n
     * Method: enableZoomBox\n
     */\n
    enableZoomBox : function() {\n
        this.zoomBoxEnabled = true;\n
        if (this.active) {\n
            this.zoomBox.activate();\n
        }    \n
    },\n
    \n
    /**\n
     * Method: disableZoomWheel\n
     */\n
    \n
    disableZoomWheel : function() {\n
        this.zoomWheelEnabled = false;\n
        this.handlers.wheel.deactivate();       \n
    },\n
    \n
    /**\n
     * Method: enableZoomWheel\n
     */\n
    \n
    enableZoomWheel : function() {\n
        this.zoomWheelEnabled = true;\n
        if (this.active) {\n
            this.handlers.wheel.activate();\n
        }    \n
    },\n
\n
    CLASS_NAME: "OpenLayers.Control.Navigation"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>9585</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

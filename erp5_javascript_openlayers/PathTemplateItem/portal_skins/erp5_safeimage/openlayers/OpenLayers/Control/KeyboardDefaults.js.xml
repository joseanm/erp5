<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.81</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>KeyboardDefaults.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Control.js\n
 * @requires OpenLayers/Handler/Keyboard.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Control.KeyboardDefaults\n
 * The KeyboardDefaults control adds panning and zooming functions, controlled\n
 * with the keyboard. By default arrow keys pan, +/- keys zoom & Page Up/Page\n
 * Down/Home/End scroll by three quarters of a page.\n
 * \n
 * This control has no visible appearance.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Control>\n
 */\n
OpenLayers.Control.KeyboardDefaults = OpenLayers.Class(OpenLayers.Control, {\n
\n
    /**\n
     * APIProperty: autoActivate\n
     * {Boolean} Activate the control when it is added to a map.  Default is\n
     *     true.\n
     */\n
    autoActivate: true,\n
\n
    /**\n
     * APIProperty: slideFactor\n
     * Pixels to slide by.\n
     */\n
    slideFactor: 75,\n
\n
    /**\n
     * APIProperty: observeElement\n
     * {DOMelement|String} The DOM element to handle keys for. You\n
     *     can use the map div here, to have the navigation keys\n
     *     work when the map div has the focus. If undefined the\n
     *     document is used.\n
     */\n
    observeElement: null,\n
\n
    /**\n
     * Constructor: OpenLayers.Control.KeyboardDefaults\n
     */\n
        \n
    /**\n
     * Method: draw\n
     * Create handler.\n
     */\n
    draw: function() {\n
        var observeElement = this.observeElement || document;\n
        this.handler = new OpenLayers.Handler.Keyboard( this,\n
                {"keydown": this.defaultKeyPress},\n
                {observeElement: observeElement}\n
        );\n
    },\n
    \n
    /**\n
     * Method: defaultKeyPress\n
     * When handling the key event, we only use evt.keyCode. This holds \n
     * some drawbacks, though we get around them below. When interpretting\n
     * the keycodes below (including the comments associated with them),\n
     * consult the URL below. For instance, the Safari browser returns\n
     * "IE keycodes", and so is supported by any keycode labeled "IE".\n
     * \n
     * Very informative URL:\n
     *    http://unixpapa.com/js/key.html\n
     *\n
     * Parameters:\n
     * evt - {Event} \n
     */\n
    defaultKeyPress: function (evt) {\n
        var size, handled = true;\n
        switch(evt.keyCode) {\n
            case OpenLayers.Event.KEY_LEFT:\n
                this.map.pan(-this.slideFactor, 0);\n
                break;\n
            case OpenLayers.Event.KEY_RIGHT: \n
                this.map.pan(this.slideFactor, 0);\n
                break;\n
            case OpenLayers.Event.KEY_UP:\n
                this.map.pan(0, -this.slideFactor);\n
                break;\n
            case OpenLayers.Event.KEY_DOWN:\n
                this.map.pan(0, this.slideFactor);\n
                break;\n
            \n
            case 33: // Page Up. Same in all browsers.\n
                size = this.map.getSize();\n
                this.map.pan(0, -0.75*size.h);\n
                break;\n
            case 34: // Page Down. Same in all browsers.\n
                size = this.map.getSize();\n
                this.map.pan(0, 0.75*size.h);\n
                break; \n
            case 35: // End. Same in all browsers.\n
                size = this.map.getSize();\n
                this.map.pan(0.75*size.w, 0);\n
                break; \n
            case 36: // Home. Same in all browsers.\n
                size = this.map.getSize();\n
                this.map.pan(-0.75*size.w, 0);\n
                break; \n
\n
            case 43:  // +/= (ASCII), keypad + (ASCII, Opera)\n
            case 61:  // +/= (Mozilla, Opera, some ASCII)\n
            case 187: // +/= (IE)\n
            case 107: // keypad + (IE, Mozilla)\n
                this.map.zoomIn();\n
                break; \n
            case 45:  // -/_ (ASCII, Opera), keypad - (ASCII, Opera)\n
            case 109: // -/_ (Mozilla), keypad - (Mozilla, IE)\n
            case 189: // -/_ (IE)\n
            case 95:  // -/_ (some ASCII)\n
                this.map.zoomOut();\n
                break; \n
            default:\n
                handled = false;\n
        }\n
        if (handled) {\n
            // prevent browser default not to move the page\n
            // when moving the page with the keyboard\n
            OpenLayers.Event.stop(evt);\n
        }\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Control.KeyboardDefaults"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4399</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

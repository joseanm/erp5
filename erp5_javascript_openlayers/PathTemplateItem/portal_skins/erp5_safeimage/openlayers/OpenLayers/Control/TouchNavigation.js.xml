<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.81</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>TouchNavigation.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for\n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Control/DragPan.js\n
 * @requires OpenLayers/Control/PinchZoom.js\n
 * @requires OpenLayers/Handler/Click.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Control.TouchNavigation\n
 * The navigation control handles map browsing with touch events (dragging,\n
 *     double-tapping, tap with two fingers, and pinch zoom).  Create a new \n
 *     control with the <OpenLayers.Control.TouchNavigation> constructor.\n
 *\n
 * If youâ€™re only targeting touch enabled devices with your mapping application,\n
 *     you can create a map with only a TouchNavigation control. The \n
 *     <OpenLayers.Control.Navigation> control is mobile ready by default, but \n
 *     you can generate a smaller build of the library by only including this\n
 *     touch navigation control if you aren\'t concerned about mouse interaction.\n
 *\n
 * Inherits:\n
 *  - <OpenLayers.Control>\n
 */\n
OpenLayers.Control.TouchNavigation = OpenLayers.Class(OpenLayers.Control, {\n
\n
    /**\n
     * Property: dragPan\n
     * {<OpenLayers.Control.DragPan>}\n
     */\n
    dragPan: null,\n
\n
    /**\n
     * APIProperty: dragPanOptions\n
     * {Object} Options passed to the DragPan control.\n
     */\n
    dragPanOptions: null,\n
\n
    /**\n
     * Property: pinchZoom\n
     * {<OpenLayers.Control.PinchZoom>}\n
     */\n
    pinchZoom: null,\n
\n
    /**\n
     * APIProperty: pinchZoomOptions\n
     * {Object} Options passed to the PinchZoom control.\n
     */\n
    pinchZoomOptions: null,\n
\n
    /**\n
     * APIProperty: clickHandlerOptions\n
     * {Object} Options passed to the Click handler.\n
     */\n
    clickHandlerOptions: null,\n
\n
    /**\n
     * APIProperty: documentDrag\n
     * {Boolean} Allow panning of the map by dragging outside map viewport.\n
     *     Default is false.\n
     */\n
    documentDrag: false,\n
\n
    /**\n
     * APIProperty: autoActivate\n
     * {Boolean} Activate the control when it is added to a map.  Default is\n
     *     true.\n
     */\n
    autoActivate: true,\n
\n
    /**\n
     * Constructor: OpenLayers.Control.TouchNavigation\n
     * Create a new navigation control\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object whose properties will be set on\n
     *                    the control\n
     */\n
    initialize: function(options) {\n
        this.handlers = {};\n
        OpenLayers.Control.prototype.initialize.apply(this, arguments);\n
    },\n
\n
    /**\n
     * Method: destroy\n
     * The destroy method is used to perform any clean up before the control\n
     * is dereferenced.  Typically this is where event listeners are removed\n
     * to prevent memory leaks.\n
     */\n
    destroy: function() {\n
        this.deactivate();\n
        if(this.dragPan) {\n
            this.dragPan.destroy();\n
        }\n
        this.dragPan = null;\n
        if (this.pinchZoom) {\n
            this.pinchZoom.destroy();\n
            delete this.pinchZoom;\n
        }\n
        OpenLayers.Control.prototype.destroy.apply(this,arguments);\n
    },\n
\n
    /**\n
     * Method: activate\n
     */\n
    activate: function() {\n
        if(OpenLayers.Control.prototype.activate.apply(this,arguments)) {\n
            this.dragPan.activate();\n
            this.handlers.click.activate();\n
            this.pinchZoom.activate();\n
            return true;\n
        }\n
        return false;\n
    },\n
\n
    /**\n
     * Method: deactivate\n
     */\n
    deactivate: function() {\n
        if(OpenLayers.Control.prototype.deactivate.apply(this,arguments)) {\n
            this.dragPan.deactivate();\n
            this.handlers.click.deactivate();\n
            this.pinchZoom.deactivate();\n
            return true;\n
        }\n
        return false;\n
    },\n
    \n
    /**\n
     * Method: draw\n
     */\n
    draw: function() {\n
        var clickCallbacks = {\n
            click: this.defaultClick,\n
            dblclick: this.defaultDblClick\n
        };\n
        var clickOptions = OpenLayers.Util.extend({\n
            "double": true,\n
            stopDouble: true,\n
            pixelTolerance: 2\n
        }, this.clickHandlerOptions);\n
        this.handlers.click = new OpenLayers.Handler.Click(\n
            this, clickCallbacks, clickOptions\n
        );\n
        this.dragPan = new OpenLayers.Control.DragPan(\n
            OpenLayers.Util.extend({\n
                map: this.map,\n
                documentDrag: this.documentDrag\n
            }, this.dragPanOptions)\n
        );\n
        this.dragPan.draw();\n
        this.pinchZoom = new OpenLayers.Control.PinchZoom(\n
            OpenLayers.Util.extend({map: this.map}, this.pinchZoomOptions)\n
        );\n
    },\n
\n
    /**\n
     * Method: defaultClick\n
     *\n
     * Parameters:\n
     * evt - {Event}\n
     */\n
    defaultClick: function (evt) {\n
        if(evt.lastTouches && evt.lastTouches.length == 2) {\n
            this.map.zoomOut();\n
        }\n
    },\n
\n
    /**\n
     * Method: defaultDblClick\n
     *\n
     * Parameters:\n
     * evt - {Event}\n
     */\n
    defaultDblClick: function (evt) {\n
        var newCenter = this.map.getLonLatFromViewPortPx(evt.xy);\n
        this.map.setCenter(newCenter, this.map.zoom + 1);\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Control.TouchNavigation"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5219</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

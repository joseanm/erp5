<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.8</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>PanZoomBar.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
\n
/**\n
 * @requires OpenLayers/Control/PanZoom.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Control.PanZoomBar\n
 * The PanZoomBar is a visible control composed of a\n
 * <OpenLayers.Control.PanPanel> and a <OpenLayers.Control.ZoomBar>. \n
 * By default it is displayed in the upper left corner of the map as 4\n
 * directional arrows above a vertical slider.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Control.PanZoom>\n
 */\n
OpenLayers.Control.PanZoomBar = OpenLayers.Class(OpenLayers.Control.PanZoom, {\n
\n
    /** \n
     * APIProperty: zoomStopWidth\n
     */\n
    zoomStopWidth: 18,\n
\n
    /** \n
     * APIProperty: zoomStopHeight\n
     */\n
    zoomStopHeight: 11,\n
\n
    /** \n
     * Property: slider\n
     */\n
    slider: null,\n
\n
    /** \n
     * Property: sliderEvents\n
     * {<OpenLayers.Events>}\n
     */\n
    sliderEvents: null,\n
\n
    /** \n
     * Property: zoombarDiv\n
     * {DOMElement}\n
     */\n
    zoombarDiv: null,\n
\n
    /** \n
     * APIProperty: zoomWorldIcon\n
     * {Boolean}\n
     */\n
    zoomWorldIcon: false,\n
\n
    /**\n
     * APIProperty: panIcons\n
     * {Boolean} Set this property to false not to display the pan icons. If\n
     * false the zoom world icon is placed under the zoom bar. Defaults to\n
     * true.\n
     */\n
    panIcons: true,\n
\n
    /**\n
     * APIProperty: forceFixedZoomLevel\n
     * {Boolean} Force a fixed zoom level even though the map has \n
     *     fractionalZoom\n
     */\n
    forceFixedZoomLevel: false,\n
\n
    /**\n
     * Property: mouseDragStart\n
     * {<OpenLayers.Pixel>}\n
     */\n
    mouseDragStart: null,\n
\n
    /**\n
     * Property: deltaY\n
     * {Number} The cumulative vertical pixel offset during a zoom bar drag.\n
     */\n
    deltaY: null,\n
\n
    /**\n
     * Property: zoomStart\n
     * {<OpenLayers.Pixel>}\n
     */\n
    zoomStart: null,\n
\n
    /**\n
     * Constructor: OpenLayers.Control.PanZoomBar\n
     */ \n
\n
    /**\n
     * APIMethod: destroy\n
     */\n
    destroy: function() {\n
\n
        this._removeZoomBar();\n
\n
        this.map.events.un({\n
            "changebaselayer": this.redraw,\n
            scope: this\n
        });\n
\n
        OpenLayers.Control.PanZoom.prototype.destroy.apply(this, arguments);\n
\n
        delete this.mouseDragStart;\n
        delete this.zoomStart;\n
    },\n
    \n
    /**\n
     * Method: setMap\n
     * \n
     * Parameters:\n
     * map - {<OpenLayers.Map>} \n
     */\n
    setMap: function(map) {\n
        OpenLayers.Control.PanZoom.prototype.setMap.apply(this, arguments);\n
        this.map.events.register("changebaselayer", this, this.redraw);\n
    },\n
\n
    /** \n
     * Method: redraw\n
     * clear the div and start over.\n
     */\n
    redraw: function() {\n
        if (this.div != null) {\n
            this.removeButtons();\n
            this._removeZoomBar();\n
        }  \n
        this.draw();\n
    },\n
    \n
    /**\n
    * Method: draw \n
    *\n
    * Parameters:\n
    * px - {<OpenLayers.Pixel>} \n
    */\n
    draw: function(px) {\n
        // initialize our internal div\n
        OpenLayers.Control.prototype.draw.apply(this, arguments);\n
        px = this.position.clone();\n
\n
        // place the controls\n
        this.buttons = [];\n
\n
        var sz = {w: 18, h: 18};\n
        if (this.panIcons) {\n
            var centered = new OpenLayers.Pixel(px.x+sz.w/2, px.y);\n
            var wposition = sz.w;\n
\n
            if (this.zoomWorldIcon) {\n
                centered = new OpenLayers.Pixel(px.x+sz.w, px.y);\n
            }\n
\n
            this._addButton("panup", "north-mini.png", centered, sz);\n
            px.y = centered.y+sz.h;\n
            this._addButton("panleft", "west-mini.png", px, sz);\n
            if (this.zoomWorldIcon) {\n
                this._addButton("zoomworld", "zoom-world-mini.png", px.add(sz.w, 0), sz);\n
\n
                wposition *= 2;\n
            }\n
            this._addButton("panright", "east-mini.png", px.add(wposition, 0), sz);\n
            this._addButton("pandown", "south-mini.png", centered.add(0, sz.h*2), sz);\n
            this._addButton("zoomin", "zoom-plus-mini.png", centered.add(0, sz.h*3+5), sz);\n
            centered = this._addZoomBar(centered.add(0, sz.h*4 + 5));\n
            this._addButton("zoomout", "zoom-minus-mini.png", centered, sz);\n
        }\n
        else {\n
            this._addButton("zoomin", "zoom-plus-mini.png", px, sz);\n
            centered = this._addZoomBar(px.add(0, sz.h));\n
            this._addButton("zoomout", "zoom-minus-mini.png", centered, sz);\n
            if (this.zoomWorldIcon) {\n
                centered = centered.add(0, sz.h+3);\n
                this._addButton("zoomworld", "zoom-world-mini.png", centered, sz);\n
            }\n
        }\n
        return this.div;\n
    },\n
\n
    /** \n
    * Method: _addZoomBar\n
    * \n
    * Parameters:\n
    * centered - {<OpenLayers.Pixel>} where zoombar drawing is to start.\n
    */\n
    _addZoomBar:function(centered) {\n
        var imgLocation = OpenLayers.Util.getImageLocation("slider.png");\n
        var id = this.id + "_" + this.map.id;\n
        var zoomsToEnd = this.map.getNumZoomLevels() - 1 - this.map.getZoom();\n
        var slider = OpenLayers.Util.createAlphaImageDiv(id,\n
                       centered.add(-1, zoomsToEnd * this.zoomStopHeight), \n
                       {w: 20, h: 9},\n
                       imgLocation,\n
                       "absolute");\n
        slider.style.cursor = "move";\n
        this.slider = slider;\n
        \n
        this.sliderEvents = new OpenLayers.Events(this, slider, null, true,\n
                                            {includeXY: true});\n
        this.sliderEvents.on({\n
            "touchstart": this.zoomBarDown,\n
            "touchmove": this.zoomBarDrag,\n
            "touchend": this.zoomBarUp,\n
            "mousedown": this.zoomBarDown,\n
            "mousemove": this.zoomBarDrag,\n
            "mouseup": this.zoomBarUp\n
        });\n
        \n
        var sz = {\n
            w: this.zoomStopWidth,\n
            h: this.zoomStopHeight * this.map.getNumZoomLevels()\n
        };\n
        var imgLocation = OpenLayers.Util.getImageLocation("zoombar.png");\n
        var div = null;\n
        \n
        if (OpenLayers.Util.alphaHack()) {\n
            var id = this.id + "_" + this.map.id;\n
            div = OpenLayers.Util.createAlphaImageDiv(id, centered,\n
                                      {w: sz.w, h: this.zoomStopHeight},\n
                                      imgLocation,\n
                                      "absolute", null, "crop");\n
            div.style.height = sz.h + "px";\n
        } else {\n
            div = OpenLayers.Util.createDiv(\n
                        \'OpenLayers_Control_PanZoomBar_Zoombar\' + this.map.id,\n
                        centered,\n
                        sz,\n
                        imgLocation);\n
        }\n
        div.style.cursor = "pointer";\n
        div.className = "olButton";\n
        this.zoombarDiv = div;\n
        \n
        this.div.appendChild(div);\n
\n
        this.startTop = parseInt(div.style.top);\n
        this.div.appendChild(slider);\n
\n
        this.map.events.register("zoomend", this, this.moveZoomBar);\n
\n
        centered = centered.add(0, \n
            this.zoomStopHeight * this.map.getNumZoomLevels());\n
        return centered; \n
    },\n
    \n
    /**\n
     * Method: _removeZoomBar\n
     */\n
    _removeZoomBar: function() {\n
        this.sliderEvents.un({\n
            "touchstart": this.zoomBarDown,\n
            "touchmove": this.zoomBarDrag,\n
            "touchend": this.zoomBarUp,\n
            "mousedown": this.zoomBarDown,\n
            "mousemove": this.zoomBarDrag,\n
            "mouseup": this.zoomBarUp\n
        });\n
        this.sliderEvents.destroy();\n
        \n
        this.div.removeChild(this.zoombarDiv);\n
        this.zoombarDiv = null;\n
        this.div.removeChild(this.slider);\n
        this.slider = null;\n
        \n
        this.map.events.unregister("zoomend", this, this.moveZoomBar);\n
    },\n
    \n
    /**\n
     * Method: onButtonClick\n
     *\n
     * Parameters:\n
     * evt - {Event}\n
     */\n
    onButtonClick: function(evt) {\n
        OpenLayers.Control.PanZoom.prototype.onButtonClick.apply(this, arguments);\n
        if (evt.buttonElement === this.zoombarDiv) {\n
            var levels = evt.buttonXY.y / this.zoomStopHeight;\n
            if(this.forceFixedZoomLevel || !this.map.fractionalZoom) {\n
                levels = Math.floor(levels);\n
            }    \n
            var zoom = (this.map.getNumZoomLevels() - 1) - levels; \n
            zoom = Math.min(Math.max(zoom, 0), this.map.getNumZoomLevels() - 1);\n
            this.map.zoomTo(zoom);\n
        }\n
    },\n
    \n
    /**\n
     * Method: passEventToSlider\n
     * This function is used to pass events that happen on the div, or the map,\n
     * through to the slider, which then does its moving thing.\n
     *\n
     * Parameters:\n
     * evt - {<OpenLayers.Event>} \n
     */\n
    passEventToSlider:function(evt) {\n
        this.sliderEvents.handleBrowserEvent(evt);\n
    },\n
    \n
    /*\n
     * Method: zoomBarDown\n
     * event listener for clicks on the slider\n
     *\n
     * Parameters:\n
     * evt - {<OpenLayers.Event>} \n
     */\n
    zoomBarDown:function(evt) {\n
        if (!OpenLayers.Event.isLeftClick(evt) && !OpenLayers.Event.isSingleTouch(evt)) {\n
            return;\n
        }\n
        this.map.events.on({\n
            "touchmove": this.passEventToSlider,\n
            "mousemove": this.passEventToSlider,\n
            "mouseup": this.passEventToSlider,\n
            scope: this\n
        });\n
        this.mouseDragStart = evt.xy.clone();\n
        this.zoomStart = evt.xy.clone();\n
        this.div.style.cursor = "move";\n
        // reset the div offsets just in case the div moved\n
        this.zoombarDiv.offsets = null; \n
        OpenLayers.Event.stop(evt);\n
    },\n
    \n
    /*\n
     * Method: zoomBarDrag\n
     * This is what happens when a click has occurred, and the client is\n
     * dragging.  Here we must ensure that the slider doesn\'t go beyond the\n
     * bottom/top of the zoombar div, as well as moving the slider to its new\n
     * visual location\n
     *\n
     * Parameters:\n
     * evt - {<OpenLayers.Event>} \n
     */\n
    zoomBarDrag:function(evt) {\n
        if (this.mouseDragStart != null) {\n
            var deltaY = this.mouseDragStart.y - evt.xy.y;\n
            var offsets = OpenLayers.Util.pagePosition(this.zoombarDiv);\n
            if ((evt.clientY - offsets[1]) > 0 && \n
                (evt.clientY - offsets[1]) < parseInt(this.zoombarDiv.style.height) - 2) {\n
                var newTop = parseInt(this.slider.style.top) - deltaY;\n
                this.slider.style.top = newTop+"px";\n
                this.mouseDragStart = evt.xy.clone();\n
            }\n
            // set cumulative displacement\n
            this.deltaY = this.zoomStart.y - evt.xy.y;\n
            OpenLayers.Event.stop(evt);\n
        }\n
    },\n
    \n
    /*\n
     * Method: zoomBarUp\n
     * Perform cleanup when a mouseup event is received -- discover new zoom\n
     * level and switch to it.\n
     *\n
     * Parameters:\n
     * evt - {<OpenLayers.Event>} \n
     */\n
    zoomBarUp:function(evt) {\n
        if (!OpenLayers.Event.isLeftClick(evt) && evt.type !== "touchend") {\n
            return;\n
        }\n
        if (this.mouseDragStart) {\n
            this.div.style.cursor="";\n
            this.map.events.un({\n
                "touchmove": this.passEventToSlider,\n
                "mouseup": this.passEventToSlider,\n
                "mousemove": this.passEventToSlider,\n
                scope: this\n
            });\n
            var zoomLevel = this.map.zoom;\n
            if (!this.forceFixedZoomLevel && this.map.fractionalZoom) {\n
                zoomLevel += this.deltaY/this.zoomStopHeight;\n
                zoomLevel = Math.min(Math.max(zoomLevel, 0), \n
                                     this.map.getNumZoomLevels() - 1);\n
            } else {\n
                zoomLevel += this.deltaY/this.zoomStopHeight;\n
                zoomLevel = Math.max(Math.round(zoomLevel), 0);      \n
            }\n
            this.map.zoomTo(zoomLevel);\n
            this.mouseDragStart = null;\n
            this.zoomStart = null;\n
            this.deltaY = 0;\n
            OpenLayers.Event.stop(evt);\n
        }\n
    },\n
    \n
    /*\n
    * Method: moveZoomBar\n
    * Change the location of the slider to match the current zoom level.\n
    */\n
    moveZoomBar:function() {\n
        var newTop = \n
            ((this.map.getNumZoomLevels()-1) - this.map.getZoom()) * \n
            this.zoomStopHeight + this.startTop + 1;\n
        this.slider.style.top = newTop + "px";\n
    },    \n
    \n
    CLASS_NAME: "OpenLayers.Control.PanZoomBar"\n
});

]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>12487</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

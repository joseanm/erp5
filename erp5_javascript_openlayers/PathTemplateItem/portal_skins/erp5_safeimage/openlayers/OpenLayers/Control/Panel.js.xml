<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.8</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Panel.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Control.js\n
 * @requires OpenLayers/Events/buttonclick.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Control.Panel\n
 * The Panel control is a container for other controls. With it toolbars\n
 * may be composed.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Control>\n
 */\n
OpenLayers.Control.Panel = OpenLayers.Class(OpenLayers.Control, {\n
    /**\n
     * Property: controls\n
     * {Array(<OpenLayers.Control>)}\n
     */\n
    controls: null,    \n
    \n
    /**\n
     * APIProperty: autoActivate\n
     * {Boolean} Activate the control when it is added to a map.  Default is\n
     *     true.\n
     */\n
    autoActivate: true,\n
\n
    /** \n
     * APIProperty: defaultControl\n
     * {<OpenLayers.Control>} The control which is activated when the control is\n
     * activated (turned on), which also happens at instantiation.\n
     * If <saveState> is true, <defaultControl> will be nullified after the\n
     * first activation of the panel.\n
     */\n
    defaultControl: null,\n
    \n
    /**\n
     * APIProperty: saveState\n
     * {Boolean} If set to true, the active state of this panel\'s controls will\n
     * be stored on panel deactivation, and restored on reactivation. Default\n
     * is false.\n
     */\n
    saveState: false,\n
      \n
    /**\n
     * APIProperty: allowDepress\n
     * {Boolean} If is true the <OpenLayers.Control.TYPE_TOOL> controls can \n
     *     be deactivated by clicking the icon that represents them.  Default \n
     *     is false.\n
     */\n
    allowDepress: false,\n
    \n
    /**\n
     * Property: activeState\n
     * {Object} stores the active state of this panel\'s controls.\n
     */\n
    activeState: null,\n
\n
    /**\n
     * Constructor: OpenLayers.Control.Panel\n
     * Create a new control panel.\n
     *\n
     * Each control in the panel is represented by an icon. When clicking \n
     *     on an icon, the <activateControl> method is called.\n
     *\n
     * Specific properties for controls on a panel:\n
     * type - {Number} One of <OpenLayers.Control.TYPE_TOOL>,\n
     *     <OpenLayers.Control.TYPE_TOGGLE>, <OpenLayers.Control.TYPE_BUTTON>.\n
     *     If not provided, <OpenLayers.Control.TYPE_TOOL> is assumed.\n
     * title - {string} Text displayed when mouse is over the icon that \n
     *     represents the control.     \n
     *\n
     * The <OpenLayers.Control.type> of a control determines the behavior when\n
     * clicking its icon:\n
     * <OpenLayers.Control.TYPE_TOOL> - The control is activated and other\n
     *     controls of this type in the same panel are deactivated. This is\n
     *     the default type.\n
     * <OpenLayers.Control.TYPE_TOGGLE> - The active state of the control is\n
     *     toggled.\n
     * <OpenLayers.Control.TYPE_BUTTON> - The\n
     *     <OpenLayers.Control.Button.trigger> method of the control is called,\n
     *     but its active state is not changed.\n
     *\n
     * If a control is <OpenLayers.Control.active>, it will be drawn with the\n
     * olControl[Name]ItemActive class, otherwise with the\n
     * olControl[Name]ItemInactive class.\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object whose properties will be used\n
     *     to extend the control.\n
     */\n
    initialize: function(options) {\n
        OpenLayers.Control.prototype.initialize.apply(this, [options]);\n
        this.controls = [];\n
        this.activeState = {};\n
    },\n
\n
    /**\n
     * APIMethod: destroy\n
     */\n
    destroy: function() {\n
        if (this.map) {\n
            this.map.events.unregister("buttonclick", this, this.onButtonClick);\n
        }\n
        OpenLayers.Control.prototype.destroy.apply(this, arguments);\n
        for (var ctl, i = this.controls.length - 1; i >= 0; i--) {\n
            ctl = this.controls[i];\n
            if (ctl.events) {\n
                ctl.events.un({\n
                    activate: this.iconOn,\n
                    deactivate: this.iconOff\n
                });\n
            }\n
            ctl.panel_div = null;\n
        }\n
        this.activeState = null;\n
    },\n
\n
    /**\n
     * APIMethod: activate\n
     */\n
    activate: function() {\n
        if (OpenLayers.Control.prototype.activate.apply(this, arguments)) {\n
            var control;\n
            for (var i=0, len=this.controls.length; i<len; i++) {\n
                control = this.controls[i];\n
                if (control === this.defaultControl ||\n
                            (this.saveState && this.activeState[control.id])) {\n
                    control.activate();\n
                }\n
            }    \n
            if (this.saveState === true) {\n
                this.defaultControl = null;\n
            }\n
            this.redraw();\n
            return true;\n
        } else {\n
            return false;\n
        }\n
    },\n
    \n
    /**\n
     * APIMethod: deactivate\n
     */\n
    deactivate: function() {\n
        if (OpenLayers.Control.prototype.deactivate.apply(this, arguments)) {\n
            var control;\n
            for (var i=0, len=this.controls.length; i<len; i++) {\n
                control = this.controls[i];\n
                this.activeState[control.id] = control.deactivate();\n
            }    \n
            this.redraw();\n
            return true;\n
        } else {\n
            return false;\n
        }\n
    },\n
    \n
    /**\n
     * Method: draw\n
     *\n
     * Returns:\n
     * {DOMElement}\n
     */    \n
    draw: function() {\n
        OpenLayers.Control.prototype.draw.apply(this, arguments);\n
        if (this.outsideViewport) {\n
            this.events.attachToElement(this.div);\n
            this.events.register("buttonclick", this, this.onButtonClick);\n
        } else {\n
            this.map.events.register("buttonclick", this, this.onButtonClick);\n
        }\n
        this.addControlsToMap(this.controls);\n
        return this.div;\n
    },\n
\n
    /**\n
     * Method: redraw\n
     */\n
    redraw: function() {\n
        for (var l=this.div.childNodes.length, i=l-1; i>=0; i--) {\n
            this.div.removeChild(this.div.childNodes[i]);\n
        }\n
        this.div.innerHTML = "";\n
        if (this.active) {\n
            for (var i=0, len=this.controls.length; i<len; i++) {\n
                this.div.appendChild(this.controls[i].panel_div);\n
            }\n
        }\n
    },\n
    \n
    /**\n
     * APIMethod: activateControl\n
     * This method is called when the user click on the icon representing a \n
     *     control in the panel.\n
     *\n
     * Parameters:\n
     * control - {<OpenLayers.Control>}\n
     */\n
    activateControl: function (control) {\n
        if (!this.active) { return false; }\n
        if (control.type == OpenLayers.Control.TYPE_BUTTON) {\n
            control.trigger();\n
            return;\n
        }\n
        if (control.type == OpenLayers.Control.TYPE_TOGGLE) {\n
            if (control.active) {\n
                control.deactivate();\n
            } else {\n
                control.activate();\n
            }\n
            return;\n
        }\n
        if (this.allowDepress && control.active) {\n
            control.deactivate();\n
        } else {\n
            var c;\n
            for (var i=0, len=this.controls.length; i<len; i++) {\n
                c = this.controls[i];\n
                if (c != control &&\n
                   (c.type === OpenLayers.Control.TYPE_TOOL || c.type == null)) {\n
                    c.deactivate();\n
                }\n
            }\n
            control.activate();\n
        }\n
    },\n
\n
    /**\n
     * APIMethod: addControls\n
     * To build a toolbar, you add a set of controls to it. addControls\n
     * lets you add a single control or a list of controls to the \n
     * Control Panel.\n
     *\n
     * Parameters:\n
     * controls - {<OpenLayers.Control>} Controls to add in the panel.\n
     */    \n
    addControls: function(controls) {\n
        if (!(OpenLayers.Util.isArray(controls))) {\n
            controls = [controls];\n
        }\n
        this.controls = this.controls.concat(controls);\n
\n
        for (var i=0, len=controls.length; i<len; i++) {\n
            var control = controls[i],\n
                element = this.createControlMarkup(control);\n
            OpenLayers.Element.addClass(element, \n
                                        control.displayClass + "ItemInactive");\n
            OpenLayers.Element.addClass(element, "olButton");\n
            if (control.title != ""  && !element.title) {\n
                element.title = control.title;\n
            }\n
            control.panel_div = element;\n
        }\n
\n
        if (this.map) { // map.addControl() has already been called on the panel\n
            this.addControlsToMap(controls);\n
            this.redraw();\n
        }\n
    },\n
\n
    /**\n
     * APIMethod: createControlMarkup\n
     * This function just creates a div for the control. If specific HTML\n
     * markup is needed this function can be overridden in specific classes,\n
     * or at panel instantiation time:\n
     *\n
     * Example:\n
     * (code)\n
     * var panel = new OpenLayers.Control.Panel({\n
     *     defaultControl: control,\n
     *     // ovverride createControlMarkup to create actual buttons\n
     *     // including texts wrapped into span elements.\n
     *     createControlMarkup: function(control) {\n
     *         var button = document.createElement(\'button\'),\n
     *             span = document.createElement(\'span\');\n
     *         if (control.text) {\n
     *             span.innerHTML = control.text;\n
     *         }\n
     *         return button;\n
     *     }\n
     *  });\n
     * (end)\n
     *\n
     * Parameters:\n
     * control - {<OpenLayers.Control>} The control to create the HTML\n
     *     markup for.\n
     *\n
     * Returns:\n
     * {DOMElement} The markup.\n
     */\n
    createControlMarkup: function(control) {\n
        return document.createElement("div");\n
    },\n
   \n
    /**\n
     * Method: addControlsToMap\n
     * Only for internal use in draw() and addControls() methods.\n
     *\n
     * Parameters:\n
     * controls - {Array(<OpenLayers.Control>)} Controls to add into map.\n
     */         \n
    addControlsToMap: function (controls) {\n
        var control;\n
        for (var i=0, len=controls.length; i<len; i++) {\n
            control = controls[i];\n
            if (control.autoActivate === true) {\n
                control.autoActivate = false;\n
                this.map.addControl(control);\n
                control.autoActivate = true;\n
            } else {\n
                this.map.addControl(control);\n
                control.deactivate();\n
            }\n
            control.events.on({\n
                activate: this.iconOn,\n
                deactivate: this.iconOff\n
            });\n
        }  \n
    },\n
\n
    /**\n
     * Method: iconOn\n
     * Internal use, for use only with "controls[i].events.on/un".\n
     */\n
     iconOn: function() {\n
        var d = this.panel_div; // "this" refers to a control on panel!\n
        var re = new RegExp("\\\\b(" + this.displayClass + "Item)Inactive\\\\b");\n
        d.className = d.className.replace(re, "$1Active");\n
    },\n
\n
    /**\n
     * Method: iconOff\n
     * Internal use, for use only with "controls[i].events.on/un".\n
     */\n
     iconOff: function() {\n
        var d = this.panel_div; // "this" refers to a control on panel!\n
        var re = new RegExp("\\\\b(" + this.displayClass + "Item)Active\\\\b");\n
        d.className = d.className.replace(re, "$1Inactive");\n
    },\n
    \n
    /**\n
     * Method: onButtonClick\n
     *\n
     * Parameters:\n
     * evt - {Event}\n
     */\n
    onButtonClick: function (evt) {\n
        var controls = this.controls,\n
            button = evt.buttonElement;\n
        for (var i=controls.length-1; i>=0; --i) {\n
            if (controls[i].panel_div === button) {\n
                this.activateControl(controls[i]);\n
                break;\n
            }\n
        }\n
    },\n
\n
    /**\n
     * APIMethod: getControlsBy\n
     * Get a list of controls with properties matching the given criteria.\n
     *\n
     * Parameters:\n
     * property - {String} A control property to be matched.\n
     * match - {String | Object} A string to match.  Can also be a regular\n
     *     expression literal or object.  In addition, it can be any object\n
     *     with a method named test.  For reqular expressions or other, if\n
     *     match.test(control[property]) evaluates to true, the control will be\n
     *     included in the array returned.  If no controls are found, an empty\n
     *     array is returned.\n
     *\n
     * Returns:\n
     * {Array(<OpenLayers.Control>)} A list of controls matching the given criteria.\n
     *     An empty array is returned if no matches are found.\n
     */\n
    getControlsBy: function(property, match) {\n
        var test = (typeof match.test == "function");\n
        var found = OpenLayers.Array.filter(this.controls, function(item) {\n
            return item[property] == match || (test && match.test(item[property]));\n
        });\n
        return found;\n
    },\n
\n
    /**\n
     * APIMethod: getControlsByName\n
     * Get a list of contorls with names matching the given name.\n
     *\n
     * Parameters:\n
     * match - {String | Object} A control name.  The name can also be a regular\n
     *     expression literal or object.  In addition, it can be any object\n
     *     with a method named test.  For reqular expressions or other, if\n
     *     name.test(control.name) evaluates to true, the control will be included\n
     *     in the list of controls returned.  If no controls are found, an empty\n
     *     array is returned.\n
     *\n
     * Returns:\n
     * {Array(<OpenLayers.Control>)} A list of controls matching the given name.\n
     *     An empty array is returned if no matches are found.\n
     */\n
    getControlsByName: function(match) {\n
        return this.getControlsBy("name", match);\n
    },\n
\n
    /**\n
     * APIMethod: getControlsByClass\n
     * Get a list of controls of a given type (CLASS_NAME).\n
     *\n
     * Parameters:\n
     * match - {String | Object} A control class name.  The type can also be a\n
     *     regular expression literal or object.  In addition, it can be any\n
     *     object with a method named test.  For reqular expressions or other,\n
     *     if type.test(control.CLASS_NAME) evaluates to true, the control will\n
     *     be included in the list of controls returned.  If no controls are\n
     *     found, an empty array is returned.\n
     *\n
     * Returns:\n
     * {Array(<OpenLayers.Control>)} A list of controls matching the given type.\n
     *     An empty array is returned if no matches are found.\n
     */\n
    getControlsByClass: function(match) {\n
        return this.getControlsBy("CLASS_NAME", match);\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Control.Panel"\n
});\n
\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>14528</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

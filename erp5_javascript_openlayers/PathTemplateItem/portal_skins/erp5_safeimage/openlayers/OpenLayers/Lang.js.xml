<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.77</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Lang.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/BaseTypes.js\n
 * @requires OpenLayers/Console.js\n
 */\n
\n
/**\n
 * Namespace: OpenLayers.Lang\n
 * Internationalization namespace.  Contains dictionaries in various languages\n
 *     and methods to set and get the current language.\n
 */\n
OpenLayers.Lang = {\n
    \n
    /** \n
     * Property: code\n
     * {String}  Current language code to use in OpenLayers.  Use the\n
     *     <setCode> method to set this value and the <getCode> method to\n
     *     retrieve it.\n
     */\n
    code: null,\n
\n
    /** \n
     * APIProperty: defaultCode\n
     * {String} Default language to use when a specific language can\'t be\n
     *     found.  Default is "en".\n
     */\n
    defaultCode: "en",\n
        \n
    /**\n
     * APIFunction: getCode\n
     * Get the current language code.\n
     *\n
     * Returns:\n
     * {String} The current language code.\n
     */\n
    getCode: function() {\n
        if(!OpenLayers.Lang.code) {\n
            OpenLayers.Lang.setCode();\n
        }\n
        return OpenLayers.Lang.code;\n
    },\n
    \n
    /**\n
     * APIFunction: setCode\n
     * Set the language code for string translation.  This code is used by\n
     *     the <OpenLayers.Lang.translate> method.\n
     *\n
     * Parameters:\n
     * code - {String} These codes follow the IETF recommendations at\n
     *     http://www.ietf.org/rfc/rfc3066.txt.  If no value is set, the\n
     *     browser\'s language setting will be tested.  If no <OpenLayers.Lang>\n
     *     dictionary exists for the code, the <OpenLayers.String.defaultLang>\n
     *     will be used.\n
     */\n
    setCode: function(code) {\n
        var lang;\n
        if(!code) {\n
            code = (OpenLayers.BROWSER_NAME == "msie") ?\n
                navigator.userLanguage : navigator.language;\n
        }\n
        var parts = code.split(\'-\');\n
        parts[0] = parts[0].toLowerCase();\n
        if(typeof OpenLayers.Lang[parts[0]] == "object") {\n
            lang = parts[0];\n
        }\n
\n
        // check for regional extensions\n
        if(parts[1]) {\n
            var testLang = parts[0] + \'-\' + parts[1].toUpperCase();\n
            if(typeof OpenLayers.Lang[testLang] == "object") {\n
                lang = testLang;\n
            }\n
        }\n
        if(!lang) {\n
            OpenLayers.Console.warn(\n
                \'Failed to find OpenLayers.Lang.\' + parts.join("-") +\n
                \' dictionary, falling back to default language\'\n
            );\n
            lang = OpenLayers.Lang.defaultCode;\n
        }\n
        \n
        OpenLayers.Lang.code = lang;\n
    },\n
\n
    /**\n
     * APIMethod: translate\n
     * Looks up a key from a dictionary based on the current language string.\n
     *     The value of <getCode> will be used to determine the appropriate\n
     *     dictionary.  Dictionaries are stored in <OpenLayers.Lang>.\n
     *\n
     * Parameters:\n
     * key - {String} The key for an i18n string value in the dictionary.\n
     * context - {Object} Optional context to be used with\n
     *     <OpenLayers.String.format>.\n
     * \n
     * Returns:\n
     * {String} A internationalized string.\n
     */\n
    translate: function(key, context) {\n
        var dictionary = OpenLayers.Lang[OpenLayers.Lang.getCode()];\n
        var message = dictionary && dictionary[key];\n
        if(!message) {\n
            // Message not found, fall back to message key\n
            message = key;\n
        }\n
        if(context) {\n
            message = OpenLayers.String.format(message, context);\n
        }\n
        return message;\n
    }\n
    \n
};\n
\n
\n
/**\n
 * APIMethod: OpenLayers.i18n\n
 * Alias for <OpenLayers.Lang.translate>.  Looks up a key from a dictionary\n
 *     based on the current language string. The value of\n
 *     <OpenLayers.Lang.getCode> will be used to determine the appropriate\n
 *     dictionary.  Dictionaries are stored in <OpenLayers.Lang>.\n
 *\n
 * Parameters:\n
 * key - {String} The key for an i18n string value in the dictionary.\n
 * context - {Object} Optional context to be used with\n
 *     <OpenLayers.String.format>.\n
 * \n
 * Returns:\n
 * {String} A internationalized string.\n
 */\n
OpenLayers.i18n = OpenLayers.Lang.translate;\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4268</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.78</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>buttonclick.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Events.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Events.buttonclick\n
 * Extension event type for handling buttons on top of a dom element. This\n
 *     event type fires "buttonclick" on its <target> when a button was\n
 *     clicked. Buttons are detected by the "olButton" class.\n
 *\n
 * This event type makes sure that button clicks do not interfere with other\n
 *     events that are registered on the same <element>.\n
 *\n
 * Event types provided by this extension:\n
 * - *buttonclick* Triggered when a button is clicked. Listeners receive an\n
 *     object with a *buttonElement* property referencing the dom element of\n
 *     the clicked button, and an *buttonXY* property with the click position\n
 *     relative to the button.\n
 */\n
OpenLayers.Events.buttonclick = OpenLayers.Class({\n
    \n
    /**\n
     * Property: target\n
     * {<OpenLayers.Events>} The events instance that the buttonclick event will\n
     * be triggered on.\n
     */\n
    target: null,\n
    \n
    /**\n
     * Property: events\n
     * {Array} Events to observe and conditionally stop from propagating when\n
     *     an element with the olButton class (or its olAlphaImg child) is\n
     *     clicked.\n
     */\n
    events: [\n
        \'mousedown\', \'mouseup\', \'click\', \'dblclick\',\n
        \'touchstart\', \'touchmove\', \'touchend\', \'keydown\'\n
    ],\n
    \n
    /**\n
     * Property: startRegEx\n
     * {RegExp} Regular expression to test Event.type for events that start\n
     *     a buttonclick sequence.\n
     */\n
    startRegEx: /^mousedown|touchstart$/,\n
\n
    /**\n
     * Property: cancelRegEx\n
     * {RegExp} Regular expression to test Event.type for events that cancel\n
     *     a buttonclick sequence.\n
     */\n
    cancelRegEx: /^touchmove$/,\n
\n
    /**\n
     * Property: completeRegEx\n
     * {RegExp} Regular expression to test Event.type for events that complete\n
     *     a buttonclick sequence.\n
     */\n
    completeRegEx: /^mouseup|touchend$/,\n
    \n
    /**\n
     * Property: startEvt\n
     * {Event} The event that started the click sequence\n
     */\n
    \n
    /**\n
     * Constructor: OpenLayers.Events.buttonclick\n
     * Construct a buttonclick event type. Applications are not supposed to\n
     *     create instances of this class - they are created on demand by\n
     *     <OpenLayers.Events> instances.\n
     *\n
     * Parameters:\n
     * target - {<OpenLayers.Events>} The events instance that the buttonclick\n
     *     event will be triggered on.\n
     */\n
    initialize: function(target) {\n
        this.target = target;\n
        for (var i=this.events.length-1; i>=0; --i) {\n
            this.target.register(this.events[i], this, this.buttonClick, {\n
                extension: true\n
            });\n
        }\n
    },\n
    \n
    /**\n
     * Method: destroy\n
     */\n
    destroy: function() {\n
        for (var i=this.events.length-1; i>=0; --i) {\n
            this.target.unregister(this.events[i], this, this.buttonClick);\n
        }\n
        delete this.target;\n
    },\n
\n
    /**\n
     * Method: getPressedButton\n
     * Get the pressed button, if any. Returns undefined if no button\n
     * was pressed.\n
     *\n
     * Arguments:\n
     * element - {DOMElement} The event target.\n
     *\n
     * Returns:\n
     * {DOMElement} The button element, or undefined.\n
     */\n
    getPressedButton: function(element) {\n
        var depth = 3, // limit the search depth\n
            button;\n
        do {\n
            if(OpenLayers.Element.hasClass(element, "olButton")) {\n
                // hit!\n
                button = element;\n
                break;\n
            }\n
            element = element.parentNode;\n
        } while(--depth > 0 && element);\n
        return button;\n
    },\n
\n
    /**\n
     * Method: buttonClick\n
     * Check if a button was clicked, and fire the buttonclick event\n
     *\n
     * Parameters:\n
     * evt - {Event}\n
     */\n
    buttonClick: function(evt) {\n
        var propagate = true,\n
            element = OpenLayers.Event.element(evt);\n
        if (element && (OpenLayers.Event.isLeftClick(evt) || !~evt.type.indexOf("mouse"))) {\n
            // was a button pressed?\n
            var button = this.getPressedButton(element);\n
            if (button) {\n
                if (evt.type === "keydown") {\n
                    switch (evt.keyCode) {\n
                    case OpenLayers.Event.KEY_RETURN:\n
                    case OpenLayers.Event.KEY_SPACE:\n
                        this.target.triggerEvent("buttonclick", {\n
                            buttonElement: button\n
                        });\n
                        OpenLayers.Event.stop(evt);\n
                        propagate = false;\n
                        break;\n
                    }\n
                } else if (this.startEvt) {\n
                    if (this.completeRegEx.test(evt.type)) {\n
                        var pos = OpenLayers.Util.pagePosition(button);\n
                        this.target.triggerEvent("buttonclick", {\n
                            buttonElement: button,\n
                            buttonXY: {\n
                                x: this.startEvt.clientX - pos[0],\n
                                y: this.startEvt.clientY - pos[1]\n
                            }\n
                        });\n
                    }\n
                    if (this.cancelRegEx.test(evt.type)) {\n
                        delete this.startEvt;\n
                    }\n
                    OpenLayers.Event.stop(evt);\n
                    propagate = false;\n
                }\n
                if (this.startRegEx.test(evt.type)) {\n
                    this.startEvt = evt;\n
                    OpenLayers.Event.stop(evt);\n
                    propagate = false;\n
                }\n
            } else {\n
                delete this.startEvt;\n
            }\n
        }\n
        return propagate;\n
    }\n
    \n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5945</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

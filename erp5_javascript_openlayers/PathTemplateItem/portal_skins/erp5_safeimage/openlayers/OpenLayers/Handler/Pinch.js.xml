<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.88</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Pinch.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for\n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Handler.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Handler.Pinch\n
 * The pinch handler is used to deal with sequences of browser events related\n
 *     to pinch gestures. The handler is used by controls that want to know\n
 *     when a pinch sequence begins, when a pinch is happening, and when it has\n
 *     finished.\n
 *\n
 * Controls that use the pinch handler typically construct it with callbacks\n
 *     for \'start\', \'move\', and \'done\'.  Callbacks for these keys are\n
 *     called when the pinch begins, with each change, and when the pinch is\n
 *     done.\n
 *\n
 * Create a new pinch handler with the <OpenLayers.Handler.Pinch> constructor.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Handler>\n
 */\n
OpenLayers.Handler.Pinch = OpenLayers.Class(OpenLayers.Handler, {\n
\n
    /**\n
     * Property: started\n
     * {Boolean} When a touchstart event is received, we want to record it,\n
     *     but not set \'pinching\' until the touchmove get started after\n
     *     starting.\n
     */\n
    started: false,\n
\n
    /**\n
     * Property: stopDown\n
     * {Boolean} Stop propagation of touchstart events from getting to\n
     *     listeners on the same element. Default is false.\n
     */\n
    stopDown: false,\n
\n
    /**\n
     * Property: pinching\n
     * {Boolean}\n
     */\n
    pinching: false,\n
\n
    /**\n
     * Property: last\n
     * {Object} Object that store informations related to pinch last touch.\n
     */\n
    last: null,\n
\n
    /**\n
     * Property: start\n
     * {Object} Object that store informations related to pinch touchstart.\n
     */\n
    start: null,\n
\n
    /**\n
     * Constructor: OpenLayers.Handler.Pinch\n
     * Returns OpenLayers.Handler.Pinch\n
     *\n
     * Parameters:\n
     * control - {<OpenLayers.Control>} The control that is making use of\n
     *     this handler.  If a handler is being used without a control, the\n
     *     handlers setMap method must be overridden to deal properly with\n
     *     the map.\n
     * callbacks - {Object} An object containing functions to be called when\n
     *     the pinch operation start, change, or is finished. The callbacks\n
     *     should expect to receive an object argument, which contains\n
     *     information about scale, distance, and position of touch points.\n
     * options - {Object}\n
     */\n
\n
    /**\n
     * Method: touchstart\n
     * Handle touchstart events\n
     *\n
     * Parameters:\n
     * evt - {Event}\n
     *\n
     * Returns:\n
     * {Boolean} Let the event propagate.\n
     */\n
    touchstart: function(evt) {\n
        var propagate = true;\n
        this.pinching = false;\n
        if (OpenLayers.Event.isMultiTouch(evt)) {\n
            this.started = true;\n
            this.last = this.start = {\n
                distance: this.getDistance(evt.touches),\n
                delta: 0,\n
                scale: 1\n
            };\n
            this.callback("start", [evt, this.start]);\n
            propagate = !this.stopDown;\n
        } else {\n
            this.started = false;\n
            this.start = null;\n
            this.last = null;\n
        }\n
        // prevent document dragging\n
        OpenLayers.Event.stop(evt);\n
        return propagate;\n
    },\n
\n
    /**\n
     * Method: touchmove\n
     * Handle touchmove events\n
     *\n
     * Parameters:\n
     * evt - {Event}\n
     *\n
     * Returns:\n
     * {Boolean} Let the event propagate.\n
     */\n
    touchmove: function(evt) {\n
        if (this.started && OpenLayers.Event.isMultiTouch(evt)) {\n
            this.pinching = true;\n
            var current = this.getPinchData(evt);\n
            this.callback("move", [evt, current]);\n
            this.last = current;\n
            // prevent document dragging\n
            OpenLayers.Event.stop(evt);\n
        }\n
        return true;\n
    },\n
\n
    /**\n
     * Method: touchend\n
     * Handle touchend events\n
     *\n
     * Parameters:\n
     * evt - {Event}\n
     *\n
     * Returns:\n
     * {Boolean} Let the event propagate.\n
     */\n
    touchend: function(evt) {\n
        if (this.started) {\n
            this.started = false;\n
            this.pinching = false;\n
            this.callback("done", [evt, this.start, this.last]);\n
            this.start = null;\n
            this.last = null;\n
        }\n
        return true;\n
    },\n
\n
    /**\n
     * Method: activate\n
     * Activate the handler.\n
     *\n
     * Returns:\n
     * {Boolean} The handler was successfully activated.\n
     */\n
    activate: function() {\n
        var activated = false;\n
        if (OpenLayers.Handler.prototype.activate.apply(this, arguments)) {\n
            this.pinching = false;\n
            activated = true;\n
        }\n
        return activated;\n
    },\n
\n
    /**\n
     * Method: deactivate\n
     * Deactivate the handler.\n
     *\n
     * Returns:\n
     * {Boolean} The handler was successfully deactivated.\n
     */\n
    deactivate: function() {\n
        var deactivated = false;\n
        if (OpenLayers.Handler.prototype.deactivate.apply(this, arguments)) {\n
            this.started = false;\n
            this.pinching = false;\n
            this.start = null;\n
            this.last = null;\n
            deactivated = true;\n
        }\n
        return deactivated;\n
    },\n
\n
    /**\n
     * Method: getDistance\n
     * Get the distance in pixels between two touches.\n
     *\n
     * Parameters:\n
     * touches - {Array(Object)}\n
     *\n
     * Returns:\n
     * {Number} The distance in pixels.\n
     */\n
    getDistance: function(touches) {\n
        var t0 = touches[0];\n
        var t1 = touches[1];\n
        return Math.sqrt(\n
            Math.pow(t0.clientX - t1.clientX, 2) +\n
            Math.pow(t0.clientY - t1.clientY, 2)\n
        );\n
    },\n
\n
\n
    /**\n
     * Method: getPinchData\n
     * Get informations about the pinch event.\n
     *\n
     * Parameters:\n
     * evt - {Event}\n
     *\n
     * Returns:\n
     * {Object} Object that contains data about the current pinch.\n
     */\n
    getPinchData: function(evt) {\n
        var distance = this.getDistance(evt.touches);\n
        var scale = distance / this.start.distance;\n
        return {\n
            distance: distance,\n
            delta: this.last.distance - distance,\n
            scale: scale\n
        };\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Handler.Pinch"\n
});\n
\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6304</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.76</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Control.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/BaseTypes/Class.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Control\n
 * Controls affect the display or behavior of the map. They allow everything\n
 * from panning and zooming to displaying a scale indicator. Controls by \n
 * default are added to the map they are contained within however it is\n
 * possible to add a control to an external div by passing the div in the\n
 * options parameter.\n
 * \n
 * Example:\n
 * The following example shows how to add many of the common controls\n
 * to a map.\n
 * \n
 * > var map = new OpenLayers.Map(\'map\', { controls: [] });\n
 * >\n
 * > map.addControl(new OpenLayers.Control.PanZoomBar());\n
 * > map.addControl(new OpenLayers.Control.LayerSwitcher({\'ascending\':false}));\n
 * > map.addControl(new OpenLayers.Control.Permalink());\n
 * > map.addControl(new OpenLayers.Control.Permalink(\'permalink\'));\n
 * > map.addControl(new OpenLayers.Control.MousePosition());\n
 * > map.addControl(new OpenLayers.Control.OverviewMap());\n
 * > map.addControl(new OpenLayers.Control.KeyboardDefaults());\n
 *\n
 * The next code fragment is a quick example of how to intercept \n
 * shift-mouse click to display the extent of the bounding box\n
 * dragged out by the user.  Usually controls are not created\n
 * in exactly this manner.  See the source for a more complete \n
 * example:\n
 *\n
 * > var control = new OpenLayers.Control();\n
 * > OpenLayers.Util.extend(control, {\n
 * >     draw: function () {\n
 * >         // this Handler.Box will intercept the shift-mousedown\n
 * >         // before Control.MouseDefault gets to see it\n
 * >         this.box = new OpenLayers.Handler.Box( control, \n
 * >             {"done": this.notice},\n
 * >             {keyMask: OpenLayers.Handler.MOD_SHIFT});\n
 * >         this.box.activate();\n
 * >     },\n
 * >\n
 * >     notice: function (bounds) {\n
 * >         OpenLayers.Console.userError(bounds);\n
 * >     }\n
 * > }); \n
 * > map.addControl(control);\n
 * \n
 */\n
OpenLayers.Control = OpenLayers.Class({\n
\n
    /** \n
     * Property: id \n
     * {String} \n
     */\n
    id: null,\n
    \n
    /** \n
     * Property: map \n
     * {<OpenLayers.Map>} this gets set in the addControl() function in\n
     * OpenLayers.Map \n
     */\n
    map: null,\n
\n
    /** \n
     * APIProperty: div \n
     * {DOMElement} The element that contains the control, if not present the \n
     *     control is placed inside the map.\n
     */\n
    div: null,\n
\n
    /** \n
     * APIProperty: type \n
     * {Number} Controls can have a \'type\'. The type determines the type of\n
     * interactions which are possible with them when they are placed in an\n
     * <OpenLayers.Control.Panel>. \n
     */\n
    type: null, \n
\n
    /** \n
     * Property: allowSelection\n
     * {Boolean} By default, controls do not allow selection, because\n
     * it may interfere with map dragging. If this is true, OpenLayers\n
     * will not prevent selection of the control.\n
     * Default is false.\n
     */\n
    allowSelection: false,  \n
\n
    /** \n
     * Property: displayClass \n
     * {string}  This property is used for CSS related to the drawing of the\n
     * Control. \n
     */\n
    displayClass: "",\n
    \n
    /**\n
    * APIProperty: title  \n
    * {string}  This property is used for showing a tooltip over the  \n
    * Control.  \n
    */ \n
    title: "",\n
\n
    /**\n
     * APIProperty: autoActivate\n
     * {Boolean} Activate the control when it is added to a map.  Default is\n
     *     false.\n
     */\n
    autoActivate: false,\n
\n
    /** \n
     * APIProperty: active \n
     * {Boolean} The control is active (read-only).  Use <activate> and \n
     *     <deactivate> to change control state.\n
     */\n
    active: null,\n
\n
    /** \n
     * Property: handler \n
     * {<OpenLayers.Handler>} null\n
     */\n
    handler: null,\n
\n
    /**\n
     * APIProperty: eventListeners\n
     * {Object} If set as an option at construction, the eventListeners\n
     *     object will be registered with <OpenLayers.Events.on>.  Object\n
     *     structure must be a listeners object as shown in the example for\n
     *     the events.on method.\n
     */\n
    eventListeners: null,\n
\n
    /** \n
     * APIProperty: events\n
     * {<OpenLayers.Events>} Events instance for listeners and triggering\n
     *     control specific events.\n
     *\n
     * Register a listener for a particular event with the following syntax:\n
     * (code)\n
     * control.events.register(type, obj, listener);\n
     * (end)\n
     *\n
     * Listeners will be called with a reference to an event object.  The\n
     *     properties of this event depends on exactly what happened.\n
     *\n
     * All event objects have at least the following properties:\n
     * object - {Object} A reference to control.events.object (a reference\n
     *      to the control).\n
     * element - {DOMElement} A reference to control.events.element (which\n
     *      will be null unless documented otherwise).\n
     *\n
     * Supported map event types:\n
     * activate - Triggered when activated.\n
     * deactivate - Triggered when deactivated.\n
     */\n
    events: null,\n
\n
    /**\n
     * Constructor: OpenLayers.Control\n
     * Create an OpenLayers Control.  The options passed as a parameter\n
     * directly extend the control.  For example passing the following:\n
     * \n
     * > var control = new OpenLayers.Control({div: myDiv});\n
     *\n
     * Overrides the default div attribute value of null.\n
     * \n
     * Parameters:\n
     * options - {Object} \n
     */\n
    initialize: function (options) {\n
        // We do this before the extend so that instances can override\n
        // className in options.\n
        this.displayClass = \n
            this.CLASS_NAME.replace("OpenLayers.", "ol").replace(/\\./g, "");\n
        \n
        OpenLayers.Util.extend(this, options);\n
        \n
        this.events = new OpenLayers.Events(this);\n
        if(this.eventListeners instanceof Object) {\n
            this.events.on(this.eventListeners);\n
        }\n
        if (this.id == null) {\n
            this.id = OpenLayers.Util.createUniqueID(this.CLASS_NAME + "_");\n
        }\n
    },\n
\n
    /**\n
     * Method: destroy\n
     * The destroy method is used to perform any clean up before the control\n
     * is dereferenced.  Typically this is where event listeners are removed\n
     * to prevent memory leaks.\n
     */\n
    destroy: function () {\n
        if(this.events) {\n
            if(this.eventListeners) {\n
                this.events.un(this.eventListeners);\n
            }\n
            this.events.destroy();\n
            this.events = null;\n
        }\n
        this.eventListeners = null;\n
\n
        // eliminate circular references\n
        if (this.handler) {\n
            this.handler.destroy();\n
            this.handler = null;\n
        }\n
        if(this.handlers) {\n
            for(var key in this.handlers) {\n
                if(this.handlers.hasOwnProperty(key) &&\n
                   typeof this.handlers[key].destroy == "function") {\n
                    this.handlers[key].destroy();\n
                }\n
            }\n
            this.handlers = null;\n
        }\n
        if (this.map) {\n
            this.map.removeControl(this);\n
            this.map = null;\n
        }\n
        this.div = null;\n
    },\n
\n
    /** \n
     * Method: setMap\n
     * Set the map property for the control. This is done through an accessor\n
     * so that subclasses can override this and take special action once \n
     * they have their map variable set. \n
     *\n
     * Parameters:\n
     * map - {<OpenLayers.Map>} \n
     */\n
    setMap: function(map) {\n
        this.map = map;\n
        if (this.handler) {\n
            this.handler.setMap(map);\n
        }\n
    },\n
  \n
    /**\n
     * Method: draw\n
     * The draw method is called when the control is ready to be displayed\n
     * on the page.  If a div has not been created one is created.  Controls\n
     * with a visual component will almost always want to override this method \n
     * to customize the look of control. \n
     *\n
     * Parameters:\n
     * px - {<OpenLayers.Pixel>} The top-left pixel position of the control\n
     *      or null.\n
     *\n
     * Returns:\n
     * {DOMElement} A reference to the DIV DOMElement containing the control\n
     */\n
    draw: function (px) {\n
        if (this.div == null) {\n
            this.div = OpenLayers.Util.createDiv(this.id);\n
            this.div.className = this.displayClass;\n
            if (!this.allowSelection) {\n
                this.div.className += " olControlNoSelect";\n
                this.div.setAttribute("unselectable", "on", 0);\n
                this.div.onselectstart = OpenLayers.Function.False; \n
            }    \n
            if (this.title != "") {\n
                this.div.title = this.title;\n
            }\n
        }\n
        if (px != null) {\n
            this.position = px.clone();\n
        }\n
        this.moveTo(this.position);\n
        return this.div;\n
    },\n
\n
    /**\n
     * Method: moveTo\n
     * Sets the left and top style attributes to the passed in pixel \n
     * coordinates.\n
     *\n
     * Parameters:\n
     * px - {<OpenLayers.Pixel>}\n
     */\n
    moveTo: function (px) {\n
        if ((px != null) && (this.div != null)) {\n
            this.div.style.left = px.x + "px";\n
            this.div.style.top = px.y + "px";\n
        }\n
    },\n
\n
    /**\n
     * APIMethod: activate\n
     * Explicitly activates a control and it\'s associated\n
     * handler if one has been set.  Controls can be\n
     * deactivated by calling the deactivate() method.\n
     * \n
     * Returns:\n
     * {Boolean}  True if the control was successfully activated or\n
     *            false if the control was already active.\n
     */\n
    activate: function () {\n
        if (this.active) {\n
            return false;\n
        }\n
        if (this.handler) {\n
            this.handler.activate();\n
        }\n
        this.active = true;\n
        if(this.map) {\n
            OpenLayers.Element.addClass(\n
                this.map.viewPortDiv,\n
                this.displayClass.replace(/ /g, "") + "Active"\n
            );\n
        }\n
        this.events.triggerEvent("activate");\n
        return true;\n
    },\n
    \n
    /**\n
     * APIMethod: deactivate\n
     * Deactivates a control and it\'s associated handler if any.  The exact\n
     * effect of this depends on the control itself.\n
     * \n
     * Returns:\n
     * {Boolean} True if the control was effectively deactivated or false\n
     *           if the control was already inactive.\n
     */\n
    deactivate: function () {\n
        if (this.active) {\n
            if (this.handler) {\n
                this.handler.deactivate();\n
            }\n
            this.active = false;\n
            if(this.map) {\n
                OpenLayers.Element.removeClass(\n
                    this.map.viewPortDiv,\n
                    this.displayClass.replace(/ /g, "") + "Active"\n
                );\n
            }\n
            this.events.triggerEvent("deactivate");\n
            return true;\n
        }\n
        return false;\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Control"\n
});\n
\n
/**\n
 * Constant: OpenLayers.Control.TYPE_BUTTON\n
 */\n
OpenLayers.Control.TYPE_BUTTON = 1;\n
\n
/**\n
 * Constant: OpenLayers.Control.TYPE_TOGGLE\n
 */\n
OpenLayers.Control.TYPE_TOGGLE = 2;\n
\n
/**\n
 * Constant: OpenLayers.Control.TYPE_TOOL\n
 */\n
OpenLayers.Control.TYPE_TOOL   = 3;\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>11237</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

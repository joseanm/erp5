<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.83</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>v1_0_0.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Protocol/SOS.js\n
 * @requires OpenLayers/Format/SOSGetFeatureOfInterest.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Protocol.SOS.v1_0_0\n
 * An SOS v1.0.0 Protocol for vector layers.  Create a new instance with the\n
 *     <OpenLayers.Protocol.SOS.v1_0_0> constructor.\n
 *\n
 * Inherits from:\n
 *  - <OpenLayers.Protocol>\n
 */\n
 OpenLayers.Protocol.SOS.v1_0_0 = OpenLayers.Class(OpenLayers.Protocol, {\n
\n
    /**\n
     * APIProperty: fois\n
     * {Array(String)} Array of features of interest (foi)\n
     */\n
    fois: null,\n
\n
    /**\n
     * Property: formatOptions\n
     * {Object} Optional options for the format.  If a format is not provided,\n
     *     this property can be used to extend the default format options.\n
     */\n
    formatOptions: null,\n
   \n
    /**\n
     * Constructor: OpenLayers.Protocol.SOS\n
     * A class for giving layers an SOS protocol.\n
     *\n
     * Parameters:\n
     * options - {Object} Optional object whose properties will be set on the\n
     *     instance.\n
     *\n
     * Valid options properties:\n
     * url - {String} URL to send requests to (required).\n
     * fois - {Array} The features of interest (required).\n
     */\n
    initialize: function(options) {\n
        OpenLayers.Protocol.prototype.initialize.apply(this, [options]);\n
        if(!options.format) {\n
            this.format = new OpenLayers.Format.SOSGetFeatureOfInterest(\n
                this.formatOptions);\n
        }\n
    },\n
   \n
    /**\n
     * APIMethod: destroy\n
     * Clean up the protocol.\n
     */\n
    destroy: function() {\n
        if(this.options && !this.options.format) {\n
            this.format.destroy();\n
        }\n
        this.format = null;\n
        OpenLayers.Protocol.prototype.destroy.apply(this);\n
    },\n
\n
    /**\n
     * APIMethod: read\n
     * Construct a request for reading new sensor positions. This is done by\n
     *     issuing one GetFeatureOfInterest request.\n
     */\n
    read: function(options) {\n
        options = OpenLayers.Util.extend({}, options);\n
        OpenLayers.Util.applyDefaults(options, this.options || {});\n
        var response = new OpenLayers.Protocol.Response({requestType: "read"});\n
        var format = this.format;\n
        var data = OpenLayers.Format.XML.prototype.write.apply(format,\n
            [format.writeNode("sos:GetFeatureOfInterest", {fois: this.fois})]\n
        );\n
        response.priv = OpenLayers.Request.POST({\n
            url: options.url,\n
            callback: this.createCallback(this.handleRead, response, options),\n
            data: data\n
        });\n
        return response;\n
    },\n
   \n
    /**\n
     * Method: handleRead\n
     * Deal with response from the read request.\n
     *\n
     * Parameters:\n
     * response - {<OpenLayers.Protocol.Response>} The response object to pass\n
     *     to the user callback.\n
     * options - {Object} The user options passed to the read call.\n
     */\n
    handleRead: function(response, options) {\n
        if(options.callback) {\n
            var request = response.priv;\n
            if(request.status >= 200 && request.status < 300) {\n
                // success\n
                response.features = this.parseFeatures(request);\n
                response.code = OpenLayers.Protocol.Response.SUCCESS;\n
            } else {\n
                // failure\n
                response.code = OpenLayers.Protocol.Response.FAILURE;\n
            }\n
            options.callback.call(options.scope, response);\n
        }\n
    },\n
\n
    /**\n
     * Method: parseFeatures\n
     * Read HTTP response body and return features\n
     *\n
     * Parameters:\n
     * request - {XMLHttpRequest} The request object\n
     *\n
     * Returns:\n
     * {Array({<OpenLayers.Feature.Vector>})} Array of features\n
     */\n
    parseFeatures: function(request) {\n
        var doc = request.responseXML;\n
        if(!doc || !doc.documentElement) {\n
            doc = request.responseText;\n
        }\n
        if(!doc || doc.length <= 0) {\n
            return null;\n
        }\n
        return this.format.read(doc);\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Protocol.SOS.v1_0_0"\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4244</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

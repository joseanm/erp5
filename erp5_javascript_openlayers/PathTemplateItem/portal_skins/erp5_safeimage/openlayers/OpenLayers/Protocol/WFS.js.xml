<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.82</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>WFS.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/Protocol.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Protocol.WFS\n
 * Used to create a versioned WFS protocol.  Default version is 1.0.0.\n
 *\n
 * Returns:\n
 * {<OpenLayers.Protocol>} A WFS protocol of the given version.\n
 *\n
 * Example:\n
 * (code)\n
 *     var protocol = new OpenLayers.Protocol.WFS({\n
 *         version: "1.1.0",\n
 *         url:  "http://demo.opengeo.org/geoserver/wfs",\n
 *         featureType: "tasmania_roads",\n
 *         featureNS: "http://www.openplans.org/topp",\n
 *         geometryName: "the_geom"\n
 *     });\n
 * (end)\n
 *\n
 * See the protocols for specific WFS versions for more detail.\n
 */\n
OpenLayers.Protocol.WFS = function(options) {\n
    options = OpenLayers.Util.applyDefaults(\n
        options, OpenLayers.Protocol.WFS.DEFAULTS\n
    );\n
    var cls = OpenLayers.Protocol.WFS["v"+options.version.replace(/\\./g, "_")];\n
    if(!cls) {\n
        throw "Unsupported WFS version: " + options.version;\n
    }\n
    return new cls(options);\n
};\n
\n
/**\n
 * Function: fromWMSLayer\n
 * Convenience function to create a WFS protocol from a WMS layer.  This makes\n
 *     the assumption that a WFS requests can be issued at the same URL as\n
 *     WMS requests and that a WFS featureType exists with the same name as the\n
 *     WMS layer.\n
 *     \n
 * This function is designed to auto-configure <url>, <featureType>,\n
 *     <featurePrefix> and <srsName> for WFS <version> 1.1.0. Note that\n
 *     srsName matching with the WMS layer will not work with WFS 1.0.0.\n
 * \n
 * Parameters:\n
 * layer - {<OpenLayers.Layer.WMS>} WMS layer that has a matching WFS\n
 *     FeatureType at the same server url with the same typename.\n
 * options - {Object} Default properties to be set on the protocol.\n
 *\n
 * Returns:\n
 * {<OpenLayers.Protocol.WFS>}\n
 */\n
OpenLayers.Protocol.WFS.fromWMSLayer = function(layer, options) {\n
    var typeName, featurePrefix;\n
    var param = layer.params["LAYERS"];\n
    var parts = (OpenLayers.Util.isArray(param) ? param[0] : param).split(":");\n
    if(parts.length > 1) {\n
        featurePrefix = parts[0];\n
    }\n
    typeName = parts.pop();\n
    var protocolOptions = {\n
        url: layer.url,\n
        featureType: typeName,\n
        featurePrefix: featurePrefix,\n
        srsName: layer.projection && layer.projection.getCode() ||\n
                 layer.map && layer.map.getProjectionObject().getCode(),\n
        version: "1.1.0"\n
    };\n
    return new OpenLayers.Protocol.WFS(OpenLayers.Util.applyDefaults(\n
        options, protocolOptions\n
    ));\n
};\n
\n
/**\n
 * Constant: OpenLayers.Protocol.WFS.DEFAULTS\n
 */\n
OpenLayers.Protocol.WFS.DEFAULTS = {\n
    "version": "1.0.0"\n
};\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2834</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>

<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts53684100.77</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>Format.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/* Copyright (c) 2006-2012 by OpenLayers Contributors (see authors.txt for \n
 * full list of contributors). Published under the 2-clause BSD license.\n
 * See license.txt in the OpenLayers distribution or repository for the\n
 * full text of the license. */\n
\n
/**\n
 * @requires OpenLayers/BaseTypes/Class.js\n
 * @requires OpenLayers/Util.js\n
 */\n
\n
/**\n
 * Class: OpenLayers.Format\n
 * Base class for format reading/writing a variety of formats.  Subclasses\n
 *     of OpenLayers.Format are expected to have read and write methods.\n
 */\n
OpenLayers.Format = OpenLayers.Class({\n
    \n
    /**\n
     * Property: options\n
     * {Object} A reference to options passed to the constructor.\n
     */\n
    options: null,\n
    \n
    /**\n
     * APIProperty: externalProjection\n
     * {<OpenLayers.Projection>} When passed a externalProjection and\n
     *     internalProjection, the format will reproject the geometries it\n
     *     reads or writes. The externalProjection is the projection used by\n
     *     the content which is passed into read or which comes out of write.\n
     *     In order to reproject, a projection transformation function for the\n
     *     specified projections must be available. This support may be \n
     *     provided via proj4js or via a custom transformation function. See\n
     *     {<OpenLayers.Projection.addTransform>} for more information on\n
     *     custom transformations.\n
     */\n
    externalProjection: null,\n
\n
    /**\n
     * APIProperty: internalProjection\n
     * {<OpenLayers.Projection>} When passed a externalProjection and\n
     *     internalProjection, the format will reproject the geometries it\n
     *     reads or writes. The internalProjection is the projection used by\n
     *     the geometries which are returned by read or which are passed into\n
     *     write.  In order to reproject, a projection transformation function\n
     *     for the specified projections must be available. This support may be\n
     *     provided via proj4js or via a custom transformation function. See\n
     *     {<OpenLayers.Projection.addTransform>} for more information on\n
     *     custom transformations.\n
     */\n
    internalProjection: null,\n
\n
    /**\n
     * APIProperty: data\n
     * {Object} When <keepData> is true, this is the parsed string sent to\n
     *     <read>.\n
     */\n
    data: null,\n
\n
    /**\n
     * APIProperty: keepData\n
     * {Object} Maintain a reference (<data>) to the most recently read data.\n
     *     Default is false.\n
     */\n
    keepData: false,\n
\n
    /**\n
     * Constructor: OpenLayers.Format\n
     * Instances of this class are not useful.  See one of the subclasses.\n
     *\n
     * Parameters:\n
     * options - {Object} An optional object with properties to set on the\n
     *           format\n
     *\n
     * Valid options:\n
     * keepData - {Boolean} If true, upon <read>, the data property will be\n
     *     set to the parsed object (e.g. the json or xml object).\n
     *\n
     * Returns:\n
     * An instance of OpenLayers.Format\n
     */\n
    initialize: function(options) {\n
        OpenLayers.Util.extend(this, options);\n
        this.options = options;\n
    },\n
    \n
    /**\n
     * APIMethod: destroy\n
     * Clean up.\n
     */\n
    destroy: function() {\n
    },\n
\n
    /**\n
     * Method: read\n
     * Read data from a string, and return an object whose type depends on the\n
     * subclass. \n
     * \n
     * Parameters:\n
     * data - {string} Data to read/parse.\n
     *\n
     * Returns:\n
     * Depends on the subclass\n
     */\n
    read: function(data) {\n
        throw new Error(\'Read not implemented.\');\n
    },\n
    \n
    /**\n
     * Method: write\n
     * Accept an object, and return a string. \n
     *\n
     * Parameters:\n
     * object - {Object} Object to be serialized\n
     *\n
     * Returns:\n
     * {String} A string representation of the object.\n
     */\n
    write: function(object) {\n
        throw new Error(\'Write not implemented.\');\n
    },\n
\n
    CLASS_NAME: "OpenLayers.Format"\n
});     \n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3904</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
